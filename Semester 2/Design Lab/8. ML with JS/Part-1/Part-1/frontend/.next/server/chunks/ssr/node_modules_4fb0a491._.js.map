{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n    } else if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n    } else if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAQzC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1CJ,OAAOC,OAAO,GAAGC,QAAQ;QAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACO,SAAS,EAAE;;QAIlC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-distance-euclidean/lib-es6/euclidean.js"],"sourcesContent":["export function squaredEuclidean(p, q) {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n        d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n}\r\nexport function euclidean(p, q) {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n}\r\n"],"names":[],"mappings":";;;;AAAO,SAAS,iBAAiB,CAAC,EAAE,CAAC;IACjC,IAAI,IAAI;IACR,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QAC/B,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IACrC;IACA,OAAO;AACX;AACO,SAAS,UAAU,CAAC,EAAE,CAAC;IAC1B,OAAO,KAAK,IAAI,CAAC,iBAAiB,GAAG;AACzC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-knn/src/KDTree.js"],"sourcesContent":["/*\n * Original code from:\n *\n * k-d Tree JavaScript - V 1.01\n *\n * https://github.com/ubilabs/kd-tree-javascript\n *\n * @author Mircea Pricop <pricop@ubilabs.net>, 2012\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n * @author Ubilabs http://ubilabs.net, 2012\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n */\n\nfunction Node(obj, dimension, parent) {\n  this.obj = obj;\n  this.left = null;\n  this.right = null;\n  this.parent = parent;\n  this.dimension = dimension;\n}\n\nexport default class KDTree {\n  constructor(points, metric) {\n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) {\n      this.dimensions = points.dimensions;\n      this.root = points;\n      restoreParent(this.root);\n    } else {\n      this.dimensions = new Array(points[0].length);\n      for (var i = 0; i < this.dimensions.length; i++) {\n        this.dimensions[i] = i;\n      }\n      this.root = buildTree(points, 0, null, this.dimensions);\n    }\n    this.metric = metric;\n  }\n\n  // Convert to a JSON serializable structure; this just requires removing\n  // the `parent` property\n  toJSON() {\n    const result = toJSONImpl(this.root, true);\n    result.dimensions = this.dimensions;\n    return result;\n  }\n\n  nearest(point, maxNodes, maxDistance) {\n    const metric = this.metric;\n    const dimensions = this.dimensions;\n    var i;\n\n    const bestNodes = new BinaryHeap(function (e) {\n      return -e[1];\n    });\n\n    function nearestSearch(node) {\n      const dimension = dimensions[node.dimension];\n      const ownDistance = metric(point, node.obj);\n      const linearPoint = {};\n      var bestChild, linearDistance, otherChild, i;\n\n      function saveNode(node, distance) {\n        bestNodes.push([node, distance]);\n        if (bestNodes.size() > maxNodes) {\n          bestNodes.pop();\n        }\n      }\n\n      for (i = 0; i < dimensions.length; i += 1) {\n        if (i === node.dimension) {\n          linearPoint[dimensions[i]] = point[dimensions[i]];\n        } else {\n          linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n        }\n      }\n\n      linearDistance = metric(linearPoint, node.obj);\n\n      if (node.right === null && node.left === null) {\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n          saveNode(node, ownDistance);\n        }\n        return;\n      }\n\n      if (node.right === null) {\n        bestChild = node.left;\n      } else if (node.left === null) {\n        bestChild = node.right;\n      } else {\n        if (point[dimension] < node.obj[dimension]) {\n          bestChild = node.left;\n        } else {\n          bestChild = node.right;\n        }\n      }\n\n      nearestSearch(bestChild);\n\n      if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n        saveNode(node, ownDistance);\n      }\n\n      if (\n        bestNodes.size() < maxNodes ||\n        Math.abs(linearDistance) < bestNodes.peek()[1]\n      ) {\n        if (bestChild === node.left) {\n          otherChild = node.right;\n        } else {\n          otherChild = node.left;\n        }\n        if (otherChild !== null) {\n          nearestSearch(otherChild);\n        }\n      }\n    }\n\n    if (maxDistance) {\n      for (i = 0; i < maxNodes; i += 1) {\n        bestNodes.push([null, maxDistance]);\n      }\n    }\n\n    if (this.root) {\n      nearestSearch(this.root);\n    }\n\n    const result = [];\n    for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n      if (bestNodes.content[i][0]) {\n        result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n      }\n    }\n    return result;\n  }\n}\n\nfunction toJSONImpl(src) {\n  const dest = new Node(src.obj, src.dimension, null);\n  if (src.left) dest.left = toJSONImpl(src.left);\n  if (src.right) dest.right = toJSONImpl(src.right);\n  return dest;\n}\n\nfunction buildTree(points, depth, parent, dimensions) {\n  const dim = depth % dimensions.length;\n\n  if (points.length === 0) {\n    return null;\n  }\n  if (points.length === 1) {\n    return new Node(points[0], dim, parent);\n  }\n\n  points.sort((a, b) => a[dimensions[dim]] - b[dimensions[dim]]);\n\n  const median = Math.floor(points.length / 2);\n  const node = new Node(points[median], dim, parent);\n  node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);\n  node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);\n\n  return node;\n}\n\nfunction restoreParent(root) {\n  if (root.left) {\n    root.left.parent = root;\n    restoreParent(root.left);\n  }\n\n  if (root.right) {\n    root.right.parent = root;\n    restoreParent(root.right);\n  }\n}\n\n// Binary heap implementation from:\n// http://eloquentjavascript.net/appendix2.html\nclass BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  }\n\n  peek() {\n    return this.content[0];\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n];\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = Math.floor((n + 1) / 2) - 1;\n      const parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to move it further.\n        break;\n      }\n    }\n  }\n\n  sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        var child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      } else {\n        // Otherwise, we are done.\n        break;\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-knn/src/index.js"],"sourcesContent":["import { euclidean as euclideanDistance } from 'ml-distance-euclidean';\n\nimport KDTree from './KDTree';\n\nexport default class KNN {\n  /**\n   * @param {Array} dataset\n   * @param {Array} labels\n   * @param {object} options\n   * @param {number} [options.k=numberOfClasses + 1] - Number of neighbors to classify.\n   * @param {function} [options.distance=euclideanDistance] - Distance function that takes two parameters.\n   */\n  constructor(dataset, labels, options = {}) {\n    if (dataset === true) {\n      const model = labels;\n      this.kdTree = new KDTree(model.kdTree, options);\n      this.k = model.k;\n      this.classes = new Set(model.classes);\n      this.isEuclidean = model.isEuclidean;\n      return;\n    }\n\n    const classes = new Set(labels);\n\n    const { distance = euclideanDistance, k = classes.size + 1 } = options;\n\n    const points = new Array(dataset.length);\n    for (var i = 0; i < points.length; ++i) {\n      points[i] = dataset[i].slice();\n    }\n\n    for (i = 0; i < labels.length; ++i) {\n      points[i].push(labels[i]);\n    }\n\n    this.kdTree = new KDTree(points, distance);\n    this.k = k;\n    this.classes = classes;\n    this.isEuclidean = distance === euclideanDistance;\n  }\n\n  /**\n   * Create a new KNN instance with the given model.\n   * @param {object} model\n   * @param {function} distance=euclideanDistance - distance function must be provided if the model wasn't trained with euclidean distance.\n   * @return {KNN}\n   */\n  static load(model, distance = euclideanDistance) {\n    if (model.name !== 'KNN') {\n      throw new Error(`invalid model: ${model.name}`);\n    }\n    if (!model.isEuclidean && distance === euclideanDistance) {\n      throw new Error(\n        'a custom distance function was used to create the model. Please provide it again'\n      );\n    }\n    if (model.isEuclidean && distance !== euclideanDistance) {\n      throw new Error(\n        'the model was created with the default distance function. Do not load it with another one'\n      );\n    }\n    return new KNN(true, model, distance);\n  }\n\n  /**\n   * Return a JSON containing the kd-tree model.\n   * @return {object} JSON KNN model.\n   */\n  toJSON() {\n    return {\n      name: 'KNN',\n      kdTree: this.kdTree,\n      k: this.k,\n      classes: Array.from(this.classes),\n      isEuclidean: this.isEuclidean\n    };\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Array} dataset\n   * @return {Array} predictions\n   */\n  predict(dataset) {\n    if (Array.isArray(dataset)) {\n      if (typeof dataset[0] === 'number') {\n        return getSinglePrediction(this, dataset);\n      } else if (\n        Array.isArray(dataset[0]) &&\n        typeof dataset[0][0] === 'number'\n      ) {\n        const predictions = new Array(dataset.length);\n        for (var i = 0; i < dataset.length; i++) {\n          predictions[i] = getSinglePrediction(this, dataset[i]);\n        }\n        return predictions;\n      }\n    }\n    throw new TypeError('dataset to predict must be an array or a matrix');\n  }\n}\n\nfunction getSinglePrediction(knn, currentCase) {\n  var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);\n  var pointsPerClass = {};\n  var predictedClass = -1;\n  var maxPoints = -1;\n  var lastElement = nearestPoints[0][0].length - 1;\n\n  for (var element of knn.classes) {\n    pointsPerClass[element] = 0;\n  }\n\n  for (var i = 0; i < nearestPoints.length; ++i) {\n    var currentClass = nearestPoints[i][0][lastElement];\n    var currentPoints = ++pointsPerClass[currentClass];\n    if (currentPoints > maxPoints) {\n      predictedClass = currentClass;\n      maxPoints = currentPoints;\n    }\n  }\n\n  return predictedClass;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,6DAA6D;;;;AAC7D,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAoBrC,SAAU,UAAU,CAAC,KAAc;IACvC,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACxD,CAAC","debugId":null}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-max/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,IAAI,KAAK;IAChB,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAEnF,IAAI,CAAC,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,qBAAqB,QAAQ,SAAS,EACtC,YAAY,uBAAuB,KAAK,IAAI,IAAI,oBAChD,mBAAmB,QAAQ,OAAO,EAClC,UAAU,qBAAqB,KAAK,IAAI,MAAM,MAAM,GAAG;IAE3D,IAAI,YAAY,KAAK,aAAa,MAAM,MAAM,IAAI,CAAC,OAAO,SAAS,CAAC,YAAY;QAC9E,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,WAAW,aAAa,UAAU,MAAM,MAAM,IAAI,CAAC,OAAO,SAAS,CAAC,UAAU;QAChF,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,WAAW,KAAK,CAAC,UAAU;IAE/B,IAAK,IAAI,IAAI,YAAY,GAAG,IAAI,SAAS,IAAK;QAC5C,IAAI,KAAK,CAAC,EAAE,GAAG,UAAU,WAAW,KAAK,CAAC,EAAE;IAC9C;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-min/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,IAAI,KAAK;IAChB,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAEnF,IAAI,CAAC,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,qBAAqB,QAAQ,SAAS,EACtC,YAAY,uBAAuB,KAAK,IAAI,IAAI,oBAChD,mBAAmB,QAAQ,OAAO,EAClC,UAAU,qBAAqB,KAAK,IAAI,MAAM,MAAM,GAAG;IAE3D,IAAI,YAAY,KAAK,aAAa,MAAM,MAAM,IAAI,CAAC,OAAO,SAAS,CAAC,YAAY;QAC9E,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,WAAW,aAAa,UAAU,MAAM,MAAM,IAAI,CAAC,OAAO,SAAS,CAAC,UAAU;QAChF,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,WAAW,KAAK,CAAC,UAAU;IAE/B,IAAK,IAAI,IAAI,YAAY,GAAG,IAAI,SAAS,IAAK;QAC5C,IAAI,KAAK,CAAC,EAAE,GAAG,UAAU,WAAW,KAAK,CAAC,EAAE;IAC9C;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-rescale/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,SAAS,QAAQ,KAAK;IACpB,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAEnF,IAAI,CAAC,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB,OAAO,IAAI,MAAM,MAAM,KAAK,GAAG;QAC7B,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI;IAEJ,IAAI,QAAQ,MAAM,KAAK,WAAW;QAChC,IAAI,CAAC,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE,QAAQ,MAAM,GAAG;YAC/B,MAAM,IAAI,UAAU;QACtB;QAEA,SAAS,QAAQ,MAAM;IACzB,OAAO;QACL,SAAS,IAAI,MAAM,MAAM,MAAM;IACjC;IAEA,IAAI,aAAa,CAAA,GAAA,yJAAA,CAAA,UAAG,AAAD,EAAE;IACrB,IAAI,aAAa,CAAA,GAAA,yJAAA,CAAA,UAAG,AAAD,EAAE;IAErB,IAAI,eAAe,YAAY;QAC7B,MAAM,IAAI,WAAW;IACvB;IAEA,IAAI,eAAe,QAAQ,GAAG,EAC1B,WAAW,iBAAiB,KAAK,IAAI,QAAQ,UAAU,GAAG,aAAa,IAAI,cAC3E,eAAe,QAAQ,GAAG,EAC1B,WAAW,iBAAiB,KAAK,IAAI,QAAQ,UAAU,GAAG,aAAa,IAAI;IAE/E,IAAI,YAAY,UAAU;QACxB,MAAM,IAAI,WAAW;IACvB;IAEA,IAAI,SAAS,CAAC,WAAW,QAAQ,IAAI,CAAC,aAAa,UAAU;IAE7D,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,MAAM,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,UAAU,IAAI,SAAS;IACjD;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 547, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-matrix/matrix.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isAnyArray = require('is-any-array');\nvar rescale = require('ml-array-rescale');\n\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\n/**\n * @this {Matrix}\n * @returns {string}\n */\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nfunction checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray.isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray.isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isDistance() {\n    if (!this.isSymmetric()) return false;\n\n    for (let i = 0; i < this.rows; i++) {\n      if (this.get(i, i) !== 0) return false;\n    }\n\n    return true;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  mpow(scalar) {\n    if (!this.isSquare()) {\n      throw new RangeError('Matrix must be square');\n    }\n    if (!Number.isInteger(scalar) || scalar < 0) {\n      throw new RangeError('Exponent must be a non-negative integer');\n    }\n    // Russian Peasant exponentiation, i.e. exponentiation by squaring\n    let result = Matrix.eye(this.rows);\n    let bb = this;\n    // Note: Don't bit shift. In JS, that would truncate at 32 bits\n    for (let e = scalar; e >= 1; e /= 2) {\n      if ((e & 1) !== 0) {\n        result = result.mmul(bb);\n      }\n      bb = bb.mmul(bb);\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    return this.constructor.copy(this, new Matrix(this.rows, this.columns));\n  }\n\n  /**\n   * @template {AbstractMatrix} M\n   * @param {AbstractMatrix} from\n   * @param {M} to\n   * @return {M}\n   */\n  static copy(from, to) {\n    for (const [row, column, value] of from.entries()) {\n      to.set(row, column, value);\n    }\n\n    return to;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield [row, column, value]\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *entries() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield [row, col, this.get(row, col)];\n      }\n    }\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield value\n   * @returns {Generator<number, void, void>}\n   */\n  *values() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield this.get(row, col);\n      }\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nclass Matrix extends AbstractMatrix {\n  /**\n   * @type {Float64Array[]}\n   */\n  data;\n\n  /**\n   * Init an empty matrix\n   * @param {number} nRows\n   * @param {number} nColumns\n   */\n  #initData(nRows, nColumns) {\n    this.data = [];\n\n    if (Number.isInteger(nColumns) && nColumns >= 0) {\n      for (let i = 0; i < nRows; i++) {\n        this.data.push(new Float64Array(nColumns));\n      }\n    } else {\n      throw new TypeError('nColumns must be a positive integer');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      this.#initData(nRows.rows, nRows.columns);\n      Matrix.copy(nRows, this);\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      this.#initData(nRows, nColumns);\n    } else if (isAnyArray.isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n\n      this.rows = nRows;\n      this.columns = nColumns;\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n\n/**\n * @typedef {0 | 1 | number | boolean} Mask\n */\n\nclass SymmetricMatrix extends AbstractMatrix {\n  /** @type {Matrix} */\n  #matrix;\n\n  get size() {\n    return this.#matrix.size;\n  }\n\n  get rows() {\n    return this.#matrix.rows;\n  }\n\n  get columns() {\n    return this.#matrix.columns;\n  }\n\n  get diagonalSize() {\n    return this.rows;\n  }\n\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isSymmetricMatrix(value) {\n    return Matrix.isMatrix(value) && value.klassType === 'SymmetricMatrix';\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static zeros(diagonalSize) {\n    return new this(diagonalSize);\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static ones(diagonalSize) {\n    return new this(diagonalSize).fill(1);\n  }\n\n  /**\n   * @param {number | AbstractMatrix | ArrayLike<ArrayLike<number>>} diagonalSize\n   * @return {this}\n   */\n  constructor(diagonalSize) {\n    super();\n\n    if (Matrix.isMatrix(diagonalSize)) {\n      if (!diagonalSize.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n\n      this.#matrix = Matrix.copy(\n        diagonalSize,\n        new Matrix(diagonalSize.rows, diagonalSize.rows),\n      );\n    } else if (Number.isInteger(diagonalSize) && diagonalSize >= 0) {\n      this.#matrix = new Matrix(diagonalSize, diagonalSize);\n    } else {\n      this.#matrix = new Matrix(diagonalSize);\n\n      if (!this.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n    }\n  }\n\n  clone() {\n    const matrix = new SymmetricMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  toMatrix() {\n    return new Matrix(this);\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.#matrix.get(rowIndex, columnIndex);\n  }\n  set(rowIndex, columnIndex, value) {\n    // symmetric set\n    this.#matrix.set(rowIndex, columnIndex, value);\n    this.#matrix.set(columnIndex, rowIndex, value);\n\n    return this;\n  }\n\n  removeCross(index) {\n    // symmetric remove side\n    this.#matrix.removeRow(index);\n    this.#matrix.removeColumn(index);\n\n    return this;\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    const row = array.slice();\n    row.splice(index, 1);\n\n    this.#matrix.addRow(index, row);\n    this.#matrix.addColumn(index, array);\n\n    return this;\n  }\n\n  /**\n   * @param {Mask[]} mask\n   */\n  applyMask(mask) {\n    if (mask.length !== this.diagonalSize) {\n      throw new RangeError('Mask size do not match with matrix size');\n    }\n\n    // prepare sides to remove from matrix from mask\n    /** @type {number[]} */\n    const sidesToRemove = [];\n    for (const [index, passthroughs] of mask.entries()) {\n      if (passthroughs) continue;\n      sidesToRemove.push(index);\n    }\n    // to remove from highest to lowest for no mutation shifting\n    sidesToRemove.reverse();\n\n    // remove sides\n    for (const sideIndex of sidesToRemove) {\n      this.removeCross(sideIndex);\n    }\n\n    return this;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * iterate from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 1 2 3 4\n   * B 2 5 6 7\n   * C 3 6 8 9\n   * D 4 7 9 10\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`\n   *\n   * length is S(i=0, n=sideSize) => 10 for a 4 sideSized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n\n    /** @type {number[]} */\n    const compact = new Array((diagonalSize * (diagonalSize + 1)) / 2);\n    for (let col = 0, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   * @return {SymmetricMatrix}\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n    // compactSize = (sideSize * (sideSize + 1)) / 2\n    // https://mathsolver.microsoft.com/fr/solve-problem/y%20%3D%20%20x%20%60cdot%20%20%20%60frac%7B%20%20%60left(%20x%2B1%20%20%60right)%20%20%20%20%7D%7B%202%20%20%7D\n    // sideSize = (Sqrt(8 × compactSize + 1) - 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) - 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a Symmetric Matrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new SymmetricMatrix(diagonalSize);\n    for (let col = 0, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return matrix;\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield [row, column, value]\n   *\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *upperRightEntries() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield [row, col, value];\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield value\n   *\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *upperRightValues() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield value;\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n}\nSymmetricMatrix.prototype.klassType = 'SymmetricMatrix';\n\nclass DistanceMatrix extends SymmetricMatrix {\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isDistanceMatrix(value) {\n    return (\n      SymmetricMatrix.isSymmetricMatrix(value) &&\n      value.klassSubType === 'DistanceMatrix'\n    );\n  }\n\n  constructor(sideSize) {\n    super(sideSize);\n\n    if (!this.isDistance()) {\n      throw new TypeError('Provided arguments do no produce a distance matrix');\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    // distance matrix diagonal is 0\n    if (rowIndex === columnIndex) value = 0;\n\n    return super.set(rowIndex, columnIndex, value);\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    // ensure distance\n    array = array.slice();\n    array[index] = 0;\n\n    return super.addCross(index, array);\n  }\n\n  toSymmetricMatrix() {\n    return new SymmetricMatrix(this);\n  }\n\n  clone() {\n    const matrix = new DistanceMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      if (row === col) continue;\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * no diagonal (only zeros)\n   * iterable from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 0 1 2 3\n   * B 1 0 4 5\n   * C 2 4 0 6\n   * D 3 5 6 0\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6]`\n   *\n   * length is S(i=0, n=sideSize-1) => 6 for a 4 side sized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n    const compactLength = ((diagonalSize - 1) * diagonalSize) / 2;\n\n    /** @type {number[]} */\n    const compact = new Array(compactLength);\n    for (let col = 1, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n\n    if (compactSize === 0) {\n      return new this(0);\n    }\n\n    // compactSize in Natural integer range ]0;∞]\n    // compactSize = (sideSize * (sideSize - 1)) / 2\n    // sideSize = (Sqrt(8 × compactSize + 1) + 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) + 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a DistanceMatrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new this(diagonalSize);\n    for (let col = 1, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return matrix;\n  }\n}\nDistanceMatrix.prototype.klassSubType = 'DistanceMatrix';\n\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n\nfunction wrap(array, options) {\n  if (isAnyArray.isAnyArray(array)) {\n    if (array[0] && isAnyArray.isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nfunction linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      do {\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          // eslint-disable-next-line no-multi-assign\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &&= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = positiveDefinite;\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.DistanceMatrix = DistanceMatrix;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.SymmetricMatrix = SymmetricMatrix;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports.default = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5436, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-matrix/matrix.mjs"],"sourcesContent":["import * as matrix from './matrix.js';\n\nexport const AbstractMatrix = matrix.AbstractMatrix;\nexport const CHO = matrix.CHO;\nexport const CholeskyDecomposition = matrix.CholeskyDecomposition;\nexport const DistanceMatrix = matrix.DistanceMatrix;\nexport const EVD = matrix.EVD;\nexport const EigenvalueDecomposition = matrix.EigenvalueDecomposition;\nexport const LU = matrix.LU;\nexport const LuDecomposition = matrix.LuDecomposition;\nexport const Matrix = matrix.Matrix;\nexport const MatrixColumnSelectionView = matrix.MatrixColumnSelectionView;\nexport const MatrixColumnView = matrix.MatrixColumnView;\nexport const MatrixFlipColumnView = matrix.MatrixFlipColumnView;\nexport const MatrixFlipRowView = matrix.MatrixFlipRowView;\nexport const MatrixRowSelectionView = matrix.MatrixRowSelectionView;\nexport const MatrixRowView = matrix.MatrixRowView;\nexport const MatrixSelectionView = matrix.MatrixSelectionView;\nexport const MatrixSubView = matrix.MatrixSubView;\nexport const MatrixTransposeView = matrix.MatrixTransposeView;\nexport const NIPALS = matrix.NIPALS;\nexport const Nipals = matrix.Nipals;\nexport const QR = matrix.QR;\nexport const QrDecomposition = matrix.QrDecomposition;\nexport const SVD = matrix.SVD;\nexport const SingularValueDecomposition = matrix.SingularValueDecomposition;\nexport const SymmetricMatrix = matrix.SymmetricMatrix;\nexport const WrapperMatrix1D = matrix.WrapperMatrix1D;\nexport const WrapperMatrix2D = matrix.WrapperMatrix2D;\nexport const correlation = matrix.correlation;\nexport const covariance = matrix.covariance;\nexport default matrix.default.Matrix ? matrix.default.Matrix : matrix.Matrix;\nexport const determinant = matrix.determinant;\nexport const inverse = matrix.inverse;\nexport const linearDependencies = matrix.linearDependencies;\nexport const pseudoInverse = matrix.pseudoInverse;\nexport const solve = matrix.solve;\nexport const wrap = matrix.wrap;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEO,MAAM,iBAAiB,sIAAA,CAAA,iBAAqB;AAC5C,MAAM,MAAM,sIAAA,CAAA,MAAU;AACtB,MAAM,wBAAwB,sIAAA,CAAA,wBAA4B;AAC1D,MAAM,iBAAiB,sIAAA,CAAA,iBAAqB;AAC5C,MAAM,MAAM,sIAAA,CAAA,MAAU;AACtB,MAAM,0BAA0B,sIAAA,CAAA,0BAA8B;AAC9D,MAAM,KAAK,sIAAA,CAAA,KAAS;AACpB,MAAM,kBAAkB,sIAAA,CAAA,kBAAsB;AAC9C,MAAM,SAAS,sIAAA,CAAA,SAAa;AAC5B,MAAM,4BAA4B,sIAAA,CAAA,4BAAgC;AAClE,MAAM,mBAAmB,sIAAA,CAAA,mBAAuB;AAChD,MAAM,uBAAuB,sIAAA,CAAA,uBAA2B;AACxD,MAAM,oBAAoB,sIAAA,CAAA,oBAAwB;AAClD,MAAM,yBAAyB,sIAAA,CAAA,yBAA6B;AAC5D,MAAM,gBAAgB,sIAAA,CAAA,gBAAoB;AAC1C,MAAM,sBAAsB,sIAAA,CAAA,sBAA0B;AACtD,MAAM,gBAAgB,sIAAA,CAAA,gBAAoB;AAC1C,MAAM,sBAAsB,sIAAA,CAAA,sBAA0B;AACtD,MAAM,SAAS,sIAAA,CAAA,SAAa;AAC5B,MAAM,SAAS,sIAAA,CAAA,SAAa;AAC5B,MAAM,KAAK,sIAAA,CAAA,KAAS;AACpB,MAAM,kBAAkB,sIAAA,CAAA,kBAAsB;AAC9C,MAAM,MAAM,sIAAA,CAAA,MAAU;AACtB,MAAM,6BAA6B,sIAAA,CAAA,6BAAiC;AACpE,MAAM,kBAAkB,sIAAA,CAAA,kBAAsB;AAC9C,MAAM,kBAAkB,sIAAA,CAAA,kBAAsB;AAC9C,MAAM,kBAAkB,sIAAA,CAAA,kBAAsB;AAC9C,MAAM,cAAc,sIAAA,CAAA,cAAkB;AACtC,MAAM,aAAa,sIAAA,CAAA,aAAiB;uCAC5B,sIAAA,CAAA,UAAc,CAAC,MAAM,GAAG,sIAAA,CAAA,UAAc,CAAC,MAAM,GAAG,sIAAA,CAAA,SAAa;AACrE,MAAM,cAAc,sIAAA,CAAA,cAAkB;AACtC,MAAM,UAAU,sIAAA,CAAA,UAAc;AAC9B,MAAM,qBAAqB,sIAAA,CAAA,qBAAyB;AACpD,MAAM,gBAAgB,sIAAA,CAAA,gBAAoB;AAC1C,MAAM,QAAQ,sIAAA,CAAA,QAAY;AAC1B,MAAM,OAAO,sIAAA,CAAA,OAAW","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5518, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-logistic-regression/src/logreg_2classes.js"],"sourcesContent":["import Matrix from 'ml-matrix';\n\nexport default class LogisticRegressionTwoClasses {\n  constructor(options = {}) {\n    const { numSteps = 50000, learningRate = 5e-4, weights = null } = options;\n    this.numSteps = numSteps;\n    this.learningRate = learningRate;\n    this.weights = weights ? Matrix.checkMatrix(weights) : null;\n  }\n\n  train(features, target) {\n    let weights = Matrix.zeros(1, features.columns);\n\n    for (let step = 0; step < this.numSteps; step++) {\n      const scores = features.mmul(weights.transpose());\n      const predictions = sigmoid(scores);\n\n      // Update weights with gradient\n      const outputErrorSignal = Matrix.columnVector(predictions)\n        .neg()\n        .add(target);\n      const gradient = features.transpose().mmul(outputErrorSignal);\n      weights = weights.add(gradient.mul(this.learningRate).transpose());\n    }\n\n    this.weights = weights;\n  }\n\n  testScores(features) {\n    const finalData = features.mmul(this.weights.transpose());\n    return sigmoid(finalData);\n  }\n\n  predict(features) {\n    const finalData = features.mmul(this.weights.transpose());\n    return sigmoid(finalData).map(Math.round);\n  }\n\n  static load(model) {\n    return new LogisticRegressionTwoClasses(model);\n  }\n\n  toJSON() {\n    return {\n      numSteps: this.numSteps,\n      learningRate: this.learningRate,\n      weights: this.weights,\n    };\n  }\n}\n\nfunction sigmoid(scores) {\n  scores = scores.to1DArray();\n  let result = [];\n  for (let i = 0; i < scores.length; i++) {\n    result.push(1 / (1 + Math.exp(-scores[i])));\n  }\n  return result;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEe,MAAM;IACnB,YAAY,UAAU,CAAC,CAAC,CAAE;QACxB,MAAM,EAAE,WAAW,KAAK,EAAE,eAAe,IAAI,EAAE,UAAU,IAAI,EAAE,GAAG;QAClE,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,OAAO,GAAG,UAAU,uIAAA,CAAA,UAAM,CAAC,WAAW,CAAC,WAAW;IACzD;IAEA,MAAM,QAAQ,EAAE,MAAM,EAAE;QACtB,IAAI,UAAU,uIAAA,CAAA,UAAM,CAAC,KAAK,CAAC,GAAG,SAAS,OAAO;QAE9C,IAAK,IAAI,OAAO,GAAG,OAAO,IAAI,CAAC,QAAQ,EAAE,OAAQ;YAC/C,MAAM,SAAS,SAAS,IAAI,CAAC,QAAQ,SAAS;YAC9C,MAAM,cAAc,QAAQ;YAE5B,+BAA+B;YAC/B,MAAM,oBAAoB,uIAAA,CAAA,UAAM,CAAC,YAAY,CAAC,aAC3C,GAAG,GACH,GAAG,CAAC;YACP,MAAM,WAAW,SAAS,SAAS,GAAG,IAAI,CAAC;YAC3C,UAAU,QAAQ,GAAG,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS;QACjE;QAEA,IAAI,CAAC,OAAO,GAAG;IACjB;IAEA,WAAW,QAAQ,EAAE;QACnB,MAAM,YAAY,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;QACtD,OAAO,QAAQ;IACjB;IAEA,QAAQ,QAAQ,EAAE;QAChB,MAAM,YAAY,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;QACtD,OAAO,QAAQ,WAAW,GAAG,CAAC,KAAK,KAAK;IAC1C;IAEA,OAAO,KAAK,KAAK,EAAE;QACjB,OAAO,IAAI,6BAA6B;IAC1C;IAEA,SAAS;QACP,OAAO;YACL,UAAU,IAAI,CAAC,QAAQ;YACvB,cAAc,IAAI,CAAC,YAAY;YAC/B,SAAS,IAAI,CAAC,OAAO;QACvB;IACF;AACF;AAEA,SAAS,QAAQ,MAAM;IACrB,SAAS,OAAO,SAAS;IACzB,IAAI,SAAS,EAAE;IACf,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC;IAC3C;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5575, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-logistic-regression/src/logreg.js"],"sourcesContent":["import Matrix from 'ml-matrix';\n\nimport LogisticRegressionTwoClasses from './logreg_2classes.js';\n\nfunction transformClassesForOneVsAll(Y, oneClass) {\n  let y = Y.to1DArray();\n  for (let i = 0; i < y.length; i++) {\n    if (y[i] === oneClass) {\n      y[i] = 0;\n    } else {\n      y[i] = 1;\n    }\n  }\n  return Matrix.columnVector(y);\n}\n\nexport default class LogisticRegression {\n  constructor(options = {}) {\n    const {\n      numSteps = 50000,\n      learningRate = 5e-4,\n      classifiers = [],\n      numberClasses = 0,\n    } = options;\n    this.numSteps = numSteps;\n    this.learningRate = learningRate;\n    this.classifiers = classifiers;\n    this.numberClasses = numberClasses;\n  }\n\n  train(X, Y) {\n    this.numberClasses = new Set(Y.to1DArray()).size;\n    this.classifiers = new Array(this.numberClasses);\n\n    // train the classifiers\n    for (let i = 0; i < this.numberClasses; i++) {\n      this.classifiers[i] = new LogisticRegressionTwoClasses({\n        numSteps: this.numSteps,\n        learningRate: this.learningRate,\n      });\n      let y = Y.clone();\n      y = transformClassesForOneVsAll(y, i);\n      this.classifiers[i].train(X, y);\n    }\n  }\n\n  predict(Xtest) {\n    let resultsOneClass = new Array(this.numberClasses).fill(0);\n    let i;\n    for (i = 0; i < this.numberClasses; i++) {\n      resultsOneClass[i] = this.classifiers[i].testScores(Xtest);\n    }\n    let finalResults = new Array(Xtest.rows).fill(0);\n    for (i = 0; i < Xtest.rows; i++) {\n      let minimum = 100000;\n      for (let j = 0; j < this.numberClasses; j++) {\n        if (resultsOneClass[j][i] < minimum) {\n          minimum = resultsOneClass[j][i];\n          finalResults[i] = j;\n        }\n      }\n    }\n    return finalResults;\n  }\n\n  static load(model) {\n    if (model.name !== 'LogisticRegression') {\n      throw new Error(`invalid model: ${model.name}`);\n    }\n    const newClassifier = new LogisticRegression(model);\n    for (let i = 0; i < newClassifier.numberClasses; i++) {\n      newClassifier.classifiers[i] = LogisticRegressionTwoClasses.load(\n        model.classifiers[i],\n      );\n    }\n    return newClassifier;\n  }\n\n  toJSON() {\n    return {\n      name: 'LogisticRegression',\n      numSteps: this.numSteps,\n      learningRate: this.learningRate,\n      numberClasses: this.numberClasses,\n      classifiers: this.classifiers,\n    };\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,SAAS,4BAA4B,CAAC,EAAE,QAAQ;IAC9C,IAAI,IAAI,EAAE,SAAS;IACnB,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QACjC,IAAI,CAAC,CAAC,EAAE,KAAK,UAAU;YACrB,CAAC,CAAC,EAAE,GAAG;QACT,OAAO;YACL,CAAC,CAAC,EAAE,GAAG;QACT;IACF;IACA,OAAO,uIAAA,CAAA,UAAM,CAAC,YAAY,CAAC;AAC7B;AAEe,MAAM;IACnB,YAAY,UAAU,CAAC,CAAC,CAAE;QACxB,MAAM,EACJ,WAAW,KAAK,EAChB,eAAe,IAAI,EACnB,cAAc,EAAE,EAChB,gBAAgB,CAAC,EAClB,GAAG;QACJ,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,aAAa,GAAG;IACvB;IAEA,MAAM,CAAC,EAAE,CAAC,EAAE;QACV,IAAI,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,SAAS,IAAI,IAAI;QAChD,IAAI,CAAC,WAAW,GAAG,IAAI,MAAM,IAAI,CAAC,aAAa;QAE/C,wBAAwB;QACxB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,IAAK;YAC3C,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,IAAI,sKAAA,CAAA,UAA4B,CAAC;gBACrD,UAAU,IAAI,CAAC,QAAQ;gBACvB,cAAc,IAAI,CAAC,YAAY;YACjC;YACA,IAAI,IAAI,EAAE,KAAK;YACf,IAAI,4BAA4B,GAAG;YACnC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG;QAC/B;IACF;IAEA,QAAQ,KAAK,EAAE;QACb,IAAI,kBAAkB,IAAI,MAAM,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC;QACzD,IAAI;QACJ,IAAK,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,IAAK;YACvC,eAAe,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,CAAC;QACtD;QACA,IAAI,eAAe,IAAI,MAAM,MAAM,IAAI,EAAE,IAAI,CAAC;QAC9C,IAAK,IAAI,GAAG,IAAI,MAAM,IAAI,EAAE,IAAK;YAC/B,IAAI,UAAU;YACd,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,IAAK;gBAC3C,IAAI,eAAe,CAAC,EAAE,CAAC,EAAE,GAAG,SAAS;oBACnC,UAAU,eAAe,CAAC,EAAE,CAAC,EAAE;oBAC/B,YAAY,CAAC,EAAE,GAAG;gBACpB;YACF;QACF;QACA,OAAO;IACT;IAEA,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,sBAAsB;YACvC,MAAM,IAAI,MAAM,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;QAChD;QACA,MAAM,gBAAgB,IAAI,mBAAmB;QAC7C,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,aAAa,EAAE,IAAK;YACpD,cAAc,WAAW,CAAC,EAAE,GAAG,sKAAA,CAAA,UAA4B,CAAC,IAAI,CAC9D,MAAM,WAAW,CAAC,EAAE;QAExB;QACA,OAAO;IACT;IAEA,SAAS;QACP,OAAO;YACL,MAAM;YACN,UAAU,IAAI,CAAC,QAAQ;YACvB,cAAc,IAAI,CAAC,YAAY;YAC/B,eAAe,IAAI,CAAC,aAAa;YACjC,aAAa,IAAI,CAAC,WAAW;QAC/B;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5659, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-sum/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction sum(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += input[i];\n  }\n\n  return sumValue;\n}\n\nexport { sum as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,IAAI,KAAK;IAChB,IAAI,CAAC,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,WAAW;IAEf,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,YAAY,KAAK,CAAC,EAAE;IACtB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5684, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-mean/lib-es6/index.js"],"sourcesContent":["import sum from 'ml-array-sum';\n\nfunction mean(input) {\n  return sum(input) / input.length;\n}\n\nexport { mean as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,KAAK,KAAK;IACjB,OAAO,CAAA,GAAA,yJAAA,CAAA,UAAG,AAAD,EAAE,SAAS,MAAM,MAAM;AAClC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5699, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-cart/src/utils.js"],"sourcesContent":["import meanArray from 'ml-array-mean';\nimport { Matrix } from 'ml-matrix';\n\n/**\n * @private\n * return an array of probabilities of each class\n * @param {Array} array - contains the classes\n * @param {number} numberOfClasses\n * @return {Matrix} - rowVector of probabilities.\n */\nexport function toDiscreteDistribution(array, numberOfClasses) {\n  let counts = new Array(numberOfClasses).fill(0);\n  for (let i = 0; i < array.length; ++i) {\n    counts[array[i]] += 1 / array.length;\n  }\n\n  return Matrix.rowVector(counts);\n}\n\n/**\n * @private\n * Retrieves the impurity of array of predictions\n * @param {Array} array - predictions.\n * @return {number} Gini impurity\n */\nexport function giniImpurity(array) {\n  if (array.length === 0) {\n    return 0;\n  }\n\n  let probabilities = toDiscreteDistribution(\n    array,\n    getNumberOfClasses(array),\n  ).getRow(0);\n\n  let sum = 0.0;\n  for (let i = 0; i < probabilities.length; ++i) {\n    sum += probabilities[i] * probabilities[i];\n  }\n\n  return 1 - sum;\n}\n\n/**\n * @private\n * Return the number of classes given the array of predictions.\n * @param {Array} array - predictions.\n * @return {number} Number of classes.\n */\nexport function getNumberOfClasses(array) {\n  return array\n    .filter((val, i, arr) => {\n      return arr.indexOf(val) === i;\n    })\n    .map((val) => val + 1)\n    .reduce((a, b) => Math.max(a, b));\n}\n\n/**\n * @private\n * Calculates the Gini Gain of an array of predictions and those predictions splitted by a feature.\n * @param {Array} array - Predictions\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - Gini Gain.\n */\n\nexport function giniGain(array, splitted) {\n  let splitsImpurity = 0.0;\n  let splits = ['greater', 'lesser'];\n\n  for (let i = 0; i < splits.length; ++i) {\n    let currentSplit = splitted[splits[i]];\n    splitsImpurity +=\n      (giniImpurity(currentSplit) * currentSplit.length) / array.length;\n  }\n\n  return giniImpurity(array) - splitsImpurity;\n}\n\n/**\n * @private\n * Calculates the squared error of a predictions values.\n * @param {Array} array - predictions values\n * @return {number} squared error.\n */\nexport function squaredError(array) {\n  let l = array.length;\n  if (l === 0) {\n    return 0.0;\n  }\n\n  let m = meanArray(array);\n  let error = 0.0;\n\n  for (let i = 0; i < l; ++i) {\n    let currentElement = array[i];\n    error += (currentElement - m) * (currentElement - m);\n  }\n\n  return error;\n}\n\n/**\n * @private\n * Calculates the sum of squared error of the two arrays that contains the splitted values.\n * @param {Array} array - this argument is no necessary but is used to fit with the main interface.\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - sum of squared errors.\n */\nexport function regressionError(array, splitted) {\n  let error = 0.0;\n  let splits = ['greater', 'lesser'];\n\n  for (let i = 0; i < splits.length; ++i) {\n    let currentSplit = splitted[splits[i]];\n    error += squaredError(currentSplit);\n  }\n  return error;\n}\n\n/**\n * @private\n * Split the training set and values from a given column of the training set if is less than a value\n * @param {Matrix} X - Training set.\n * @param {Array} y - Training values.\n * @param {number} column - Column to split.\n * @param {number} value - value to split the Training set and values.\n * @return {object} - Object that contains the splitted values.\n */\nexport function matrixSplitter(X, y, column, value) {\n  let lesserX = [];\n  let greaterX = [];\n  let lesserY = [];\n  let greaterY = [];\n\n  for (let i = 0; i < X.rows; ++i) {\n    if (X.get(i, column) < value) {\n      lesserX.push(X.getRow(i));\n      lesserY.push(y[i]);\n    } else {\n      greaterX.push(X.getRow(i));\n      greaterY.push(y[i]);\n    }\n  }\n\n  return {\n    greaterX: greaterX,\n    greaterY: greaterY,\n    lesserX: lesserX,\n    lesserY: lesserY,\n  };\n}\n\n/**\n * @private\n * Calculates the mean between two values\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nexport function mean(a, b) {\n  return (a + b) / 2;\n}\n\n/**\n * @private\n * Returns a list of tuples that contains the i-th element of each array.\n * @param {Array} a\n * @param {Array} b\n * @return {Array} list of tuples.\n */\nexport function zip(a, b) {\n  if (a.length !== b.length) {\n    throw new TypeError(\n      `Error on zip: the size of a: ${a.length} is different from b: ${b.length}`,\n    );\n  }\n\n  let ret = new Array(a.length);\n  for (let i = 0; i < a.length; ++i) {\n    ret[i] = [a[i], b[i]];\n  }\n\n  return ret;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5817, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-cart/src/TreeNode.js"],"sourcesContent":["import mean from 'ml-array-mean';\nimport { Matrix } from 'ml-matrix';\n\nimport * as Utils from './utils';\n\nconst gainFunctions = {\n  gini: Utils.giniGain,\n  regression: Utils.regressionError,\n};\n\nconst splitFunctions = {\n  mean: Utils.mean,\n};\n\nexport default class TreeNode {\n  /**\n   * @private\n   * Constructor for a tree node given the options received on the main classes (DecisionTreeClassifier, DecisionTreeRegression)\n   * @param {object|TreeNode} options for loading\n   * @constructor\n   */\n  constructor(options) {\n    // options parameters\n    this.kind = options.kind;\n    this.gainFunction = options.gainFunction;\n    this.splitFunction = options.splitFunction;\n    this.minNumSamples = options.minNumSamples;\n    this.maxDepth = options.maxDepth;\n  this.gainThreshold = options.gainThreshold || 0;\n  }\n\n  /**\n   * @private\n   * Function that retrieve the best feature to make the split.\n   * @param {Matrix} XTranspose - Training set transposed\n   * @param {Array} y - labels or values (depending of the decision tree)\n   * @return {object} - return tree values, the best gain, column and the split value.\n   */\n  bestSplit(XTranspose, y) {\n    // Depending in the node tree class, we set the variables to check information gain (to classify)\n    // or error (for regression)\n\n    let bestGain = this.kind === 'classifier' ? -Infinity : Infinity;\n    let check = this.kind === 'classifier' ? (a, b) => a > b : (a, b) => a < b;\n\n    let maxColumn;\n    let maxValue;\n    let numberSamples;\n\n    for (let i = 0; i < XTranspose.rows; ++i) {\n      let currentFeature = XTranspose.getRow(i);\n      let splitValues = this.featureSplit(currentFeature, y);\n      for (let j = 0; j < splitValues.length; ++j) {\n        let currentSplitVal = splitValues[j];\n        let splitted = this.split(currentFeature, y, currentSplitVal);\n\n        let gain = gainFunctions[this.gainFunction](y, splitted);\n        if (check(gain, bestGain)) {\n          maxColumn = i;\n          maxValue = currentSplitVal;\n          bestGain = gain;\n          numberSamples = currentFeature.length;\n        }\n      }\n    }\n\n    return {\n      maxGain: bestGain,\n      maxColumn: maxColumn,\n      maxValue: maxValue,\n      numberSamples: numberSamples,\n    };\n  }\n\n  /**\n   * @private\n   * Makes the split of the training labels or values from the training set feature given a split value.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @param {number} splitValue\n   * @return {object}\n   */\n  split(x, y, splitValue) {\n    let lesser = [];\n    let greater = [];\n\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] < splitValue) {\n        lesser.push(y[i]);\n      } else {\n        greater.push(y[i]);\n      }\n    }\n\n    return {\n      greater: greater,\n      lesser: lesser,\n    };\n  }\n\n  /**\n   * @private\n   * Calculates the possible points to split over the tree given a training set feature and corresponding labels or values.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @return {Array} possible split values.\n   */\n  featureSplit(x, y) {\n    let splitValues = [];\n    let arr = Utils.zip(x, y);\n    arr.sort((a, b) => {\n      return a[0] - b[0];\n    });\n\n    for (let i = 1; i < arr.length; ++i) {\n      if (arr[i - 1][1] !== arr[i][1]) {\n        splitValues.push(\n          splitFunctions[this.splitFunction](arr[i - 1][0], arr[i][0]),\n        );\n      }\n    }\n\n    return splitValues;\n  }\n\n  /**\n   * @private\n   * Calculate the predictions of a leaf tree node given the training labels or values\n   * @param {Array} y\n   */\n  calculatePrediction(y) {\n    if (this.kind === 'classifier') {\n      this.distribution = Utils.toDiscreteDistribution(\n        y,\n        Utils.getNumberOfClasses(y),\n      );\n      if (this.distribution.columns === 0) {\n        throw new TypeError('Error on calculate the prediction');\n      }\n    } else {\n      this.distribution = mean(y);\n    }\n  }\n\n  /**\n   * @private\n   * Train a node given the training set and labels, because it trains recursively, it also receive\n   * the current depth of the node, parent gain to avoid infinite recursion and boolean value to check if\n   * the training set is transposed.\n   * @param {Matrix} X - Training set (could be transposed or not given transposed).\n   * @param {Array} y - Training labels or values.\n   * @param {number} currentDepth - Current depth of the node.\n   * @param {number} parentGain - parent node gain or error.\n   */\n  train(X, y, currentDepth, parentGain) {\n    if (X.rows <= this.minNumSamples) {\n      this.calculatePrediction(y);\n      return;\n    }\n    if (parentGain === undefined) parentGain = 0.0;\n\n    let XTranspose = X.transpose();\n    let split = this.bestSplit(XTranspose, y);\n\n    this.splitValue = split.maxValue;\n    this.splitColumn = split.maxColumn;\n    this.gain = split.maxGain;\n    this.numberSamples = split.numberSamples;\n\n    let splittedMatrix = Utils.matrixSplitter(\n      X,\n      y,\n      this.splitColumn,\n      this.splitValue,\n    );\n\n    if (\n      currentDepth < this.maxDepth &&\n      this.gain > this.gainThreshold &&\n      this.gain !== parentGain &&\n      splittedMatrix.lesserX.length > 0 &&\n      splittedMatrix.greaterX.length > 0\n    ) {\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      let lesserX = new Matrix(splittedMatrix.lesserX);\n      let greaterX = new Matrix(splittedMatrix.greaterX);\n\n      this.left.train(\n        lesserX,\n        splittedMatrix.lesserY,\n        currentDepth + 1,\n        this.gain,\n      );\n      this.right.train(\n        greaterX,\n        splittedMatrix.greaterY,\n        currentDepth + 1,\n        this.gain,\n      );\n    } else {\n      this.calculatePrediction(y);\n    }\n  }\n\n  /**\n   * @private\n   * Calculates the prediction of a given element.\n   * @param {Array} row\n   * @return {number|Array} prediction\n   *          * if a node is a classifier returns an array of probabilities of each class.\n   *          * if a node is for regression returns a number with the prediction.\n   */\n  classify(row) {\n    if (this.right && this.left) {\n      if (row[this.splitColumn] < this.splitValue) {\n        return this.left.classify(row);\n      } else {\n        return this.right.classify(row);\n      }\n    }\n\n    return this.distribution;\n  }\n\n  /**\n   * @private\n   * Set the parameter of the current node and their children.\n   * @param {object} node - parameters of the current node and the children.\n   */\n  setNodeParameters(node) {\n    if (node.distribution !== undefined) {\n      this.distribution =\n        node.distribution.constructor === Array\n          ? new Matrix(node.distribution)\n          : node.distribution;\n    } else {\n      this.distribution = undefined;\n      this.splitValue = node.splitValue;\n      this.splitColumn = node.splitColumn;\n      this.gain = node.gain;\n\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      if (node.left !== {}) {\n        this.left.setNodeParameters(node.left);\n      }\n      if (node.right !== {}) {\n        this.right.setNodeParameters(node.right);\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6018, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-cart/src/DecisionTreeClassifier.js"],"sourcesContent":["import { Matrix } from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'gini',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity,\n  gainThreshold: 0.01,\n};\n\nexport class DecisionTreeClassifier {\n  /**\n   * Create new Decision Tree Classifier with CART implementation with the given options\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"gini\"] - gain function to get the best split, \"gini\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   * @constructor\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'classifier';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    this.root = new Tree(this.options);\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    this.root.train(trainingSet, trainingLabels, 0, null);\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    toPredict = Matrix.checkMatrix(toPredict);\n    let predictions = new Array(toPredict.rows);\n\n    for (let i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root\n        .classify(toPredict.getRow(i))\n        .maxRowIndex(0)[1];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTClassifier',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {DecisionTreeClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'DTClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new DecisionTreeClassifier(true, model);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,iBAAiB;IACrB,cAAc;IACd,eAAe;IACf,eAAe;IACf,UAAU;IACV,eAAe;AACjB;AAEO,MAAM;IACX;;;;;;;;;GASC,GACD,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,IAAI,YAAY,MAAM;YACpB,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;YAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,6IAAA,CAAA,UAAI,CAAC,MAAM,OAAO;YAClC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI;QACxC,OAAO;YACL,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB;YACjD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG;QACtB;IACF;IAEA;;;;GAIC,GACD,MAAM,WAAW,EAAE,cAAc,EAAE;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,6IAAA,CAAA,UAAI,CAAC,IAAI,CAAC,OAAO;QACjC,cAAc,uIAAA,CAAA,SAAM,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,gBAAgB,GAAG;IAClD;IAEA;;;;GAIC,GACD,QAAQ,SAAS,EAAE;QACjB,YAAY,uIAAA,CAAA,SAAM,CAAC,WAAW,CAAC;QAC/B,IAAI,cAAc,IAAI,MAAM,UAAU,IAAI;QAE1C,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAI,EAAE,EAAE,EAAG;YACvC,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CACvB,QAAQ,CAAC,UAAU,MAAM,CAAC,IAC1B,WAAW,CAAC,EAAE,CAAC,EAAE;QACtB;QAEA,OAAO;IACT;IAEA;;;GAGC,GACD,SAAS;QACP,OAAO;YACL,SAAS,IAAI,CAAC,OAAO;YACrB,MAAM,IAAI,CAAC,IAAI;YACf,MAAM;QACR;IACF;IAEA;;;;GAIC,GACD,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,MAAM,IAAI,WAAW,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;QACrD;QAEA,OAAO,IAAI,uBAAuB,MAAM;IAC1C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6100, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-cart/src/DecisionTreeRegression.js"],"sourcesContent":["import { Matrix } from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'regression',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity,\n};\n\nexport class DecisionTreeRegression {\n  /**\n   * Create new Decision Tree Regression with CART implementation with the given options.\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"regression\"] - gain function to get the best split, \"regression\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'regression';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and values.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    this.root = new Tree(this.options);\n\n    if (\n      typeof trainingSet[0] !== 'undefined' &&\n      trainingSet[0].length === undefined\n    ) {\n      trainingSet = Matrix.columnVector(trainingSet);\n    } else {\n      trainingSet = Matrix.checkMatrix(trainingSet);\n    }\n    this.root.train(trainingSet, trainingValues, 0);\n  }\n\n  /**\n   * Predicts the values given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    if (\n      typeof toPredict[0] !== 'undefined' &&\n      toPredict[0].length === undefined\n    ) {\n      toPredict = Matrix.columnVector(toPredict);\n    }\n    toPredict = Matrix.checkMatrix(toPredict);\n\n    let predictions = new Array(toPredict.rows);\n    for (let i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root.classify(toPredict.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTRegression',\n    };\n  }\n\n  /**\n   * Load a Decision tree regression with the given model.\n   * @param {object} model\n   * @return {DecisionTreeRegression}\n   */\n  static load(model) {\n    if (model.name !== 'DTRegression') {\n      throw new RangeError(`Invalid model:${model.name}`);\n    }\n\n    return new DecisionTreeRegression(true, model);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,iBAAiB;IACrB,cAAc;IACd,eAAe;IACf,eAAe;IACf,UAAU;AACZ;AAEO,MAAM;IACX;;;;;;;;GAQC,GACD,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,IAAI,YAAY,MAAM;YACpB,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;YAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,6IAAA,CAAA,UAAI,CAAC,MAAM,OAAO;YAClC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI;QACxC,OAAO;YACL,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB;YACjD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG;QACtB;IACF;IAEA;;;;GAIC,GACD,MAAM,WAAW,EAAE,cAAc,EAAE;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,6IAAA,CAAA,UAAI,CAAC,IAAI,CAAC,OAAO;QAEjC,IACE,OAAO,WAAW,CAAC,EAAE,KAAK,eAC1B,WAAW,CAAC,EAAE,CAAC,MAAM,KAAK,WAC1B;YACA,cAAc,uIAAA,CAAA,SAAM,CAAC,YAAY,CAAC;QACpC,OAAO;YACL,cAAc,uIAAA,CAAA,SAAM,CAAC,WAAW,CAAC;QACnC;QACA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,gBAAgB;IAC/C;IAEA;;;;GAIC,GACD,QAAQ,SAAS,EAAE;QACjB,IACE,OAAO,SAAS,CAAC,EAAE,KAAK,eACxB,SAAS,CAAC,EAAE,CAAC,MAAM,KAAK,WACxB;YACA,YAAY,uIAAA,CAAA,SAAM,CAAC,YAAY,CAAC;QAClC;QACA,YAAY,uIAAA,CAAA,SAAM,CAAC,WAAW,CAAC;QAE/B,IAAI,cAAc,IAAI,MAAM,UAAU,IAAI;QAC1C,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAI,EAAE,EAAE,EAAG;YACvC,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,MAAM,CAAC;QACvD;QAEA,OAAO;IACT;IAEA;;;GAGC,GACD,SAAS;QACP,OAAO;YACL,SAAS,IAAI,CAAC,OAAO;YACrB,MAAM,IAAI,CAAC,IAAI;YACf,MAAM;QACR;IACF;IAEA;;;;GAIC,GACD,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,MAAM,IAAI,WAAW,CAAC,cAAc,EAAE,MAAM,IAAI,EAAE;QACpD;QAEA,OAAO,IAAI,uBAAuB,MAAM;IAC1C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6206, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-mode/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction mode(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = 0;\n  var maxCount = 0;\n  var count = 0;\n  var counts = {};\n\n  for (var i = 0; i < input.length; ++i) {\n    var element = input[i];\n    count = counts[element];\n\n    if (count) {\n      counts[element]++;\n      count++;\n    } else {\n      counts[element] = count = 1;\n    }\n\n    if (count > maxCount) {\n      maxCount = count;\n      maxValue = input[i];\n    }\n  }\n\n  return maxValue;\n}\n\nexport { mode as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,KAAK,KAAK;IACjB,IAAI,CAAC,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,WAAW;IACf,IAAI,WAAW;IACf,IAAI,QAAQ;IACZ,IAAI,SAAS,CAAC;IAEd,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,EAAE,EAAG;QACrC,IAAI,UAAU,KAAK,CAAC,EAAE;QACtB,QAAQ,MAAM,CAAC,QAAQ;QAEvB,IAAI,OAAO;YACT,MAAM,CAAC,QAAQ;YACf;QACF,OAAO;YACL,MAAM,CAAC,QAAQ,GAAG,QAAQ;QAC5B;QAEA,IAAI,QAAQ,UAAU;YACpB,WAAW;YACX,WAAW,KAAK,CAAC,EAAE;QACrB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6245, "column": 0}, "map": {"version":3,"file":"random-js.esm.js","sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/constants.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/int32.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/add.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/int53.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/int53Full.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/uint32.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/uint53.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/uint53Full.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/integer.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/bool.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/date.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/die.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/dice.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/string.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/hex.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/convertSliceArgument.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/toInteger.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/pick.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/multiply.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/realZeroToOneExclusive.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/realZeroToOneInclusive.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/real.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/sliceArray.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/shuffle.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/sample.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/stringRepeat.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/uuid4.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/engine/nativeMath.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/Random.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/Int32Array.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/engine/browserCrypto.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/createEntropy.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/imul.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/engine/MersenneTwister19937.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/engine/nodeCrypto.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/picker.ts"],"sourcesContent":["export const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\nexport const LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\nexport const UINT32_MAX = -1 >>> 0;\nexport const UINT32_SIZE = UINT32_MAX + 1;\nexport const INT32_SIZE = UINT32_SIZE / 2;\nexport const INT32_MAX = INT32_SIZE - 1;\nexport const UINT21_SIZE = 1 << 21;\nexport const UINT21_MAX = UINT21_SIZE - 1;\n","import { Engine } from \"../types\";\n\n/**\n * Returns a value within [-0x80000000, 0x7fffffff]\n */\nexport function int32(engine: Engine): number {\n  return engine.next() | 0;\n}\n","import { Distribution } from \"../types\";\n\nexport function add(distribution: Distribution, addend: number): Distribution {\n  if (addend === 0) {\n    return distribution;\n  } else {\n    return engine => distribution(engine) + addend;\n  }\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\n */\nexport function int53(engine: Engine): number {\n  const high = engine.next() | 0;\n  const low = engine.next() >>> 0;\n  return (\n    (high & UINT21_MAX) * UINT32_SIZE +\n    low +\n    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\n  );\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [-0x20000000000000, 0x20000000000000]\n */\nexport function int53Full(engine: Engine): number {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & 0x400000) {\n      if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (\n        (high & UINT21_MAX) * UINT32_SIZE +\n        low +\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\n      );\n    }\n  }\n}\n","import { Engine } from \"../types\";\n\n/**\n * Returns a value within [0, 0xffffffff]\n */\nexport function uint32(engine: Engine): number {\n  return engine.next() >>> 0;\n}\n","import { Engine } from \"../types\";\nimport { UINT21_MAX, UINT32_SIZE } from \"../utils/constants\";\n\n/**\n * Returns a value within [0, 0x1fffffffffffff]\n */\nexport function uint53(engine: Engine): number {\n  const high = engine.next() & UINT21_MAX;\n  const low = engine.next() >>> 0;\n  return high * UINT32_SIZE + low;\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [0, 0x20000000000000]\n */\nexport function uint53Full(engine: Engine): number {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & UINT21_SIZE) {\n      if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (high & UINT21_MAX) * UINT32_SIZE + low;\n    }\n  }\n}\n","import { Distribution, Engine } from \"../types\";\nimport { add } from \"../utils/add\";\nimport {\n  INT32_SIZE,\n  LARGEST_SAFE_INTEGER,\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_MAX,\n  UINT32_SIZE\n} from \"../utils/constants\";\nimport { int32 } from \"./int32\";\nimport { int53 } from \"./int53\";\nimport { int53Full } from \"./int53Full\";\nimport { uint32 } from \"./uint32\";\nimport { uint53 } from \"./uint53\";\nimport { uint53Full } from \"./uint53Full\";\n\nfunction isPowerOfTwoMinusOne(value: number): boolean {\n  return ((value + 1) & value) === 0;\n}\n\nfunction bitmask(masking: number): Distribution {\n  return (engine: Engine) => engine.next() & masking;\n}\n\nfunction downscaleToLoopCheckedRange(range: number): Distribution {\n  const extendedRange = range + 1;\n  const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\n  return engine => {\n    let value = 0;\n    do {\n      value = engine.next() >>> 0;\n    } while (value >= maximum);\n    return value % extendedRange;\n  };\n}\n\nfunction downscaleToRange(range: number): Distribution {\n  if (isPowerOfTwoMinusOne(range)) {\n    return bitmask(range);\n  } else {\n    return downscaleToLoopCheckedRange(range);\n  }\n}\n\nfunction isEvenlyDivisibleByMaxInt32(value: number): boolean {\n  return (value | 0) === 0;\n}\n\nfunction upscaleWithHighMasking(masking: number): Distribution {\n  return engine => {\n    const high = engine.next() & masking;\n    const low = engine.next() >>> 0;\n    return high * UINT32_SIZE + low;\n  };\n}\n\nfunction upscaleToLoopCheckedRange(extendedRange: number): Distribution {\n  const maximum =\n    extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() & UINT21_MAX;\n      const low = engine.next() >>> 0;\n      ret = high * UINT32_SIZE + low;\n    } while (ret >= maximum);\n    return ret % extendedRange;\n  };\n}\n\nfunction upscaleWithinU53(range: number): Distribution {\n  const extendedRange = range + 1;\n  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n    const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\n    if (isPowerOfTwoMinusOne(highRange)) {\n      return upscaleWithHighMasking(highRange);\n    }\n  }\n  return upscaleToLoopCheckedRange(extendedRange);\n}\n\nfunction upscaleWithinI53AndLoopCheck(min: number, max: number): Distribution {\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() | 0;\n      const low = engine.next() >>> 0;\n      ret =\n        (high & UINT21_MAX) * UINT32_SIZE +\n        low +\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n    } while (ret < min || ret > max);\n    return ret;\n  };\n}\n\n/**\n * Returns a Distribution to return a value within [min, max]\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\n */\nexport function integer(min: number, max: number): Distribution {\n  min = Math.floor(min);\n  max = Math.floor(max);\n  if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\n    throw new RangeError(\n      `Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`\n    );\n  } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\n    throw new RangeError(\n      `Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`\n    );\n  }\n\n  const range = max - min;\n  if (range <= 0 || !isFinite(range)) {\n    return () => min;\n  } else if (range === UINT32_MAX) {\n    if (min === 0) {\n      return uint32;\n    } else {\n      return add(int32, min + INT32_SIZE);\n    }\n  } else if (range < UINT32_MAX) {\n    return add(downscaleToRange(range), min);\n  } else if (range === LARGEST_SAFE_INTEGER) {\n    return add(uint53, min);\n  } else if (range < LARGEST_SAFE_INTEGER) {\n    return add(upscaleWithinU53(range), min);\n  } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\n    return add(uint53Full, min);\n  } else if (\n    min === -SMALLEST_UNSAFE_INTEGER &&\n    max === SMALLEST_UNSAFE_INTEGER\n  ) {\n    return int53Full;\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\n    return int53;\n  } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\n    return add(int53, 1);\n  } else if (max === SMALLEST_UNSAFE_INTEGER) {\n    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n  } else {\n    return upscaleWithinI53AndLoopCheck(min, max);\n  }\n}\n","import { Distribution, Engine } from \"../types\";\nimport { INT32_SIZE, SMALLEST_UNSAFE_INTEGER, UINT32_SIZE } from \"../utils/constants\";\nimport { int32 } from \"./int32\";\nimport { integer } from \"./integer\";\nimport { uint53 } from \"./uint53\";\n\nfunction isLeastBitTrue(engine: Engine) {\n  return (engine.next() & 1) === 1;\n}\n\nfunction lessThan(\n  distribution: Distribution,\n  value: number\n): Distribution<boolean> {\n  return engine => distribution(engine) < value;\n}\n\nfunction probability(percentage: number) {\n  if (percentage <= 0) {\n    return () => false;\n  } else if (percentage >= 1) {\n    return () => true;\n  } else {\n    const scaled = percentage * UINT32_SIZE;\n    if (scaled % 1 === 0) {\n      return lessThan(int32, (scaled - INT32_SIZE) | 0);\n    } else {\n      return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\n    }\n  }\n}\n\n// tslint:disable:unified-signatures\n\n/**\n * Returns a boolean Distribution with 50% probability of being true or false\n */\nexport function bool(): Distribution<boolean>;\n/**\n * Returns a boolean Distribution with the provided `percentage` of being true\n * @param percentage A number within [0, 1] of how often the result should be `true`\n */\nexport function bool(percentage: number): Distribution<boolean>;\n/**\n * Returns a boolean Distribution with a probability of\n * `numerator` divided by `denominator` of being true\n * @param numerator The numerator of the probability\n * @param denominator The denominator of the probability\n */\nexport function bool(\n  numerator: number,\n  denominator: number\n): Distribution<boolean>;\nexport function bool(\n  numerator?: number,\n  denominator?: number\n): Distribution<boolean> {\n  if (denominator == null) {\n    if (numerator == null) {\n      return isLeastBitTrue;\n    }\n    return probability(numerator);\n  } else {\n    if (numerator! <= 0) {\n      return () => false;\n    } else if (numerator! >= denominator) {\n      return () => true;\n    }\n    return lessThan(integer(0, denominator - 1), numerator!);\n  }\n}\n","import { Distribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution that returns a random `Date` within the inclusive\n * range of [`start`, `end`].\n * @param start The minimum `Date`\n * @param end The maximum `Date`\n */\nexport function date(start: Date, end: Date): Distribution<Date> {\n  const distribution = integer(+start, +end);\n  return engine => new Date(distribution(engine));\n}\n","import { Distribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution to return a value within [1, sideCount]\n * @param sideCount The number of sides of the die\n */\nexport function die(sideCount: number): Distribution<number> {\n  return integer(1, sideCount);\n}\n","import { Distribution } from \"../types\";\nimport { die } from \"./die\";\n\n/**\n * Returns a distribution that returns an array of length `dieCount` of values\n * within [1, `sideCount`]\n * @param sideCount The number of sides of each die\n * @param dieCount The number of dice\n */\nexport function dice(\n  sideCount: number,\n  dieCount: number\n): Distribution<number[]> {\n  const distribution = die(sideCount);\n  return engine => {\n    const result = [];\n    for (let i = 0; i < dieCount; ++i) {\n      result.push(distribution(engine));\n    }\n    return result;\n  };\n}\n","import { StringDistribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n// tslint:disable:unified-signatures\n\n// has 2**x chars, for faster uniform distribution\nconst DEFAULT_STRING_POOL =\n  \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\n/**\n * Returns a distribution that returns a random string using numbers,\n * uppercase and lowercase letters, `_`, and `-` of length `length`.\n * @param length Length of the result string\n */\nexport function string(): StringDistribution;\n/**\n * Returns a distribution that returns a random string using the provided\n * string pool as the possible characters to choose from of length `length`.\n * @param length Length of the result string\n */\nexport function string(pool: string): StringDistribution;\nexport function string(pool: string = DEFAULT_STRING_POOL): StringDistribution {\n  const poolLength = pool.length;\n  if (!poolLength) {\n    throw new Error(\"Expected pool not to be an empty string\");\n  }\n\n  const distribution = integer(0, poolLength - 1);\n  return (engine, length) => {\n    let result = \"\";\n    for (let i = 0; i < length; ++i) {\n      const j = distribution(engine);\n      result += pool.charAt(j);\n    }\n    return result;\n  };\n}\n","import { StringDistribution } from \"../types\";\nimport { string } from \"./string\";\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\nconst lowerHex = string(LOWER_HEX_POOL);\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\n\n/**\n * Returns a Distribution that returns a random string comprised of numbers\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\n * @param length Length of the result string\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\n */\nexport function hex(uppercase?: boolean): StringDistribution {\n  if (uppercase) {\n    return upperHex;\n  } else {\n    return lowerHex;\n  }\n}\n","export function convertSliceArgument(value: number, length: number): number {\n  if (value < 0) {\n    return Math.max(value + length, 0);\n  } else {\n    return Math.min(value, length);\n  }\n}\n","export function toInteger(value: number) {\n  const num = +value;\n  if (num < 0) {\n    return Math.ceil(num);\n  } else {\n    return Math.floor(num);\n  }\n}\n","import { Engine } from \"../types\";\nimport { convertSliceArgument } from \"../utils/convertSliceArgument\";\nimport { toInteger } from \"../utils/toInteger\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a random value within the provided `source` within the sliced\n * bounds of `begin` and `end`.\n * @param source an array of items to pick from\n * @param begin the beginning slice index (defaults to `0`)\n * @param end the ending slice index (defaults to `source.length`)\n */\nexport function pick<T>(\n  engine: Engine,\n  source: ArrayLike<T>,\n  begin?: number,\n  end?: number\n): T {\n  const length = source.length;\n  if (length === 0) {\n    throw new RangeError(\"Cannot pick from an empty array\");\n  }\n  const start =\n    begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n  const finish =\n    end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n  if (start >= finish) {\n    throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\n  }\n  const distribution = integer(start, finish - 1);\n  return source[distribution(engine)];\n}\n","import { Distribution } from \"../types\";\n\nexport function multiply(\n  distribution: Distribution,\n  multiplier: number\n): Distribution {\n  if (multiplier === 1) {\n    return distribution;\n  } else if (multiplier === 0) {\n    return () => 0;\n  } else {\n    return engine => distribution(engine) * multiplier;\n  }\n}\n","import { Engine } from \"../types\";\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\nimport { uint53 } from \"./uint53\";\n\n/**\n * Returns a floating-point value within [0.0, 1.0)\n */\nexport function realZeroToOneExclusive(engine: Engine): number {\n  return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n","import { Engine } from \"../types\";\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\nimport { uint53Full } from \"./uint53Full\";\n\n/**\n * Returns a floating-point value within [0.0, 1.0]\n */\nexport function realZeroToOneInclusive(engine: Engine): number {\n  return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n","import { Distribution } from \"../types\";\nimport { add } from \"../utils/add\";\nimport { multiply } from \"../utils/multiply\";\nimport { realZeroToOneExclusive } from \"./realZeroToOneExclusive\";\nimport { realZeroToOneInclusive } from \"./realZeroToOneInclusive\";\n\n/**\n * Returns a floating-point value within [min, max) or [min, max]\n * @param min The minimum floating-point value, inclusive.\n * @param max The maximum floating-point value.\n * @param inclusive If true, `max` will be inclusive.\n */\nexport function real(\n  min: number,\n  max: number,\n  inclusive: boolean = false\n): Distribution {\n  if (!isFinite(min)) {\n    throw new RangeError(\"Expected min to be a finite number\");\n  } else if (!isFinite(max)) {\n    throw new RangeError(\"Expected max to be a finite number\");\n  }\n  return add(\n    multiply(\n      inclusive ? realZeroToOneInclusive : realZeroToOneExclusive,\n      max - min\n    ),\n    min\n  );\n}\n","export const sliceArray = Array.prototype.slice;\n","import { Engine } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Shuffles an array in-place\n * @param engine The Engine to use when choosing random values\n * @param array The array to shuffle\n * @param downTo minimum index to shuffle. Only used internally.\n */\nexport function shuffle<T>(\n  engine: Engine,\n  array: T[],\n  downTo: number = 0\n): T[] {\n  const length = array.length;\n  if (length) {\n    for (let i = (length - 1) >>> 0; i > downTo; --i) {\n      const distribution = integer(0, i);\n      const j = distribution(engine);\n      if (i !== j) {\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n      }\n    }\n  }\n  return array;\n}\n","import { Engine } from \"../types\";\nimport { sliceArray } from \"../utils/sliceArray\";\nimport { shuffle } from \"./shuffle\";\n\n/**\n * From the population array, produce an array with sampleSize elements that\n * are randomly chosen without repeats.\n * @param engine The Engine to use when choosing random values\n * @param population An array that has items to choose a sample from\n * @param sampleSize The size of the result array\n */\nexport function sample<T>(\n  engine: Engine,\n  population: ArrayLike<T>,\n  sampleSize: number\n): T[] {\n  if (\n    sampleSize < 0 ||\n    sampleSize > population.length ||\n    !isFinite(sampleSize)\n  ) {\n    throw new RangeError(\n      \"Expected sampleSize to be within 0 and the length of the population\"\n    );\n  }\n\n  if (sampleSize === 0) {\n    return [];\n  }\n\n  const clone = sliceArray.call(population);\n  const length = clone.length;\n  if (length === sampleSize) {\n    return shuffle(engine, clone, 0);\n  }\n  const tailLength = length - sampleSize;\n  return shuffle(engine, clone, tailLength - 1).slice(tailLength);\n}\n","export const stringRepeat = (() => {\n  try {\n    if ((\"x\" as any).repeat(3) === \"xxx\") {\n      return (pattern: string, count: number): string =>\n        (pattern as any).repeat(count);\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (pattern: string, count: number): string => {\n    let result = \"\";\n    while (count > 0) {\n      if (count & 1) {\n        result += pattern;\n      }\n      count >>= 1;\n      pattern += pattern;\n    }\n    return result;\n  };\n})();\n","import { Engine } from \"../types\";\nimport { stringRepeat } from \"../utils/stringRepeat\";\n\nfunction zeroPad(text: string, zeroCount: number) {\n  return stringRepeat(\"0\", zeroCount - text.length) + text;\n}\n\n/**\n * Returns a Universally Unique Identifier Version 4.\n *\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\n */\nexport function uuid4(engine: Engine) {\n  const a = engine.next() >>> 0;\n  const b = engine.next() | 0;\n  const c = engine.next() | 0;\n  const d = engine.next() >>> 0;\n\n  return (\n    zeroPad(a.toString(16), 8) +\n    \"-\" +\n    zeroPad((b & 0xffff).toString(16), 4) +\n    \"-\" +\n    zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n    \"-\" +\n    zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n    \"-\" +\n    zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n    zeroPad(d.toString(16), 8)\n  );\n}\n","import { Engine } from \"../types\";\nimport { UINT32_SIZE } from \"../utils/constants\";\n\n/**\n * An int32-producing Engine that uses `Math.random()`\n */\nexport const nativeMath: Engine = {\n  next() {\n    return (Math.random() * UINT32_SIZE) | 0;\n  }\n};\n","import { bool } from \"./distribution/bool\";\nimport { date } from \"./distribution/date\";\nimport { dice } from \"./distribution/dice\";\nimport { die } from \"./distribution/die\";\nimport { hex } from \"./distribution/hex\";\nimport { int32 } from \"./distribution/int32\";\nimport { int53 } from \"./distribution/int53\";\nimport { int53Full } from \"./distribution/int53Full\";\nimport { integer } from \"./distribution/integer\";\nimport { pick } from \"./distribution/pick\";\nimport { real } from \"./distribution/real\";\nimport { realZeroToOneExclusive } from \"./distribution/realZeroToOneExclusive\";\nimport { realZeroToOneInclusive } from \"./distribution/realZeroToOneInclusive\";\nimport { sample } from \"./distribution/sample\";\nimport { shuffle } from \"./distribution/shuffle\";\nimport { string } from \"./distribution/string\";\nimport { uint32 } from \"./distribution/uint32\";\nimport { uint53 } from \"./distribution/uint53\";\nimport { uint53Full } from \"./distribution/uint53Full\";\nimport { uuid4 } from \"./distribution/uuid4\";\nimport { nativeMath } from \"./engine/nativeMath\";\nimport { Engine } from \"./types\";\n\n// tslint:disable:unified-signatures\n\n/**\n * A wrapper around an Engine that provides easy-to-use methods for\n * producing values based on known distributions\n */\nexport class Random {\n  private readonly engine: Engine;\n\n  /**\n   * Creates a new Random wrapper\n   * @param engine The engine to use (defaults to a `Math.random`-based implementation)\n   */\n  constructor(engine: Engine = nativeMath) {\n    this.engine = engine;\n  }\n\n  /**\n   * Returns a value within [-0x80000000, 0x7fffffff]\n   */\n  public int32(): number {\n    return int32(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0xffffffff]\n   */\n  public uint32(): number {\n    return uint32(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0x1fffffffffffff]\n   */\n  public uint53(): number {\n    return uint53(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0x20000000000000]\n   */\n  public uint53Full(): number {\n    return uint53Full(this.engine);\n  }\n\n  /**\n   * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\n   */\n  public int53(): number {\n    return int53(this.engine);\n  }\n\n  /**\n   * Returns a value within [-0x20000000000000, 0x20000000000000]\n   */\n  public int53Full(): number {\n    return int53Full(this.engine);\n  }\n\n  /**\n   * Returns a value within [min, max]\n   * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\n   * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\n   */\n  public integer(min: number, max: number): number {\n    return integer(min, max)(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [0.0, 1.0]\n   */\n  public realZeroToOneInclusive(): number {\n    return realZeroToOneInclusive(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [0.0, 1.0)\n   */\n  public realZeroToOneExclusive(): number {\n    return realZeroToOneExclusive(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [min, max) or [min, max]\n   * @param min The minimum floating-point value, inclusive.\n   * @param max The maximum floating-point value.\n   * @param inclusive If true, `max` will be inclusive.\n   */\n  public real(min: number, max: number, inclusive: boolean = false): number {\n    return real(min, max, inclusive)(this.engine);\n  }\n\n  /**\n   * Returns a boolean with 50% probability of being true or false\n   */\n  public bool(): boolean;\n  /**\n   * Returns a boolean with the provided `percentage` of being true\n   * @param percentage A number within [0, 1] of how often the result should be `true`\n   */\n  public bool(percentage: number): boolean;\n  /**\n   * Returns a boolean with a probability of `numerator`/`denominator` of being true\n   * @param numerator The numerator of the probability\n   * @param denominator The denominator of the probability\n   */\n  public bool(numerator: number, denominator: number): boolean;\n  public bool(numerator?: number, denominator?: number): boolean {\n    return bool(numerator!, denominator!)(this.engine);\n  }\n\n  /**\n   * Return a random value within the provided `source` within the sliced\n   * bounds of `begin` and `end`.\n   * @param source an array of items to pick from\n   * @param begin the beginning slice index (defaults to `0`)\n   * @param end the ending slice index (defaults to `source.length`)\n   */\n  public pick<T>(source: ArrayLike<T>, begin?: number, end?: number): T {\n    return pick(this.engine, source, begin, end);\n  }\n\n  /**\n   * Shuffles an array in-place\n   * @param array The array to shuffle\n   */\n  public shuffle<T>(array: T[]): T[] {\n    return shuffle(this.engine, array);\n  }\n\n  /**\n   * From the population array, returns an array with sampleSize elements that\n   * are randomly chosen without repeats.\n   * @param population An array that has items to choose a sample from\n   * @param sampleSize The size of the result array\n   */\n  public sample<T>(population: ArrayLike<T>, sampleSize: number): T[] {\n    return sample(this.engine, population, sampleSize);\n  }\n\n  /**\n   * Returns a value within [1, sideCount]\n   * @param sideCount The number of sides of the die\n   */\n  public die(sideCount: number): number {\n    return die(sideCount)(this.engine);\n  }\n\n  /**\n   * Returns an array of length `dieCount` of values within [1, sideCount]\n   * @param sideCount The number of sides of each die\n   * @param dieCount The number of dice\n   */\n  public dice(sideCount: number, dieCount: number): number[] {\n    return dice(sideCount, dieCount)(this.engine);\n  }\n\n  /**\n   * Returns a Universally Unique Identifier Version 4.\n   *\n   * See http://en.wikipedia.org/wiki/Universally_unique_identifier\n   */\n  public uuid4(): string {\n    return uuid4(this.engine);\n  }\n\n  /**\n   * Returns a random string using numbers, uppercase and lowercase letters,\n   * `_`, and `-` of length `length`.\n   * @param length Length of the result string\n   */\n  public string(length: number): string;\n  /**\n   * Returns a random string using the provided string pool as the possible\n   * characters to choose from of length `length`.\n   * @param length Length of the result string\n   */\n  public string(length: number, pool: string): string;\n  public string(length: number, pool?: string): string {\n    return string(pool!)(this.engine, length);\n  }\n\n  /**\n   * Returns a random string comprised of numbers or the characters `abcdef`\n   * (or `ABCDEF`) of length `length`.\n   * @param length Length of the result string\n   * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\n   */\n  public hex(length: number, uppercase?: boolean): string {\n    return hex(uppercase)(this.engine, length);\n  }\n\n  /**\n   * Returns a random `Date` within the inclusive range of [`start`, `end`].\n   * @param start The minimum `Date`\n   * @param end The maximum `Date`\n   */\n  public date(start: Date, end: Date): Date {\n    return date(start, end)(this.engine);\n  }\n}\n","import { INT32_SIZE } from \"./constants\";\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n */\nconst I32Array: typeof Int32Array = (() => {\n  try {\n    const buffer = new ArrayBuffer(4);\n    const view = new Int32Array(buffer);\n    view[0] = INT32_SIZE;\n    if (view[0] === -INT32_SIZE) {\n      return Int32Array;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (Array as unknown) as typeof Int32Array;\n})();\nexport { I32Array as Int32Array };\n","import { Engine } from \"../types\";\nimport { Int32Array } from \"../utils/Int32Array\";\n\nlet data: Int32Array | null = null;\nconst COUNT = 128;\nlet index = COUNT;\n\n/**\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\n * which is typically available in modern browsers.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n *\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\n * likely `throw` on the first call to `next()`.\n */\nexport const browserCrypto: Engine = {\n  next() {\n    if (index >= COUNT) {\n      if (data === null) {\n        data = new Int32Array(COUNT);\n      }\n      crypto.getRandomValues(data);\n      index = 0;\n    }\n    return data![index++] | 0;\n  }\n};\n","import { nativeMath } from \"../engine/nativeMath\";\nimport { Engine } from \"../types\";\n\n/**\n * Returns an array of random int32 values, based on current time\n * and a random number engine\n *\n * @param engine an Engine to pull random values from, default `nativeMath`\n * @param length the length of the Array, minimum 1, default 16\n */\nexport function createEntropy(\n  engine: Engine = nativeMath,\n  length: number = 16\n): number[] {\n  const array: number[] = [];\n  array.push(new Date().getTime() | 0);\n  for (let i = 1; i < length; ++i) {\n    array[i] = engine.next() | 0;\n  }\n  return array;\n}\n","import { UINT32_MAX } from \"./constants\";\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n */\nexport const imul: (a: number, b: number) => number = (() => {\n  try {\n    if ((Math as any).imul(UINT32_MAX, 5) === -5) {\n      return (Math as any).imul;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  const UINT16_MAX = 0xffff;\n  return (a: number, b: number) => {\n    const ah = (a >>> 16) & UINT16_MAX;\n    const al = a & UINT16_MAX;\n    const bh = (b >>> 16) & UINT16_MAX;\n    const bl = b & UINT16_MAX;\n    // the shift by 0 fixes the sign on the high part\n    // the final |0 converts the unsigned value into a signed value\n    return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\n  };\n})();\n","import { Engine } from \"../types\";\nimport { INT32_MAX, INT32_SIZE } from \"../utils/constants\";\nimport { createEntropy } from \"../utils/createEntropy\";\nimport { imul } from \"../utils/imul\";\nimport { Int32Array } from \"../utils/Int32Array\";\n\nconst ARRAY_SIZE = 624;\nconst ARRAY_MAX = ARRAY_SIZE - 1;\nconst M = 397;\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\nconst A = 0x9908b0df;\n\n/**\n * An Engine that is a pseudorandom number generator using the Mersenne\n * Twister algorithm based on the prime 2**19937 − 1\n *\n * See http://en.wikipedia.org/wiki/Mersenne_twister\n */\nexport class MersenneTwister19937 implements Engine {\n  /**\n   * Returns a MersenneTwister19937 seeded with an initial int32 value\n   * @param initial the initial seed value\n   */\n  public static seed(initial: number): MersenneTwister19937 {\n    return new MersenneTwister19937().seed(initial);\n  }\n\n  /**\n   * Returns a MersenneTwister19937 seeded with zero or more int32 values\n   * @param source A series of int32 values\n   */\n  public static seedWithArray(source: ArrayLike<number>): MersenneTwister19937 {\n    return new MersenneTwister19937().seedWithArray(source);\n  }\n\n  /**\n   * Returns a MersenneTwister19937 seeded with the current time and\n   * a series of natively-generated random values\n   */\n  public static autoSeed(): MersenneTwister19937 {\n    return MersenneTwister19937.seedWithArray(createEntropy());\n  }\n\n  private readonly data = new Int32Array(ARRAY_SIZE);\n  private index = 0; // integer within [0, 624]\n  private uses = 0;\n\n  /**\n   * MersenneTwister19937 should not be instantiated directly.\n   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\n   */\n  private constructor() {}\n\n  /**\n   * Returns the next int32 value of the sequence\n   */\n  public next(): number {\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n\n    const value = this.data[this.index];\n    this.index = (this.index + 1) | 0;\n    this.uses += 1;\n    return temper(value) | 0;\n  }\n\n  /**\n   * Returns the number of times that the Engine has been used.\n   *\n   * This can be provided to an unused MersenneTwister19937 with the same\n   * seed, bringing it to the exact point that was left off.\n   */\n  public getUseCount(): number {\n    return this.uses;\n  }\n\n  /**\n   * Discards one or more items from the engine\n   * @param count The count of items to discard\n   */\n  public discard(count: number): this {\n    if (count <= 0) {\n      return this;\n    }\n    this.uses += count;\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n    while (count + this.index > ARRAY_SIZE) {\n      count -= ARRAY_SIZE - this.index;\n      refreshData(this.data);\n      this.index = 0;\n    }\n    this.index = (this.index + count) | 0;\n    return this;\n  }\n\n  private seed(initial: number): this {\n    let previous = 0;\n    this.data[0] = previous = initial | 0;\n\n    for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\n      this.data[i] = previous =\n        (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\n    }\n    this.index = ARRAY_SIZE;\n    this.uses = 0;\n    return this;\n  }\n\n  private seedWithArray(source: ArrayLike<number>): this {\n    this.seed(0x012bd6aa);\n    seedWithArray(this.data, source);\n    return this;\n  }\n}\n\nfunction refreshData(data: Int32Array) {\n  let k = 0;\n  let tmp = 0;\n  for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\n    data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n  }\n\n  for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\n    data[k] =\n      data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n  }\n\n  tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\n  data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n}\n\nfunction temper(value: number) {\n  value ^= value >>> 11;\n  value ^= (value << 7) & 0x9d2c5680;\n  value ^= (value << 15) & 0xefc60000;\n  return value ^ (value >>> 18);\n}\n\nfunction seedWithArray(data: Int32Array, source: ArrayLike<number>) {\n  let i = 1;\n  let j = 0;\n  const sourceLength = source.length;\n  let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\n  let previous = data[0] | 0;\n  for (; (k | 0) > 0; --k) {\n    data[i] = previous =\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\n        (source[j] | 0) +\n        (j | 0)) |\n      0;\n    i = (i + 1) | 0;\n    ++j;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n    if (j >= sourceLength) {\n      j = 0;\n    }\n  }\n  for (k = ARRAY_MAX; (k | 0) > 0; --k) {\n    data[i] = previous =\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\n    i = (i + 1) | 0;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n  }\n  data[0] = INT32_SIZE;\n}\n","import { Engine } from \"../types\";\n\nlet data: Int32Array | null = null;\nconst COUNT = 128;\nlet index = COUNT;\n\n/**\n * An Engine that relies on the node-available\n * `require('crypto').randomBytes`, which has been available since 0.58.\n *\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\n *\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\n * likely `throw` on the first call to `next()`.\n */\nexport const nodeCrypto: Engine = {\n  next() {\n    if (index >= COUNT) {\n      data = new Int32Array(\n        new Int8Array(require(\"crypto\").randomBytes(4 * COUNT)).buffer\n      );\n      index = 0;\n    }\n    return data![index++] | 0;\n  }\n};\n","import { Distribution } from \"../types\";\nimport { sliceArray } from \"../utils/sliceArray\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution to random value within the provided `source`\n * within the sliced bounds of `begin` and `end`.\n * @param source an array of items to pick from\n * @param begin the beginning slice index (defaults to `0`)\n * @param end the ending slice index (defaults to `source.length`)\n */\nexport function picker<T>(\n  source: ArrayLike<T>,\n  begin?: number,\n  end?: number\n): Distribution<T> {\n  const clone = sliceArray.call(source, begin, end);\n  if (clone.length === 0) {\n    throw new RangeError(`Cannot pick from a source with no items`);\n  }\n  const distribution = integer(0, clone.length - 1);\n  return engine => clone[distribution(engine)];\n}\n"],"names":["Int32Array","data","COUNT","index"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"debugId":null}},
    {"offset": {"line": 7085, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-random-forest/src/utils.js"],"sourcesContent":["import { Matrix } from 'ml-matrix';\nimport * as Random from 'random-js';\n\nexport function checkFloat(n) {\n  return n > 0.0 && n <= 1.0;\n}\n\nexport function isFloat(n) {\n  return Number(n) === n && n % 1 !== 0;\n}\n\n/**\n * Select n with replacement elements on the training set and values, where n is the size of the training set.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {Array} trainingValue\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object} with new X and y.\n */\nexport function examplesBaggingWithReplacement(\n  trainingSet,\n  trainingValue,\n  seed,\n) {\n  let engine;\n  let distribution = Random.integer(0, trainingSet.rows - 1);\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`,\n    );\n  }\n\n  let Xr = new Array(trainingSet.rows);\n  let yr = new Array(trainingSet.rows);\n\n  let oob = new Array(trainingSet.rows).fill(0);\n  let oobN = trainingSet.rows;\n\n  for (let i = 0; i < trainingSet.rows; ++i) {\n    let index = distribution(engine);\n    Xr[i] = trainingSet.getRow(index);\n    yr[i] = trainingValue[index];\n\n    if (oob[index]++ === 0) {\n      oobN--;\n    }\n  }\n\n  let Xoob = new Array(oobN);\n  let ioob = new Array(oobN);\n\n  // run backwards to have ioob filled in increasing order\n  for (let i = trainingSet.rows - 1; i >= 0 && oobN > 0; --i) {\n    if (oob[i] === 0) {\n      Xoob[--oobN] = trainingSet.getRow(i);\n      ioob[oobN] = i;\n    }\n  }\n\n  return {\n    X: new Matrix(Xr),\n    y: yr,\n    Xoob: new Matrix(Xoob),\n    ioob,\n    seed: engine.next(),\n  };\n}\n\n/**\n * selects n features from the training set with or without replacement, returns the new training set and the indexes used.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {number} n - features.\n * @param {boolean} replacement\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object}\n */\nexport function featureBagging(trainingSet, n, replacement, seed) {\n  if (trainingSet.columns < n) {\n    throw new RangeError(\n      'N should be less or equal to the number of columns of X',\n    );\n  }\n\n  let distribution = Random.integer(0, trainingSet.columns - 1);\n  let engine;\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`,\n    );\n  }\n\n  let toRet = new Matrix(trainingSet.rows, n);\n\n  let usedIndex;\n  let index;\n  if (replacement) {\n    usedIndex = new Array(n);\n    for (let i = 0; i < n; ++i) {\n      index = distribution(engine);\n      usedIndex[i] = index;\n      toRet.setColumn(i, trainingSet.getColumn(index));\n    }\n  } else {\n    usedIndex = new Set();\n    index = distribution(engine);\n    for (let i = 0; i < n; ++i) {\n      while (usedIndex.has(index)) {\n        index = distribution(engine);\n      }\n      toRet.setColumn(i, trainingSet.getColumn(index));\n      usedIndex.add(index);\n    }\n    usedIndex = Array.from(usedIndex);\n  }\n\n  return {\n    X: toRet,\n    usedIndex: usedIndex,\n    seed: engine.next(),\n  };\n}\n\n/**\n * collects and combines the individual results from the tree predictions on Out-Of-Bag data\n * @ignore\n * @param {{index: {Array},predicted: {Array}}[]} oob: array of individual tree predictions\n * @param {array} y: true labels\n * @param {(predictions:{Array})=>{number}} aggregate: aggregation function\n * @return {Array}\n */\nexport const collectOOB = (oob, y, aggregate) => {\n  const res = Array(y.length);\n  for (let i = 0; i < y.length; i++) {\n    const all = [];\n    for (let j = 0; j < oob.length; j++) {\n      const o = oob[j];\n      if (o.index[0] === i) {\n        all.push(o.predicted[0]);\n        o.index = o.index.slice(1);\n        o.predicted = o.predicted.slice(1);\n      }\n    }\n    res[i] = { true: y[i], all: all, predicted: aggregate(all) };\n  }\n  return res;\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7208, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-random-forest/src/RandomForestBase.js"],"sourcesContent":["import {\n  DecisionTreeClassifier as DTClassifier,\n  DecisionTreeRegression as DTRegression,\n} from 'ml-cart';\nimport {\n  Matrix,\n  WrapperMatrix2D,\n  MatrixTransposeView,\n  MatrixColumnSelectionView,\n} from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class RandomForestBase\n */\nexport class RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number|String} [options.maxFeatures] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement] - use replacement over the sample features.\n   * @param {number} [options.seed] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators] - number of estimator to use.\n   * @param {object} [options.treeOptions] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.isClassifier] - boolean to check if is a classifier or regression model (used by subclasses).\n   * @param {boolean} [options.useSampleBagging] - use bagging over training samples.\n   * @param {boolean} [options.noOOB] - don't calculate Out-Of-Bag predictions.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.replacement = model.replacement;\n      this.maxFeatures = model.maxFeatures;\n      this.nEstimators = model.nEstimators;\n      this.treeOptions = model.treeOptions;\n      this.isClassifier = model.isClassifier;\n      this.seed = model.seed;\n      this.n = model.n;\n      this.indexes = model.indexes;\n      this.useSampleBagging = model.useSampleBagging;\n      this.noOOB = true;\n      this.maxSamples = model.maxSamples;\n\n      let Estimator = this.isClassifier ? DTClassifier : DTRegression;\n      this.estimators = model.estimators.map((est) => Estimator.load(est));\n    } else {\n      this.replacement = options.replacement;\n      this.maxFeatures = options.maxFeatures;\n      this.nEstimators = options.nEstimators;\n      this.treeOptions = options.treeOptions;\n      this.isClassifier = options.isClassifier;\n      this.seed = options.seed;\n      this.useSampleBagging = options.useSampleBagging;\n      this.noOOB = options.noOOB;\n      this.maxSamples = options.maxSamples;\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    let currentSeed = this.seed;\n\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    this.maxFeatures = this.maxFeatures || trainingSet.columns;\n    this.numberFeatures = trainingSet.columns;\n    this.numberSamples = trainingSet.rows;\n\n    if (Utils.checkFloat(this.maxFeatures)) {\n      this.n = Math.floor(trainingSet.columns * this.maxFeatures);\n    } else if (Number.isInteger(this.maxFeatures)) {\n      if (this.maxFeatures > trainingSet.columns) {\n        throw new RangeError(\n          `The maxFeatures parameter should be less than ${trainingSet.columns}`,\n        );\n      } else {\n        this.n = this.maxFeatures;\n      }\n    } else {\n      throw new RangeError(\n        `Cannot process the maxFeatures parameter ${this.maxFeatures}`,\n      );\n    }\n\n    if (this.maxSamples) {\n      if (this.maxSamples < 0) {\n        throw new RangeError(`Please choose a positive value for maxSamples`);\n      } else {\n        if (Utils.isFloat(this.maxSamples)) {\n          if (this.maxSamples > 1.0) {\n            throw new RangeError(\n              'Please choose either a float value between 0 and 1 or a positive integer for maxSamples',\n            );\n          } else {\n            this.numberSamples = Math.floor(trainingSet.rows * this.maxSamples);\n          }\n        } else if (Number.isInteger(this.maxSamples)) {\n          if (this.maxSamples > trainingSet.rows) {\n            throw new RangeError(\n              `The maxSamples parameter should be less than ${trainingSet.rows}`,\n            );\n          } else {\n            this.numberSamples = this.maxSamples;\n          }\n        }\n      }\n    }\n\n    if (this.maxSamples) {\n      if (trainingSet.rows !== this.numberSamples) {\n        let tmp = new Matrix(this.numberSamples, trainingSet.columns);\n        for (let j = 0; j < this.numberSamples; j++) {\n          tmp.removeRow(0);\n        }\n        for (let i = 0; i < this.numberSamples; i++) {\n          tmp.addRow(trainingSet.getRow(i));\n        }\n        trainingSet = tmp;\n\n        trainingValues = trainingValues.slice(0, this.numberSamples);\n      }\n    }\n\n    let Estimator;\n    if (this.isClassifier) {\n      Estimator = DTClassifier;\n    } else {\n      Estimator = DTRegression;\n    }\n\n    this.estimators = new Array(this.nEstimators);\n    this.indexes = new Array(this.nEstimators);\n\n    let oobResults = new Array(this.nEstimators);\n\n    for (let i = 0; i < this.nEstimators; ++i) {\n      let res = this.useSampleBagging\n        ? Utils.examplesBaggingWithReplacement(\n            trainingSet,\n            trainingValues,\n            currentSeed,\n          )\n        : {\n            X: trainingSet,\n            y: trainingValues,\n            seed: currentSeed,\n            Xoob: undefined,\n            yoob: [],\n            ioob: [],\n          };\n      let X = res.X;\n      let y = res.y;\n      currentSeed = res.seed;\n      let { Xoob, ioob } = res;\n\n      // Other implementations of random forests apply feature bagging at every split during tree generation.\n      // So I think it would be better to implement it at the CART level, not here.\n\n      res = Utils.featureBagging(X, this.n, this.replacement, currentSeed);\n      X = res.X;\n      currentSeed = res.seed;\n\n      this.indexes[i] = res.usedIndex;\n      this.estimators[i] = new Estimator(this.treeOptions);\n      this.estimators[i].train(X, y);\n\n      if (!this.noOOB && this.useSampleBagging) {\n        let xoob = new MatrixColumnSelectionView(Xoob, this.indexes[i]);\n        oobResults[i] = {\n          index: ioob,\n          predicted: this.estimators[i].predict(xoob),\n        };\n      }\n    }\n    if (!this.noOOB && this.useSampleBagging && oobResults.length > 0) {\n      this.oobResults = Utils.collectOOB(\n        oobResults,\n        trainingValues,\n        this.selection.bind(this),\n      );\n    }\n  }\n\n  /**\n   * Evaluate the feature importances for each tree in the ensemble\n   * @return {Array} feature importances\n   */\n  featureImportance() {\n    const trees = JSON.parse(JSON.stringify(this.estimators));\n    const indexes = JSON.parse(JSON.stringify(this.indexes));\n    let importance = [];\n\n    function computeFeatureImportances(i, node) {\n      // node.gain can be null or undefined\n      if (!node || !('splitColumn' in node) || !(node.gain > 0)) return;\n      let f = node.gain * node.numberSamples;\n      if ('left' in node) {\n        f -= (node.left.gain || 0) * (node.left.numberSamples || 0);\n      }\n      if ('right' in node) {\n        f -= (node.right.gain || 0) * (node.right.numberSamples || 0);\n      }\n      importance[i][node.splitColumn] += f;\n      if (node.left) {\n        computeFeatureImportances(i, node.left);\n      }\n      if (node.right) {\n        computeFeatureImportances(i, node.right);\n      }\n    }\n\n    function normalizeImportances(i) {\n      const s = importance[i].reduce((cum, v) => {\n        return (cum += v);\n      }, 0);\n      importance[i] = importance[i].map((v) => {\n        return v / s;\n      });\n    }\n\n    for (let i = 0; i < trees.length; i++) {\n      importance.push(new Array(this.numberFeatures).fill(0.0));\n      computeFeatureImportances(i, trees[i].root);\n      normalizeImportances(i);\n    }\n\n    let avgImportance = new Array(this.numberFeatures).fill(0.0);\n    for (let i = 0; i < importance.length; i++) {\n      for (let x = 0; x < this.numberFeatures; x++) {\n        avgImportance[indexes[i][x]] += importance[i][x];\n      }\n    }\n\n    const s = avgImportance.reduce((cum, v) => {\n      return (cum += v);\n    }, 0);\n    return avgImportance.map((v) => {\n      return v / s;\n    });\n  }\n\n  /**\n   * Method that returns the way the algorithm generates the predictions, for example, in classification\n   * you can return the mode of all predictions retrieved by the trees, or in case of regression you can\n   * use the mean or the median.\n   * @abstract\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction.\n   */\n  // eslint-disable-next-line no-unused-vars\n  selection(values) {\n    throw new Error(\"Abstract method 'selection' not implemented!\");\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    const predictionValues = this.predictionValues(toPredict);\n    let predictions = new Array(predictionValues.rows);\n    for (let i = 0; i < predictionValues.rows; ++i) {\n      predictions[i] = this.selection(predictionValues.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {MatrixTransposeView} predictions of estimators\n   */\n  predictionValues(toPredict) {\n    let predictionValues = new Array(this.nEstimators);\n    toPredict = Matrix.checkMatrix(toPredict);\n    for (let i = 0; i < this.nEstimators; ++i) {\n      let X = new MatrixColumnSelectionView(toPredict, this.indexes[i]);\n      predictionValues[i] = this.estimators[i].predict(X);\n    }\n    return (predictionValues = new MatrixTransposeView(\n      new WrapperMatrix2D(predictionValues),\n    ));\n  }\n\n  /**\n   * Returns the Out-Of-Bag predictions.\n   * @return {Array} predictions\n   */\n  predictOOB() {\n    if (!this.oobResults || this.oobResults.length === 0) {\n      throw new Error(\n        'No Out-Of-Bag results found. Did you forgot to train first?',\n      );\n    }\n    return this.oobResults.map((v) => v.predicted);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      indexes: this.indexes,\n      n: this.n,\n      replacement: this.replacement,\n      maxFeatures: this.maxFeatures,\n      nEstimators: this.nEstimators,\n      treeOptions: this.treeOptions,\n      isClassifier: this.isClassifier,\n      seed: this.seed,\n      estimators: this.estimators.map((est) => est.toJSON()),\n      useSampleBagging: this.useSampleBagging,\n    };\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7477, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-random-forest/src/RandomForestClassifier.js"],"sourcesContent":["import arrayMode from 'ml-array-mode';\n\nimport { RandomForestBase } from './RandomForestBase';\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: true,\n  nEstimators: 50,\n  seed: 42,\n  useSampleBagging: true,\n  noOOB: false,\n};\n\n/**\n * @class RandomForestClassifier\n * @augments RandomForestBase\n */\nexport class RandomForestClassifier extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=50] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.useSampleBagging=true] - use bagging over training samples.\n   * @param {number} [options.maxSamples=null] - if null, then draw X.shape[0] samples. If int, then draw maxSamples samples. If float, then draw maxSamples * X.shape[0] samples. Thus, maxSamples should be in the interval (0.0, 1.0].\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      options.isClassifier = true;\n      super(options);\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return arrayMode(values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    let baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      name: 'RFClassifier',\n    };\n  }\n\n  /**\n   * Returns the confusion matrix\n   * Make sure to run train first.\n   * @return {object} - Current model.\n   */\n  getConfusionMatrix() {\n    if (!this.oobResults) {\n      throw new Error('No Out-Of-Bag results available.');\n    }\n\n    const labels = new Set();\n    const matrix = this.oobResults.reduce((p, v) => {\n      labels.add(v.true);\n      labels.add(v.predicted);\n      const x = p[v.predicted] || {};\n      x[v.true] = (x[v.true] || 0) + 1;\n      p[v.predicted] = x;\n      return p;\n    }, {});\n    const sortedLabels = [...labels].sort();\n\n    return sortedLabels.map((v) =>\n      sortedLabels.map((w) => (matrix[v] || {})[w] || 0),\n    );\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'RFClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestClassifier(true, model);\n  }\n\n  /**\n   * Predicts the probability of a label given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @param {number} label\n   * @return {Array} predictions\n   */\n  predictProbability(toPredict, label) {\n    const predictionValues = this.predictionValues(toPredict);\n    let predictions = new Array(predictionValues.rows);\n    for (let i = 0; i < predictionValues.rows; ++i) {\n      const pvs = predictionValues.getRow(i);\n      const l = pvs.length;\n      const roundFactor = Math.pow(10, 6);\n      predictions[i] =\n        Math.round(\n          pvs.reduce((p, v) => {\n            if (v === label) {\n              p += roundFactor / l;\n            }\n            return p;\n          }),\n        ) / roundFactor;\n    }\n\n    return predictions;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,iBAAiB;IACrB,aAAa;IACb,aAAa;IACb,aAAa;IACb,MAAM;IACN,kBAAkB;IAClB,OAAO;AACT;AAMO,MAAM,+BAA+B,iKAAA,CAAA,mBAAgB;IAC1D;;;;;;;;;;;;;;GAcC,GACD,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,IAAI,YAAY,MAAM;YACpB,KAAK,CAAC,MAAM,MAAM,SAAS;QAC7B,OAAO;YACL,UAAU,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB;YAC5C,QAAQ,YAAY,GAAG;YACvB,KAAK,CAAC;QACR;IACF;IAEA;;;;GAIC,GACD,UAAU,MAAM,EAAE;QAChB,OAAO,CAAA,GAAA,0JAAA,CAAA,UAAS,AAAD,EAAE;IACnB;IAEA;;;GAGC,GACD,SAAS;QACP,IAAI,YAAY,KAAK,CAAC;QACtB,OAAO;YACL,WAAW;YACX,MAAM;QACR;IACF;IAEA;;;;GAIC,GACD,qBAAqB;QACnB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,IAAI;QACnB,MAAM,SAAS,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG;YACxC,OAAO,GAAG,CAAC,EAAE,IAAI;YACjB,OAAO,GAAG,CAAC,EAAE,SAAS;YACtB,MAAM,IAAI,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC;YAC7B,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;YAC/B,CAAC,CAAC,EAAE,SAAS,CAAC,GAAG;YACjB,OAAO;QACT,GAAG,CAAC;QACJ,MAAM,eAAe;eAAI;SAAO,CAAC,IAAI;QAErC,OAAO,aAAa,GAAG,CAAC,CAAC,IACvB,aAAa,GAAG,CAAC,CAAC,IAAM,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI;IAEpD;IAEA;;;;GAIC,GACD,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,MAAM,IAAI,WAAW,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;QACrD;QAEA,OAAO,IAAI,uBAAuB,MAAM;IAC1C;IAEA;;;;;GAKC,GACD,mBAAmB,SAAS,EAAE,KAAK,EAAE;QACnC,MAAM,mBAAmB,IAAI,CAAC,gBAAgB,CAAC;QAC/C,IAAI,cAAc,IAAI,MAAM,iBAAiB,IAAI;QACjD,IAAK,IAAI,IAAI,GAAG,IAAI,iBAAiB,IAAI,EAAE,EAAE,EAAG;YAC9C,MAAM,MAAM,iBAAiB,MAAM,CAAC;YACpC,MAAM,IAAI,IAAI,MAAM;YACpB,MAAM,cAAc,KAAK,GAAG,CAAC,IAAI;YACjC,WAAW,CAAC,EAAE,GACZ,KAAK,KAAK,CACR,IAAI,MAAM,CAAC,CAAC,GAAG;gBACb,IAAI,MAAM,OAAO;oBACf,KAAK,cAAc;gBACrB;gBACA,OAAO;YACT,MACE;QACR;QAEA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7592, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/median-quickselect/lib/median-quickselect.min.js"],"sourcesContent":["(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n"],"names":[],"mappings":"AAAA,CAAC;IAAW,SAAS,EAAE,CAAC;QAAE,IAAI,IAAI,IAAE,GAAE,IAAE,EAAE,MAAM,GAAC,GAAE,IAAE,KAAK,GAAE,IAAE,KAAK,GAAE,IAAE,KAAK,GAAE,IAAE,EAAE,GAAE,IAAG,CAAC,GAAG;YAAC,IAAG,KAAG,GAAE,OAAO,CAAC,CAAC,EAAE;YAAC,IAAG,KAAG,IAAE,GAAE,OAAO,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,IAAE,EAAE,GAAE,GAAE,IAAG,CAAC,CAAC,EAAE;YAAC,IAAI,IAAE,EAAE,GAAE,IAAG,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,IAAE,EAAE,GAAE,GAAE,IAAG,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,IAAE,EAAE,GAAE,GAAE,IAAG,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,IAAE,EAAE,GAAE,GAAE,IAAG,EAAE,GAAE,GAAE,IAAE,IAAG,IAAE,IAAE,GAAE,IAAE,GAAE,CAAC,GAAG;gBAAC,GAAG;uBAAU,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,CAAE;gBAAA,GAAG;uBAAU,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,CAAE;gBAAA,IAAG,IAAE,GAAE;gBAAM,EAAE,GAAE,GAAE;YAAE;YAAC,EAAE,GAAE,GAAE,IAAG,KAAG,KAAG,CAAC,IAAE,CAAC,GAAE,KAAG,KAAG,CAAC,IAAE,IAAE,CAAC;QAAC;IAAC;IAAC,IAAI,IAAE,SAAS,EAAE,CAAC,EAAC,CAAC,EAAC,CAAC;QAAE,IAAI;QAAK,OAAO,OAAK;YAAC,CAAC,CAAC,EAAE;YAAC,CAAC,CAAC,EAAE;SAAC,EAAC,CAAC,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,EAAC;IAAI,GAAE,IAAE,SAAS,EAAE,CAAC,EAAC,CAAC;QAAE,OAAM,CAAC,CAAC,CAAC,CAAC,IAAE,CAAC,IAAE,CAAC;IAAC;IAAE,6DAA4B,OAAO,OAAO,GAAC,OAAO,OAAO,GAAC,IAAE,OAAO,MAAM,GAAC;AAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7625, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-median/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\nimport quickSelectMedian from 'median-quickselect';\n\nfunction median(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport { median as default };\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,SAAS,OAAO,KAAK;IACnB,IAAI,CAAC,CAAA,GAAA,yJAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,OAAO,CAAA,GAAA,4KAAA,CAAA,UAAiB,AAAD,EAAE,MAAM,KAAK;AACtC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7648, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-random-forest/src/RandomForestRegression.js"],"sourcesContent":["import arrayMean from 'ml-array-mean';\nimport arrayMedian from 'ml-array-median';\n\nimport { RandomForestBase } from './RandomForestBase';\n\nconst selectionMethods = {\n  mean: arrayMean,\n  median: arrayMedian,\n};\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: false,\n  nEstimators: 50,\n  treeOptions: {},\n  selectionMethod: 'mean',\n  seed: 42,\n  useSampleBagging: true,\n  noOOB: false,\n};\n\n/**\n * @class RandomForestRegression\n * @augments RandomForestBase\n */\nexport class RandomForestRegression extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=50] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {string} [options.selectionMethod=\"mean\"] - the way to calculate the prediction from estimators, \"mean\" and \"median\" are supported.\n   * @param {boolean} [options.useSampleBagging=true] - use bagging over training samples.\n   * @param {number} [options.maxSamples=null] - if null, then draw X.shape[0] samples. If int, then draw maxSamples samples. If float, then draw maxSamples * X.shape[0] samples. Thus, maxSamples should be in the interval (0.0, 1.0].\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n      this.selectionMethod = model.selectionMethod;\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      if (\n        !(\n          options.selectionMethod === 'mean' ||\n          options.selectionMethod === 'median'\n        )\n      ) {\n        throw new RangeError(\n          `Unsupported selection method ${options.selectionMethod}`,\n        );\n      }\n\n      options.isClassifier = false;\n\n      super(options);\n      this.selectionMethod = options.selectionMethod;\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return selectionMethods[this.selectionMethod](values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    let baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      selectionMethod: this.selectionMethod,\n      name: 'RFRegression',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestRegression}\n   */\n  static load(model) {\n    if (model.name !== 'RFRegression') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestRegression(true, model);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,0JAAA,CAAA,UAAS;IACf,QAAQ,4JAAA,CAAA,UAAW;AACrB;AAEA,MAAM,iBAAiB;IACrB,aAAa;IACb,aAAa;IACb,aAAa;IACb,aAAa,CAAC;IACd,iBAAiB;IACjB,MAAM;IACN,kBAAkB;IAClB,OAAO;AACT;AAMO,MAAM,+BAA+B,iKAAA,CAAA,mBAAgB;IAC1D;;;;;;;;;;;;;;;GAeC,GACD,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,IAAI,YAAY,MAAM;YACpB,KAAK,CAAC,MAAM,MAAM,SAAS;YAC3B,IAAI,CAAC,eAAe,GAAG,MAAM,eAAe;QAC9C,OAAO;YACL,UAAU,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB;YAC5C,IACE,CAAC,CACC,QAAQ,eAAe,KAAK,UAC5B,QAAQ,eAAe,KAAK,QAC9B,GACA;gBACA,MAAM,IAAI,WACR,CAAC,6BAA6B,EAAE,QAAQ,eAAe,EAAE;YAE7D;YAEA,QAAQ,YAAY,GAAG;YAEvB,KAAK,CAAC;YACN,IAAI,CAAC,eAAe,GAAG,QAAQ,eAAe;QAChD;IACF;IAEA;;;;GAIC,GACD,UAAU,MAAM,EAAE;QAChB,OAAO,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAChD;IAEA;;;GAGC,GACD,SAAS;QACP,IAAI,YAAY,KAAK,CAAC;QACtB,OAAO;YACL,WAAW;YACX,iBAAiB,IAAI,CAAC,eAAe;YACrC,MAAM;QACR;IACF;IAEA;;;;GAIC,GACD,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,MAAM,IAAI,WAAW,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;QACrD;QAEA,OAAO,IAAI,uBAAuB,MAAM;IAC1C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7736, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 7754, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0],"debugId":null}}]
}