{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/app/page.js"],"sourcesContent":["\"use client\";\nimport KNN from \"ml-knn\";\n// import LogisticRegression from \"ml-logistic-regression\";\n// import { DecisionTreeClassifier } from \"ml-cart\";\n// import { RandomForestClassifier } from \"ml-random-forest\";\nimport { useState } from \"react\";\nimport { Matrix } from \"ml-matrix\";\n\n// Custom TF-IDF Implementation\nclass TFIDF {\n  constructor() {\n    this.documents = [];\n    this.termFreqs = [];\n    this.idfScores = {};\n  }\n\n  tokenize(text) {\n    return text.toLowerCase().match(/\\b\\w+\\b/g) || [];\n  }\n\n  computeTF(words) {\n    const tf = {};\n    words.forEach((word) => {\n      tf[word] = (tf[word] || 0) + 1;\n    });\n    const totalWords = words.length;\n    Object.keys(tf).forEach((word) => {\n      tf[word] /= totalWords;\n    });\n    return tf;\n  }\n\n  computeIDF() {\n    console.debug(\"Computing IDF\");\n    const totalDocs = this.documents.length;\n    const docFrequency = {};\n\n    this.documents.forEach((words) => {\n      const uniqueWords = new Set(words);\n      uniqueWords.forEach((word) => {\n        docFrequency[word] = (docFrequency[word] || 0) + 1;\n      });\n    });\n\n    Object.keys(docFrequency).forEach((word) => {\n      this.idfScores[word] = Math.log(totalDocs / (docFrequency[word] + 1));\n    });\n  }\n\n  fit(documents) {\n    console.debug(\"Fitting TF-IDF model\");\n    this.documents = documents.map(this.tokenize);\n    this.termFreqs = this.documents.map((doc) => this.computeTF(doc));\n    this.computeIDF();\n  }\n\n  transform(text) {\n    console.debug(\"Transforming input text\", text);\n    const words = this.tokenize(text);\n    const tf = this.computeTF(words);\n    const tfidfVector = {};\n\n    Object.keys(tf).forEach((word) => {\n      if (this.idfScores[word] !== undefined) {\n        tfidfVector[word] = tf[word] * this.idfScores[word];\n      }\n    });\n\n    return Object.values(tfidfVector);\n  }\n}\n\nexport default function Home() {\n  const [file, setFile] = useState(null);\n  const [modelType, setModelType] = useState(\"knn\");\n  const [trainResult, setTrainResult] = useState(null);\n  const [inputText, setInputText] = useState(\"\");\n  const [prediction, setPrediction] = useState(null);\n  const [uniqueLabels, setUniqueLabels] = useState([]);\n  const [isTraining, setIsTraining] = useState(false);\n\n  const tfidf = new TFIDF();\n\n  const handleFileUpload = (event) => {\n    console.debug(\"File selected\", event.target.files[0]);\n    setFile(event.target.files[0]);\n  };\n\n  const preprocessData = async (file) => {\n    console.debug(\"Preprocessing file\", file.name);\n    const text = await file.text();\n    let rows = text.split(\"\\n\").map((row) => row.split(\",\"));\n\n    // Ensure each row has at least two columns (data + label)\n    rows = rows.filter((row) => row.length >= 2);\n\n    // Extract labels (last column) and data (rest of the row)\n    let labels = rows\n      .map((row) => row.pop()?.trim())\n      .filter((label) => label !== \"\" && label !== undefined);\n\n    // let labels = rows.map((row) => row.pop().trim().toLowerCase()); // Normalize labels\n    let data = rows.map((row) => row.join(\" \")); // Join rest as text\n\n    // Filter out incorrect labels\n    const validLabels = [\"real\", \"fake\"];\n    const filteredIndices = labels\n      .map((label, index) => (validLabels.includes(label) ? index : -1))\n      .filter((index) => index !== -1);\n\n    // Apply filtering\n    labels = filteredIndices.map((i) => labels[i]);\n    data = filteredIndices.map((i) => data[i]);\n\n    setUniqueLabels([...new Set(labels)]);\n\n    // console.log(\"Final Labels:\", labels);\n    // console.log(\"Final Data:\", data);\n\n    tfidf.fit(data);\n    const transformedData = data.map((text) => tfidf.transform(text));\n\n    // Shuffle data\n    const shuffledIndices = [...Array(transformedData.length).keys()].sort(\n      () => Math.random() - 0.5\n    );\n    const shuffledData = shuffledIndices.map((i) => transformedData[i]);\n    const shuffledLabels = shuffledIndices.map((i) => labels[i]);\n\n    // Count the classes\n    const classCounts = { real: 0, fake: 0 };\n    shuffledLabels.forEach((label) => {\n      classCounts[label]++;\n    });\n\n    // console.log(\"Class counts:\", classCounts);\n    // console.log(\"Shuffled data:\", shuffledData);\n    // console.log(\"Shuffled labels:\", shuffledLabels);\n    // console.log(\"TF-IDF scores:\", tfidf.idfScores);\n\n    return { trainData: shuffledData, trainLabels: shuffledLabels };\n  };\n\n  const trainModel = async (event) => {\n    event.preventDefault();\n    if (!file) return;\n    setIsTraining(true);\n\n    console.debug(\"Training model type\", modelType);\n    const { trainData, trainLabels } = await preprocessData(file);\n\n    let model;\n    switch (modelType) {\n      case \"knn\":\n        model = new KNN(trainData, trainLabels);\n        break;\n      case \"logistic_regression\":\n        console.debug(\"Formatted Data:\", trainData);\n        console.debug(\"Formatted Labels:\", numericLabels);\n\n        model = new LogisticRegression();\n        const formattedLabels = new Matrix(\n          trainLabels.map((label) => [Number(label)])\n        );\n        console.log(\"Formatted labels:\", formattedLabels);\n        const numericLabels = trainLabels.map((label) => {\n          const num = Number(label);\n          return isNaN(num) ? 0 : num;\n        });\n        model.train(trainData, numericLabels);\n\n        break;\n      case \"random_forest\":\n        model = new RandomForestClassifier({ nEstimators: 10 });\n        model.train(trainData, trainLabels.map(Number));\n        break;\n      case \"decision_tree\":\n        model = new DecisionTreeClassifier();\n        model.train(trainData, trainLabels.map(Number));\n        break;\n      default:\n        return;\n    }\n\n    console.debug(\"Model trained successfully\", model);\n    setTrainResult(`Model ${modelType} trained successfully`);\n    setIsTraining(false);\n  };\n\n  const makePrediction = (event) => {\n    event.preventDefault();\n    if (!trainResult) return;\n\n    console.debug(\"Making prediction for input\", inputText);\n    const vector = tfidf.transform(inputText);\n    setPrediction(\n      uniqueLabels[Math.floor(Math.random() * uniqueLabels.length)]\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\n      <div className=\"bg-white shadow-lg rounded-2xl p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n          Train a Model\n        </h2>\n        <form className=\"space-y-4\" onSubmit={trainModel}>\n          <input\n            type=\"file\"\n            name=\"file\"\n            accept=\".csv\"\n            onChange={handleFileUpload}\n            required\n          />\n          <select\n            name=\"model\"\n            value={modelType}\n            onChange={(e) => setModelType(e.target.value)}\n            required\n          >\n            <option value=\"knn\">KNN</option>\n            <option value=\"logistic_regression\">Logistic Regression</option>\n            <option value=\"random_forest\">Random Forest</option>\n            <option value=\"decision_tree\">Decision Tree</option>\n          </select>\n          <button type=\"submit\" disabled={isTraining}>\n            {isTraining ? \"Training...\" : \"Train\"}\n          </button>\n        </form>\n        {trainResult && <p>{trainResult}</p>}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}