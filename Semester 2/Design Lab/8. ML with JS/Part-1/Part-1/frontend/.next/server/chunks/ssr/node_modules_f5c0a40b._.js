module.exports = {

"[project]/node_modules/next/dist/lib/metadata/get-metadata-route.js [app-rsc] (ecmascript, Next.js server utility)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/next/dist/lib/metadata/get-metadata-route.js [app-rsc] (ecmascript)"));}}),
"[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript)"));
}}),
"[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript)"));
}}),
"[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript)"));
}}),
"[project]/node_modules/ml-distance-euclidean/lib-es6/euclidean.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "euclidean": (()=>euclidean),
    "squaredEuclidean": (()=>squaredEuclidean)
});
function squaredEuclidean(p, q) {
    let d = 0;
    for(let i = 0; i < p.length; i++){
        d += (p[i] - q[i]) * (p[i] - q[i]);
    }
    return d;
}
function euclidean(p, q) {
    return Math.sqrt(squaredEuclidean(p, q));
}
}}),
"[project]/node_modules/ml-knn/src/KDTree.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Original code from:
 *
 * k-d Tree JavaScript - V 1.01
 *
 * https://github.com/ubilabs/kd-tree-javascript
 *
 * @author Mircea Pricop <pricop@ubilabs.net>, 2012
 * @author Martin Kleppe <kleppe@ubilabs.net>, 2012
 * @author Ubilabs http://ubilabs.net, 2012
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 */ __turbopack_context__.s({
    "default": (()=>KDTree)
});
function Node(obj, dimension, parent) {
    this.obj = obj;
    this.left = null;
    this.right = null;
    this.parent = parent;
    this.dimension = dimension;
}
class KDTree {
    constructor(points, metric){
        // If points is not an array, assume we're loading a pre-built tree
        if (!Array.isArray(points)) {
            this.dimensions = points.dimensions;
            this.root = points;
            restoreParent(this.root);
        } else {
            this.dimensions = new Array(points[0].length);
            for(var i = 0; i < this.dimensions.length; i++){
                this.dimensions[i] = i;
            }
            this.root = buildTree(points, 0, null, this.dimensions);
        }
        this.metric = metric;
    }
    // Convert to a JSON serializable structure; this just requires removing
    // the `parent` property
    toJSON() {
        const result = toJSONImpl(this.root, true);
        result.dimensions = this.dimensions;
        return result;
    }
    nearest(point, maxNodes, maxDistance) {
        const metric = this.metric;
        const dimensions = this.dimensions;
        var i;
        const bestNodes = new BinaryHeap(function(e) {
            return -e[1];
        });
        function nearestSearch(node) {
            const dimension = dimensions[node.dimension];
            const ownDistance = metric(point, node.obj);
            const linearPoint = {};
            var bestChild, linearDistance, otherChild, i;
            function saveNode(node, distance) {
                bestNodes.push([
                    node,
                    distance
                ]);
                if (bestNodes.size() > maxNodes) {
                    bestNodes.pop();
                }
            }
            for(i = 0; i < dimensions.length; i += 1){
                if (i === node.dimension) {
                    linearPoint[dimensions[i]] = point[dimensions[i]];
                } else {
                    linearPoint[dimensions[i]] = node.obj[dimensions[i]];
                }
            }
            linearDistance = metric(linearPoint, node.obj);
            if (node.right === null && node.left === null) {
                if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {
                    saveNode(node, ownDistance);
                }
                return;
            }
            if (node.right === null) {
                bestChild = node.left;
            } else if (node.left === null) {
                bestChild = node.right;
            } else {
                if (point[dimension] < node.obj[dimension]) {
                    bestChild = node.left;
                } else {
                    bestChild = node.right;
                }
            }
            nearestSearch(bestChild);
            if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {
                saveNode(node, ownDistance);
            }
            if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {
                if (bestChild === node.left) {
                    otherChild = node.right;
                } else {
                    otherChild = node.left;
                }
                if (otherChild !== null) {
                    nearestSearch(otherChild);
                }
            }
        }
        if (maxDistance) {
            for(i = 0; i < maxNodes; i += 1){
                bestNodes.push([
                    null,
                    maxDistance
                ]);
            }
        }
        if (this.root) {
            nearestSearch(this.root);
        }
        const result = [];
        for(i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1){
            if (bestNodes.content[i][0]) {
                result.push([
                    bestNodes.content[i][0].obj,
                    bestNodes.content[i][1]
                ]);
            }
        }
        return result;
    }
}
function toJSONImpl(src) {
    const dest = new Node(src.obj, src.dimension, null);
    if (src.left) dest.left = toJSONImpl(src.left);
    if (src.right) dest.right = toJSONImpl(src.right);
    return dest;
}
function buildTree(points, depth, parent, dimensions) {
    const dim = depth % dimensions.length;
    if (points.length === 0) {
        return null;
    }
    if (points.length === 1) {
        return new Node(points[0], dim, parent);
    }
    points.sort((a, b)=>a[dimensions[dim]] - b[dimensions[dim]]);
    const median = Math.floor(points.length / 2);
    const node = new Node(points[median], dim, parent);
    node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);
    node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);
    return node;
}
function restoreParent(root) {
    if (root.left) {
        root.left.parent = root;
        restoreParent(root.left);
    }
    if (root.right) {
        root.right.parent = root;
        restoreParent(root.right);
    }
}
// Binary heap implementation from:
// http://eloquentjavascript.net/appendix2.html
class BinaryHeap {
    constructor(scoreFunction){
        this.content = [];
        this.scoreFunction = scoreFunction;
    }
    push(element) {
        // Add the new element to the end of the array.
        this.content.push(element);
        // Allow it to bubble up.
        this.bubbleUp(this.content.length - 1);
    }
    pop() {
        // Store the first element so we can return it later.
        var result = this.content[0];
        // Get the element at the end of the array.
        var end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it sink down.
        if (this.content.length > 0) {
            this.content[0] = end;
            this.sinkDown(0);
        }
        return result;
    }
    peek() {
        return this.content[0];
    }
    size() {
        return this.content.length;
    }
    bubbleUp(n) {
        // Fetch the element that has to be moved.
        var element = this.content[n];
        // When at 0, an element can not go up any further.
        while(n > 0){
            // Compute the parent element's index, and fetch it.
            const parentN = Math.floor((n + 1) / 2) - 1;
            const parent = this.content[parentN];
            // Swap the elements if the parent is greater.
            if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                this.content[parentN] = element;
                this.content[n] = parent;
                // Update 'n' to continue at the new position.
                n = parentN;
            } else {
                break;
            }
        }
    }
    sinkDown(n) {
        // Look up the target element and its score.
        var length = this.content.length;
        var element = this.content[n];
        var elemScore = this.scoreFunction(element);
        while(true){
            // Compute the indices of the child elements.
            var child2N = (n + 1) * 2;
            var child1N = child2N - 1;
            // This is used to store the new position of the element,
            // if any.
            var swap = null;
            // If the first child exists (is inside the array)...
            if (child1N < length) {
                // Look it up and compute its score.
                var child1 = this.content[child1N];
                var child1Score = this.scoreFunction(child1);
                // If the score is less than our element's, we need to swap.
                if (child1Score < elemScore) {
                    swap = child1N;
                }
            }
            // Do the same checks for the other child.
            if (child2N < length) {
                var child2 = this.content[child2N];
                var child2Score = this.scoreFunction(child2);
                if (child2Score < (swap === null ? elemScore : child1Score)) {
                    swap = child2N;
                }
            }
            // If the element needs to be moved, swap it, and continue.
            if (swap !== null) {
                this.content[n] = this.content[swap];
                this.content[swap] = element;
                n = swap;
            } else {
                break;
            }
        }
    }
}
}}),
"[project]/node_modules/ml-knn/src/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>KNN)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$distance$2d$euclidean$2f$lib$2d$es6$2f$euclidean$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-distance-euclidean/lib-es6/euclidean.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$knn$2f$src$2f$KDTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-knn/src/KDTree.js [app-rsc] (ecmascript)");
;
;
class KNN {
    /**
   * @param {Array} dataset
   * @param {Array} labels
   * @param {object} options
   * @param {number} [options.k=numberOfClasses + 1] - Number of neighbors to classify.
   * @param {function} [options.distance=euclideanDistance] - Distance function that takes two parameters.
   */ constructor(dataset, labels, options = {}){
        if (dataset === true) {
            const model = labels;
            this.kdTree = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$knn$2f$src$2f$KDTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"](model.kdTree, options);
            this.k = model.k;
            this.classes = new Set(model.classes);
            this.isEuclidean = model.isEuclidean;
            return;
        }
        const classes = new Set(labels);
        const { distance = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$distance$2d$euclidean$2f$lib$2d$es6$2f$euclidean$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["euclidean"], k = classes.size + 1 } = options;
        const points = new Array(dataset.length);
        for(var i = 0; i < points.length; ++i){
            points[i] = dataset[i].slice();
        }
        for(i = 0; i < labels.length; ++i){
            points[i].push(labels[i]);
        }
        this.kdTree = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$knn$2f$src$2f$KDTree$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"](points, distance);
        this.k = k;
        this.classes = classes;
        this.isEuclidean = distance === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$distance$2d$euclidean$2f$lib$2d$es6$2f$euclidean$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["euclidean"];
    }
    /**
   * Create a new KNN instance with the given model.
   * @param {object} model
   * @param {function} distance=euclideanDistance - distance function must be provided if the model wasn't trained with euclidean distance.
   * @return {KNN}
   */ static load(model, distance = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$distance$2d$euclidean$2f$lib$2d$es6$2f$euclidean$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["euclidean"]) {
        if (model.name !== 'KNN') {
            throw new Error(`invalid model: ${model.name}`);
        }
        if (!model.isEuclidean && distance === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$distance$2d$euclidean$2f$lib$2d$es6$2f$euclidean$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["euclidean"]) {
            throw new Error('a custom distance function was used to create the model. Please provide it again');
        }
        if (model.isEuclidean && distance !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$distance$2d$euclidean$2f$lib$2d$es6$2f$euclidean$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["euclidean"]) {
            throw new Error('the model was created with the default distance function. Do not load it with another one');
        }
        return new KNN(true, model, distance);
    }
    /**
   * Return a JSON containing the kd-tree model.
   * @return {object} JSON KNN model.
   */ toJSON() {
        return {
            name: 'KNN',
            kdTree: this.kdTree,
            k: this.k,
            classes: Array.from(this.classes),
            isEuclidean: this.isEuclidean
        };
    }
    /**
   * Predicts the output given the matrix to predict.
   * @param {Array} dataset
   * @return {Array} predictions
   */ predict(dataset) {
        if (Array.isArray(dataset)) {
            if (typeof dataset[0] === 'number') {
                return getSinglePrediction(this, dataset);
            } else if (Array.isArray(dataset[0]) && typeof dataset[0][0] === 'number') {
                const predictions = new Array(dataset.length);
                for(var i = 0; i < dataset.length; i++){
                    predictions[i] = getSinglePrediction(this, dataset[i]);
                }
                return predictions;
            }
        }
        throw new TypeError('dataset to predict must be an array or a matrix');
    }
}
function getSinglePrediction(knn, currentCase) {
    var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);
    var pointsPerClass = {};
    var predictedClass = -1;
    var maxPoints = -1;
    var lastElement = nearestPoints[0][0].length - 1;
    for (var element of knn.classes){
        pointsPerClass[element] = 0;
    }
    for(var i = 0; i < nearestPoints.length; ++i){
        var currentClass = nearestPoints[i][0][lastElement];
        var currentPoints = ++pointsPerClass[currentClass];
        if (currentPoints > maxPoints) {
            predictedClass = currentClass;
            maxPoints = currentPoints;
        }
    }
    return predictedClass;
}
}}),
"[project]/node_modules/is-any-array/lib-esm/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// eslint-disable-next-line @typescript-eslint/unbound-method
__turbopack_context__.s({
    "isAnyArray": (()=>isAnyArray)
});
const toString = Object.prototype.toString;
function isAnyArray(value) {
    const tag = toString.call(value);
    return tag.endsWith('Array]') && !tag.includes('Big');
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/ml-array-max/lib-es6/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>max)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/is-any-array/lib-esm/index.js [app-rsc] (ecmascript)");
;
function max(input) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAnyArray"])(input)) {
        throw new TypeError('input must be an array');
    }
    if (input.length === 0) {
        throw new TypeError('input must not be empty');
    }
    var _options$fromIndex = options.fromIndex, fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex, _options$toIndex = options.toIndex, toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;
    if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {
        throw new Error('fromIndex must be a positive integer smaller than length');
    }
    if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {
        throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');
    }
    var maxValue = input[fromIndex];
    for(var i = fromIndex + 1; i < toIndex; i++){
        if (input[i] > maxValue) maxValue = input[i];
    }
    return maxValue;
}
;
}}),
"[project]/node_modules/ml-array-min/lib-es6/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>min)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/is-any-array/lib-esm/index.js [app-rsc] (ecmascript)");
;
function min(input) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAnyArray"])(input)) {
        throw new TypeError('input must be an array');
    }
    if (input.length === 0) {
        throw new TypeError('input must not be empty');
    }
    var _options$fromIndex = options.fromIndex, fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex, _options$toIndex = options.toIndex, toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;
    if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {
        throw new Error('fromIndex must be a positive integer smaller than length');
    }
    if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {
        throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');
    }
    var minValue = input[fromIndex];
    for(var i = fromIndex + 1; i < toIndex; i++){
        if (input[i] < minValue) minValue = input[i];
    }
    return minValue;
}
;
}}),
"[project]/node_modules/ml-array-rescale/lib-es6/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>rescale)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/is-any-array/lib-esm/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$max$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-array-max/lib-es6/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$min$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-array-min/lib-es6/index.js [app-rsc] (ecmascript)");
;
;
;
function rescale(input) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAnyArray"])(input)) {
        throw new TypeError('input must be an array');
    } else if (input.length === 0) {
        throw new TypeError('input must not be empty');
    }
    var output;
    if (options.output !== undefined) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAnyArray"])(options.output)) {
            throw new TypeError('output option must be an array if specified');
        }
        output = options.output;
    } else {
        output = new Array(input.length);
    }
    var currentMin = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$min$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(input);
    var currentMax = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$max$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(input);
    if (currentMin === currentMax) {
        throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');
    }
    var _options$min = options.min, minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min, _options$max = options.max, maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;
    if (minValue >= maxValue) {
        throw new RangeError('min option must be smaller than max option');
    }
    var factor = (maxValue - minValue) / (currentMax - currentMin);
    for(var i = 0; i < input.length; i++){
        output[i] = (input[i] - currentMin) * factor + minValue;
    }
    return output;
}
;
}}),
"[project]/node_modules/ml-matrix/matrix.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var isAnyArray = __turbopack_context__.r("[project]/node_modules/is-any-array/lib-esm/index.js [app-rsc] (ecmascript)");
var rescale = __turbopack_context__.r("[project]/node_modules/ml-array-rescale/lib-es6/index.js [app-rsc] (ecmascript)");
const indent = ' '.repeat(2);
const indentData = ' '.repeat(4);
/**
 * @this {Matrix}
 * @returns {string}
 */ function inspectMatrix() {
    return inspectMatrixWithOptions(this);
}
function inspectMatrixWithOptions(matrix, options = {}) {
    const { maxRows = 15, maxColumns = 10, maxNumSize = 8, padMinus = 'auto' } = options;
    return `${matrix.constructor.name} {
${indent}[
${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}
${indent}]
${indent}rows: ${matrix.rows}
${indent}columns: ${matrix.columns}
}`;
}
function inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {
    const { rows, columns } = matrix;
    const maxI = Math.min(rows, maxRows);
    const maxJ = Math.min(columns, maxColumns);
    const result = [];
    if (padMinus === 'auto') {
        padMinus = false;
        loop: for(let i = 0; i < maxI; i++){
            for(let j = 0; j < maxJ; j++){
                if (matrix.get(i, j) < 0) {
                    padMinus = true;
                    break loop;
                }
            }
        }
    }
    for(let i = 0; i < maxI; i++){
        let line = [];
        for(let j = 0; j < maxJ; j++){
            line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));
        }
        result.push(`${line.join(' ')}`);
    }
    if (maxJ !== columns) {
        result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;
    }
    if (maxI !== rows) {
        result.push(`... ${rows - maxRows} more rows`);
    }
    return result.join(`\n${indentData}`);
}
function formatNumber(num, maxNumSize, padMinus) {
    return (num >= 0 && padMinus ? ` ${formatNumber2(num, maxNumSize - 1)}` : formatNumber2(num, maxNumSize)).padEnd(maxNumSize);
}
function formatNumber2(num, len) {
    // small.length numbers should be as is
    let str = num.toString();
    if (str.length <= len) return str;
    // (7)'0.00123' is better then (7)'1.23e-2'
    // (8)'0.000123' is worse then (7)'1.23e-3',
    let fix = num.toFixed(len);
    if (fix.length > len) {
        fix = num.toFixed(Math.max(0, len - (fix.length - len)));
    }
    if (fix.length <= len && !fix.startsWith('0.000') && !fix.startsWith('-0.000')) {
        return fix;
    }
    // well, if it's still too long the user should've used longer numbers
    let exp = num.toExponential(len);
    if (exp.length > len) {
        exp = num.toExponential(Math.max(0, len - (exp.length - len)));
    }
    return exp.slice(0);
}
function installMathOperations(AbstractMatrix, Matrix) {
    AbstractMatrix.prototype.add = function add(value) {
        if (typeof value === 'number') return this.addS(value);
        return this.addM(value);
    };
    AbstractMatrix.prototype.addS = function addS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) + value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.addM = function addM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) + matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.add = function add(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.add(value);
    };
    AbstractMatrix.prototype.sub = function sub(value) {
        if (typeof value === 'number') return this.subS(value);
        return this.subM(value);
    };
    AbstractMatrix.prototype.subS = function subS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) - value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.subM = function subM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) - matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.sub = function sub(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.sub(value);
    };
    AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;
    AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;
    AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;
    AbstractMatrix.subtract = AbstractMatrix.sub;
    AbstractMatrix.prototype.mul = function mul(value) {
        if (typeof value === 'number') return this.mulS(value);
        return this.mulM(value);
    };
    AbstractMatrix.prototype.mulS = function mulS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) * value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.mulM = function mulM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) * matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.mul = function mul(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.mul(value);
    };
    AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;
    AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;
    AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;
    AbstractMatrix.multiply = AbstractMatrix.mul;
    AbstractMatrix.prototype.div = function div(value) {
        if (typeof value === 'number') return this.divS(value);
        return this.divM(value);
    };
    AbstractMatrix.prototype.divS = function divS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) / value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.divM = function divM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) / matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.div = function div(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.div(value);
    };
    AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;
    AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;
    AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;
    AbstractMatrix.divide = AbstractMatrix.div;
    AbstractMatrix.prototype.mod = function mod(value) {
        if (typeof value === 'number') return this.modS(value);
        return this.modM(value);
    };
    AbstractMatrix.prototype.modS = function modS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) % value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.modM = function modM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) % matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.mod = function mod(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.mod(value);
    };
    AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;
    AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;
    AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;
    AbstractMatrix.modulus = AbstractMatrix.mod;
    AbstractMatrix.prototype.and = function and(value) {
        if (typeof value === 'number') return this.andS(value);
        return this.andM(value);
    };
    AbstractMatrix.prototype.andS = function andS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) & value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.andM = function andM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) & matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.and = function and(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.and(value);
    };
    AbstractMatrix.prototype.or = function or(value) {
        if (typeof value === 'number') return this.orS(value);
        return this.orM(value);
    };
    AbstractMatrix.prototype.orS = function orS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) | value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.orM = function orM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) | matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.or = function or(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.or(value);
    };
    AbstractMatrix.prototype.xor = function xor(value) {
        if (typeof value === 'number') return this.xorS(value);
        return this.xorM(value);
    };
    AbstractMatrix.prototype.xorS = function xorS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) ^ value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.xorM = function xorM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) ^ matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.xor = function xor(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.xor(value);
    };
    AbstractMatrix.prototype.leftShift = function leftShift(value) {
        if (typeof value === 'number') return this.leftShiftS(value);
        return this.leftShiftM(value);
    };
    AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) << value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) << matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.leftShift = function leftShift(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.leftShift(value);
    };
    AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {
        if (typeof value === 'number') return this.signPropagatingRightShiftS(value);
        return this.signPropagatingRightShiftM(value);
    };
    AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) >> value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) >> matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.signPropagatingRightShift(value);
    };
    AbstractMatrix.prototype.rightShift = function rightShift(value) {
        if (typeof value === 'number') return this.rightShiftS(value);
        return this.rightShiftM(value);
    };
    AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) >>> value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) >>> matrix.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.rightShift = function rightShift(matrix, value) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.rightShift(value);
    };
    AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;
    AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;
    AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;
    AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;
    AbstractMatrix.prototype.not = function not() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, ~this.get(i, j));
            }
        }
        return this;
    };
    AbstractMatrix.not = function not(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.not();
    };
    AbstractMatrix.prototype.abs = function abs() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.abs(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.abs = function abs(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.abs();
    };
    AbstractMatrix.prototype.acos = function acos() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.acos(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.acos = function acos(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.acos();
    };
    AbstractMatrix.prototype.acosh = function acosh() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.acosh(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.acosh = function acosh(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.acosh();
    };
    AbstractMatrix.prototype.asin = function asin() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.asin(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.asin = function asin(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.asin();
    };
    AbstractMatrix.prototype.asinh = function asinh() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.asinh(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.asinh = function asinh(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.asinh();
    };
    AbstractMatrix.prototype.atan = function atan() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.atan(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.atan = function atan(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.atan();
    };
    AbstractMatrix.prototype.atanh = function atanh() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.atanh(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.atanh = function atanh(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.atanh();
    };
    AbstractMatrix.prototype.cbrt = function cbrt() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.cbrt(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.cbrt = function cbrt(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.cbrt();
    };
    AbstractMatrix.prototype.ceil = function ceil() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.ceil(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.ceil = function ceil(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.ceil();
    };
    AbstractMatrix.prototype.clz32 = function clz32() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.clz32(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.clz32 = function clz32(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.clz32();
    };
    AbstractMatrix.prototype.cos = function cos() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.cos(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.cos = function cos(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.cos();
    };
    AbstractMatrix.prototype.cosh = function cosh() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.cosh(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.cosh = function cosh(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.cosh();
    };
    AbstractMatrix.prototype.exp = function exp() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.exp(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.exp = function exp(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.exp();
    };
    AbstractMatrix.prototype.expm1 = function expm1() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.expm1(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.expm1 = function expm1(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.expm1();
    };
    AbstractMatrix.prototype.floor = function floor() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.floor(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.floor = function floor(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.floor();
    };
    AbstractMatrix.prototype.fround = function fround() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.fround(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.fround = function fround(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.fround();
    };
    AbstractMatrix.prototype.log = function log() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.log(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.log = function log(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.log();
    };
    AbstractMatrix.prototype.log1p = function log1p() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.log1p(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.log1p = function log1p(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.log1p();
    };
    AbstractMatrix.prototype.log10 = function log10() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.log10(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.log10 = function log10(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.log10();
    };
    AbstractMatrix.prototype.log2 = function log2() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.log2(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.log2 = function log2(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.log2();
    };
    AbstractMatrix.prototype.round = function round() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.round(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.round = function round(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.round();
    };
    AbstractMatrix.prototype.sign = function sign() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.sign(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.sign = function sign(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.sign();
    };
    AbstractMatrix.prototype.sin = function sin() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.sin(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.sin = function sin(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.sin();
    };
    AbstractMatrix.prototype.sinh = function sinh() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.sinh(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.sinh = function sinh(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.sinh();
    };
    AbstractMatrix.prototype.sqrt = function sqrt() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.sqrt(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.sqrt = function sqrt(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.sqrt();
    };
    AbstractMatrix.prototype.tan = function tan() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.tan(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.tan = function tan(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.tan();
    };
    AbstractMatrix.prototype.tanh = function tanh() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.tanh(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.tanh = function tanh(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.tanh();
    };
    AbstractMatrix.prototype.trunc = function trunc() {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, Math.trunc(this.get(i, j)));
            }
        }
        return this;
    };
    AbstractMatrix.trunc = function trunc(matrix) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.trunc();
    };
    AbstractMatrix.pow = function pow(matrix, arg0) {
        const newMatrix = new Matrix(matrix);
        return newMatrix.pow(arg0);
    };
    AbstractMatrix.prototype.pow = function pow(value) {
        if (typeof value === 'number') return this.powS(value);
        return this.powM(value);
    };
    AbstractMatrix.prototype.powS = function powS(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) ** value);
            }
        }
        return this;
    };
    AbstractMatrix.prototype.powM = function powM(matrix) {
        matrix = Matrix.checkMatrix(matrix);
        if (this.rows !== matrix.rows || this.columns !== matrix.columns) {
            throw new RangeError('Matrices dimensions must be equal');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) ** matrix.get(i, j));
            }
        }
        return this;
    };
}
/**
 * @private
 * Check that a row index is not out of bounds
 * @param {Matrix} matrix
 * @param {number} index
 * @param {boolean} [outer]
 */ function checkRowIndex(matrix, index, outer) {
    let max = outer ? matrix.rows : matrix.rows - 1;
    if (index < 0 || index > max) {
        throw new RangeError('Row index out of range');
    }
}
/**
 * @private
 * Check that a column index is not out of bounds
 * @param {Matrix} matrix
 * @param {number} index
 * @param {boolean} [outer]
 */ function checkColumnIndex(matrix, index, outer) {
    let max = outer ? matrix.columns : matrix.columns - 1;
    if (index < 0 || index > max) {
        throw new RangeError('Column index out of range');
    }
}
/**
 * @private
 * Check that the provided vector is an array with the right length
 * @param {Matrix} matrix
 * @param {Array|Matrix} vector
 * @return {Array}
 * @throws {RangeError}
 */ function checkRowVector(matrix, vector) {
    if (vector.to1DArray) {
        vector = vector.to1DArray();
    }
    if (vector.length !== matrix.columns) {
        throw new RangeError('vector size must be the same as the number of columns');
    }
    return vector;
}
/**
 * @private
 * Check that the provided vector is an array with the right length
 * @param {Matrix} matrix
 * @param {Array|Matrix} vector
 * @return {Array}
 * @throws {RangeError}
 */ function checkColumnVector(matrix, vector) {
    if (vector.to1DArray) {
        vector = vector.to1DArray();
    }
    if (vector.length !== matrix.rows) {
        throw new RangeError('vector size must be the same as the number of rows');
    }
    return vector;
}
function checkRowIndices(matrix, rowIndices) {
    if (!isAnyArray.isAnyArray(rowIndices)) {
        throw new TypeError('row indices must be an array');
    }
    for(let i = 0; i < rowIndices.length; i++){
        if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {
            throw new RangeError('row indices are out of range');
        }
    }
}
function checkColumnIndices(matrix, columnIndices) {
    if (!isAnyArray.isAnyArray(columnIndices)) {
        throw new TypeError('column indices must be an array');
    }
    for(let i = 0; i < columnIndices.length; i++){
        if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {
            throw new RangeError('column indices are out of range');
        }
    }
}
function checkRange(matrix, startRow, endRow, startColumn, endColumn) {
    if (arguments.length !== 5) {
        throw new RangeError('expected 4 arguments');
    }
    checkNumber('startRow', startRow);
    checkNumber('endRow', endRow);
    checkNumber('startColumn', startColumn);
    checkNumber('endColumn', endColumn);
    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {
        throw new RangeError('Submatrix indices are out of range');
    }
}
function newArray(length, value = 0) {
    let array = [];
    for(let i = 0; i < length; i++){
        array.push(value);
    }
    return array;
}
function checkNumber(name, value) {
    if (typeof value !== 'number') {
        throw new TypeError(`${name} must be a number`);
    }
}
function checkNonEmpty(matrix) {
    if (matrix.isEmpty()) {
        throw new Error('Empty matrix has no elements to index');
    }
}
function sumByRow(matrix) {
    let sum = newArray(matrix.rows);
    for(let i = 0; i < matrix.rows; ++i){
        for(let j = 0; j < matrix.columns; ++j){
            sum[i] += matrix.get(i, j);
        }
    }
    return sum;
}
function sumByColumn(matrix) {
    let sum = newArray(matrix.columns);
    for(let i = 0; i < matrix.rows; ++i){
        for(let j = 0; j < matrix.columns; ++j){
            sum[j] += matrix.get(i, j);
        }
    }
    return sum;
}
function sumAll(matrix) {
    let v = 0;
    for(let i = 0; i < matrix.rows; i++){
        for(let j = 0; j < matrix.columns; j++){
            v += matrix.get(i, j);
        }
    }
    return v;
}
function productByRow(matrix) {
    let sum = newArray(matrix.rows, 1);
    for(let i = 0; i < matrix.rows; ++i){
        for(let j = 0; j < matrix.columns; ++j){
            sum[i] *= matrix.get(i, j);
        }
    }
    return sum;
}
function productByColumn(matrix) {
    let sum = newArray(matrix.columns, 1);
    for(let i = 0; i < matrix.rows; ++i){
        for(let j = 0; j < matrix.columns; ++j){
            sum[j] *= matrix.get(i, j);
        }
    }
    return sum;
}
function productAll(matrix) {
    let v = 1;
    for(let i = 0; i < matrix.rows; i++){
        for(let j = 0; j < matrix.columns; j++){
            v *= matrix.get(i, j);
        }
    }
    return v;
}
function varianceByRow(matrix, unbiased, mean) {
    const rows = matrix.rows;
    const cols = matrix.columns;
    const variance = [];
    for(let i = 0; i < rows; i++){
        let sum1 = 0;
        let sum2 = 0;
        let x = 0;
        for(let j = 0; j < cols; j++){
            x = matrix.get(i, j) - mean[i];
            sum1 += x;
            sum2 += x * x;
        }
        if (unbiased) {
            variance.push((sum2 - sum1 * sum1 / cols) / (cols - 1));
        } else {
            variance.push((sum2 - sum1 * sum1 / cols) / cols);
        }
    }
    return variance;
}
function varianceByColumn(matrix, unbiased, mean) {
    const rows = matrix.rows;
    const cols = matrix.columns;
    const variance = [];
    for(let j = 0; j < cols; j++){
        let sum1 = 0;
        let sum2 = 0;
        let x = 0;
        for(let i = 0; i < rows; i++){
            x = matrix.get(i, j) - mean[j];
            sum1 += x;
            sum2 += x * x;
        }
        if (unbiased) {
            variance.push((sum2 - sum1 * sum1 / rows) / (rows - 1));
        } else {
            variance.push((sum2 - sum1 * sum1 / rows) / rows);
        }
    }
    return variance;
}
function varianceAll(matrix, unbiased, mean) {
    const rows = matrix.rows;
    const cols = matrix.columns;
    const size = rows * cols;
    let sum1 = 0;
    let sum2 = 0;
    let x = 0;
    for(let i = 0; i < rows; i++){
        for(let j = 0; j < cols; j++){
            x = matrix.get(i, j) - mean;
            sum1 += x;
            sum2 += x * x;
        }
    }
    if (unbiased) {
        return (sum2 - sum1 * sum1 / size) / (size - 1);
    } else {
        return (sum2 - sum1 * sum1 / size) / size;
    }
}
function centerByRow(matrix, mean) {
    for(let i = 0; i < matrix.rows; i++){
        for(let j = 0; j < matrix.columns; j++){
            matrix.set(i, j, matrix.get(i, j) - mean[i]);
        }
    }
}
function centerByColumn(matrix, mean) {
    for(let i = 0; i < matrix.rows; i++){
        for(let j = 0; j < matrix.columns; j++){
            matrix.set(i, j, matrix.get(i, j) - mean[j]);
        }
    }
}
function centerAll(matrix, mean) {
    for(let i = 0; i < matrix.rows; i++){
        for(let j = 0; j < matrix.columns; j++){
            matrix.set(i, j, matrix.get(i, j) - mean);
        }
    }
}
function getScaleByRow(matrix) {
    const scale = [];
    for(let i = 0; i < matrix.rows; i++){
        let sum = 0;
        for(let j = 0; j < matrix.columns; j++){
            sum += matrix.get(i, j) ** 2 / (matrix.columns - 1);
        }
        scale.push(Math.sqrt(sum));
    }
    return scale;
}
function scaleByRow(matrix, scale) {
    for(let i = 0; i < matrix.rows; i++){
        for(let j = 0; j < matrix.columns; j++){
            matrix.set(i, j, matrix.get(i, j) / scale[i]);
        }
    }
}
function getScaleByColumn(matrix) {
    const scale = [];
    for(let j = 0; j < matrix.columns; j++){
        let sum = 0;
        for(let i = 0; i < matrix.rows; i++){
            sum += matrix.get(i, j) ** 2 / (matrix.rows - 1);
        }
        scale.push(Math.sqrt(sum));
    }
    return scale;
}
function scaleByColumn(matrix, scale) {
    for(let i = 0; i < matrix.rows; i++){
        for(let j = 0; j < matrix.columns; j++){
            matrix.set(i, j, matrix.get(i, j) / scale[j]);
        }
    }
}
function getScaleAll(matrix) {
    const divider = matrix.size - 1;
    let sum = 0;
    for(let j = 0; j < matrix.columns; j++){
        for(let i = 0; i < matrix.rows; i++){
            sum += matrix.get(i, j) ** 2 / divider;
        }
    }
    return Math.sqrt(sum);
}
function scaleAll(matrix, scale) {
    for(let i = 0; i < matrix.rows; i++){
        for(let j = 0; j < matrix.columns; j++){
            matrix.set(i, j, matrix.get(i, j) / scale);
        }
    }
}
class AbstractMatrix {
    static from1DArray(newRows, newColumns, newData) {
        let length = newRows * newColumns;
        if (length !== newData.length) {
            throw new RangeError('data length does not match given dimensions');
        }
        let newMatrix = new Matrix(newRows, newColumns);
        for(let row = 0; row < newRows; row++){
            for(let column = 0; column < newColumns; column++){
                newMatrix.set(row, column, newData[row * newColumns + column]);
            }
        }
        return newMatrix;
    }
    static rowVector(newData) {
        let vector = new Matrix(1, newData.length);
        for(let i = 0; i < newData.length; i++){
            vector.set(0, i, newData[i]);
        }
        return vector;
    }
    static columnVector(newData) {
        let vector = new Matrix(newData.length, 1);
        for(let i = 0; i < newData.length; i++){
            vector.set(i, 0, newData[i]);
        }
        return vector;
    }
    static zeros(rows, columns) {
        return new Matrix(rows, columns);
    }
    static ones(rows, columns) {
        return new Matrix(rows, columns).fill(1);
    }
    static rand(rows, columns, options = {}) {
        if (typeof options !== 'object') {
            throw new TypeError('options must be an object');
        }
        const { random = Math.random } = options;
        let matrix = new Matrix(rows, columns);
        for(let i = 0; i < rows; i++){
            for(let j = 0; j < columns; j++){
                matrix.set(i, j, random());
            }
        }
        return matrix;
    }
    static randInt(rows, columns, options = {}) {
        if (typeof options !== 'object') {
            throw new TypeError('options must be an object');
        }
        const { min = 0, max = 1000, random = Math.random } = options;
        if (!Number.isInteger(min)) throw new TypeError('min must be an integer');
        if (!Number.isInteger(max)) throw new TypeError('max must be an integer');
        if (min >= max) throw new RangeError('min must be smaller than max');
        let interval = max - min;
        let matrix = new Matrix(rows, columns);
        for(let i = 0; i < rows; i++){
            for(let j = 0; j < columns; j++){
                let value = min + Math.round(random() * interval);
                matrix.set(i, j, value);
            }
        }
        return matrix;
    }
    static eye(rows, columns, value) {
        if (columns === undefined) columns = rows;
        if (value === undefined) value = 1;
        let min = Math.min(rows, columns);
        let matrix = this.zeros(rows, columns);
        for(let i = 0; i < min; i++){
            matrix.set(i, i, value);
        }
        return matrix;
    }
    static diag(data, rows, columns) {
        let l = data.length;
        if (rows === undefined) rows = l;
        if (columns === undefined) columns = rows;
        let min = Math.min(l, rows, columns);
        let matrix = this.zeros(rows, columns);
        for(let i = 0; i < min; i++){
            matrix.set(i, i, data[i]);
        }
        return matrix;
    }
    static min(matrix1, matrix2) {
        matrix1 = this.checkMatrix(matrix1);
        matrix2 = this.checkMatrix(matrix2);
        let rows = matrix1.rows;
        let columns = matrix1.columns;
        let result = new Matrix(rows, columns);
        for(let i = 0; i < rows; i++){
            for(let j = 0; j < columns; j++){
                result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));
            }
        }
        return result;
    }
    static max(matrix1, matrix2) {
        matrix1 = this.checkMatrix(matrix1);
        matrix2 = this.checkMatrix(matrix2);
        let rows = matrix1.rows;
        let columns = matrix1.columns;
        let result = new this(rows, columns);
        for(let i = 0; i < rows; i++){
            for(let j = 0; j < columns; j++){
                result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));
            }
        }
        return result;
    }
    static checkMatrix(value) {
        return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);
    }
    static isMatrix(value) {
        return value != null && value.klass === 'Matrix';
    }
    get size() {
        return this.rows * this.columns;
    }
    apply(callback) {
        if (typeof callback !== 'function') {
            throw new TypeError('callback must be a function');
        }
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                callback.call(this, i, j);
            }
        }
        return this;
    }
    to1DArray() {
        let array = [];
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                array.push(this.get(i, j));
            }
        }
        return array;
    }
    to2DArray() {
        let copy = [];
        for(let i = 0; i < this.rows; i++){
            copy.push([]);
            for(let j = 0; j < this.columns; j++){
                copy[i].push(this.get(i, j));
            }
        }
        return copy;
    }
    toJSON() {
        return this.to2DArray();
    }
    isRowVector() {
        return this.rows === 1;
    }
    isColumnVector() {
        return this.columns === 1;
    }
    isVector() {
        return this.rows === 1 || this.columns === 1;
    }
    isSquare() {
        return this.rows === this.columns;
    }
    isEmpty() {
        return this.rows === 0 || this.columns === 0;
    }
    isSymmetric() {
        if (this.isSquare()) {
            for(let i = 0; i < this.rows; i++){
                for(let j = 0; j <= i; j++){
                    if (this.get(i, j) !== this.get(j, i)) {
                        return false;
                    }
                }
            }
            return true;
        }
        return false;
    }
    isDistance() {
        if (!this.isSymmetric()) return false;
        for(let i = 0; i < this.rows; i++){
            if (this.get(i, i) !== 0) return false;
        }
        return true;
    }
    isEchelonForm() {
        let i = 0;
        let j = 0;
        let previousColumn = -1;
        let isEchelonForm = true;
        let checked = false;
        while(i < this.rows && isEchelonForm){
            j = 0;
            checked = false;
            while(j < this.columns && checked === false){
                if (this.get(i, j) === 0) {
                    j++;
                } else if (this.get(i, j) === 1 && j > previousColumn) {
                    checked = true;
                    previousColumn = j;
                } else {
                    isEchelonForm = false;
                    checked = true;
                }
            }
            i++;
        }
        return isEchelonForm;
    }
    isReducedEchelonForm() {
        let i = 0;
        let j = 0;
        let previousColumn = -1;
        let isReducedEchelonForm = true;
        let checked = false;
        while(i < this.rows && isReducedEchelonForm){
            j = 0;
            checked = false;
            while(j < this.columns && checked === false){
                if (this.get(i, j) === 0) {
                    j++;
                } else if (this.get(i, j) === 1 && j > previousColumn) {
                    checked = true;
                    previousColumn = j;
                } else {
                    isReducedEchelonForm = false;
                    checked = true;
                }
            }
            for(let k = j + 1; k < this.rows; k++){
                if (this.get(i, k) !== 0) {
                    isReducedEchelonForm = false;
                }
            }
            i++;
        }
        return isReducedEchelonForm;
    }
    echelonForm() {
        let result = this.clone();
        let h = 0;
        let k = 0;
        while(h < result.rows && k < result.columns){
            let iMax = h;
            for(let i = h; i < result.rows; i++){
                if (result.get(i, k) > result.get(iMax, k)) {
                    iMax = i;
                }
            }
            if (result.get(iMax, k) === 0) {
                k++;
            } else {
                result.swapRows(h, iMax);
                let tmp = result.get(h, k);
                for(let j = k; j < result.columns; j++){
                    result.set(h, j, result.get(h, j) / tmp);
                }
                for(let i = h + 1; i < result.rows; i++){
                    let factor = result.get(i, k) / result.get(h, k);
                    result.set(i, k, 0);
                    for(let j = k + 1; j < result.columns; j++){
                        result.set(i, j, result.get(i, j) - result.get(h, j) * factor);
                    }
                }
                h++;
                k++;
            }
        }
        return result;
    }
    reducedEchelonForm() {
        let result = this.echelonForm();
        let m = result.columns;
        let n = result.rows;
        let h = n - 1;
        while(h >= 0){
            if (result.maxRow(h) === 0) {
                h--;
            } else {
                let p = 0;
                let pivot = false;
                while(p < n && pivot === false){
                    if (result.get(h, p) === 1) {
                        pivot = true;
                    } else {
                        p++;
                    }
                }
                for(let i = 0; i < h; i++){
                    let factor = result.get(i, p);
                    for(let j = p; j < m; j++){
                        let tmp = result.get(i, j) - factor * result.get(h, j);
                        result.set(i, j, tmp);
                    }
                }
                h--;
            }
        }
        return result;
    }
    set() {
        throw new Error('set method is unimplemented');
    }
    get() {
        throw new Error('get method is unimplemented');
    }
    repeat(options = {}) {
        if (typeof options !== 'object') {
            throw new TypeError('options must be an object');
        }
        const { rows = 1, columns = 1 } = options;
        if (!Number.isInteger(rows) || rows <= 0) {
            throw new TypeError('rows must be a positive integer');
        }
        if (!Number.isInteger(columns) || columns <= 0) {
            throw new TypeError('columns must be a positive integer');
        }
        let matrix = new Matrix(this.rows * rows, this.columns * columns);
        for(let i = 0; i < rows; i++){
            for(let j = 0; j < columns; j++){
                matrix.setSubMatrix(this, this.rows * i, this.columns * j);
            }
        }
        return matrix;
    }
    fill(value) {
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, value);
            }
        }
        return this;
    }
    neg() {
        return this.mulS(-1);
    }
    getRow(index) {
        checkRowIndex(this, index);
        let row = [];
        for(let i = 0; i < this.columns; i++){
            row.push(this.get(index, i));
        }
        return row;
    }
    getRowVector(index) {
        return Matrix.rowVector(this.getRow(index));
    }
    setRow(index, array) {
        checkRowIndex(this, index);
        array = checkRowVector(this, array);
        for(let i = 0; i < this.columns; i++){
            this.set(index, i, array[i]);
        }
        return this;
    }
    swapRows(row1, row2) {
        checkRowIndex(this, row1);
        checkRowIndex(this, row2);
        for(let i = 0; i < this.columns; i++){
            let temp = this.get(row1, i);
            this.set(row1, i, this.get(row2, i));
            this.set(row2, i, temp);
        }
        return this;
    }
    getColumn(index) {
        checkColumnIndex(this, index);
        let column = [];
        for(let i = 0; i < this.rows; i++){
            column.push(this.get(i, index));
        }
        return column;
    }
    getColumnVector(index) {
        return Matrix.columnVector(this.getColumn(index));
    }
    setColumn(index, array) {
        checkColumnIndex(this, index);
        array = checkColumnVector(this, array);
        for(let i = 0; i < this.rows; i++){
            this.set(i, index, array[i]);
        }
        return this;
    }
    swapColumns(column1, column2) {
        checkColumnIndex(this, column1);
        checkColumnIndex(this, column2);
        for(let i = 0; i < this.rows; i++){
            let temp = this.get(i, column1);
            this.set(i, column1, this.get(i, column2));
            this.set(i, column2, temp);
        }
        return this;
    }
    addRowVector(vector) {
        vector = checkRowVector(this, vector);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) + vector[j]);
            }
        }
        return this;
    }
    subRowVector(vector) {
        vector = checkRowVector(this, vector);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) - vector[j]);
            }
        }
        return this;
    }
    mulRowVector(vector) {
        vector = checkRowVector(this, vector);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) * vector[j]);
            }
        }
        return this;
    }
    divRowVector(vector) {
        vector = checkRowVector(this, vector);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) / vector[j]);
            }
        }
        return this;
    }
    addColumnVector(vector) {
        vector = checkColumnVector(this, vector);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) + vector[i]);
            }
        }
        return this;
    }
    subColumnVector(vector) {
        vector = checkColumnVector(this, vector);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) - vector[i]);
            }
        }
        return this;
    }
    mulColumnVector(vector) {
        vector = checkColumnVector(this, vector);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) * vector[i]);
            }
        }
        return this;
    }
    divColumnVector(vector) {
        vector = checkColumnVector(this, vector);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                this.set(i, j, this.get(i, j) / vector[i]);
            }
        }
        return this;
    }
    mulRow(index, value) {
        checkRowIndex(this, index);
        for(let i = 0; i < this.columns; i++){
            this.set(index, i, this.get(index, i) * value);
        }
        return this;
    }
    mulColumn(index, value) {
        checkColumnIndex(this, index);
        for(let i = 0; i < this.rows; i++){
            this.set(i, index, this.get(i, index) * value);
        }
        return this;
    }
    max(by) {
        if (this.isEmpty()) {
            return NaN;
        }
        switch(by){
            case 'row':
                {
                    const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);
                    for(let row = 0; row < this.rows; row++){
                        for(let column = 0; column < this.columns; column++){
                            if (this.get(row, column) > max[row]) {
                                max[row] = this.get(row, column);
                            }
                        }
                    }
                    return max;
                }
            case 'column':
                {
                    const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);
                    for(let row = 0; row < this.rows; row++){
                        for(let column = 0; column < this.columns; column++){
                            if (this.get(row, column) > max[column]) {
                                max[column] = this.get(row, column);
                            }
                        }
                    }
                    return max;
                }
            case undefined:
                {
                    let max = this.get(0, 0);
                    for(let row = 0; row < this.rows; row++){
                        for(let column = 0; column < this.columns; column++){
                            if (this.get(row, column) > max) {
                                max = this.get(row, column);
                            }
                        }
                    }
                    return max;
                }
            default:
                throw new Error(`invalid option: ${by}`);
        }
    }
    maxIndex() {
        checkNonEmpty(this);
        let v = this.get(0, 0);
        let idx = [
            0,
            0
        ];
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                if (this.get(i, j) > v) {
                    v = this.get(i, j);
                    idx[0] = i;
                    idx[1] = j;
                }
            }
        }
        return idx;
    }
    min(by) {
        if (this.isEmpty()) {
            return NaN;
        }
        switch(by){
            case 'row':
                {
                    const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);
                    for(let row = 0; row < this.rows; row++){
                        for(let column = 0; column < this.columns; column++){
                            if (this.get(row, column) < min[row]) {
                                min[row] = this.get(row, column);
                            }
                        }
                    }
                    return min;
                }
            case 'column':
                {
                    const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);
                    for(let row = 0; row < this.rows; row++){
                        for(let column = 0; column < this.columns; column++){
                            if (this.get(row, column) < min[column]) {
                                min[column] = this.get(row, column);
                            }
                        }
                    }
                    return min;
                }
            case undefined:
                {
                    let min = this.get(0, 0);
                    for(let row = 0; row < this.rows; row++){
                        for(let column = 0; column < this.columns; column++){
                            if (this.get(row, column) < min) {
                                min = this.get(row, column);
                            }
                        }
                    }
                    return min;
                }
            default:
                throw new Error(`invalid option: ${by}`);
        }
    }
    minIndex() {
        checkNonEmpty(this);
        let v = this.get(0, 0);
        let idx = [
            0,
            0
        ];
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                if (this.get(i, j) < v) {
                    v = this.get(i, j);
                    idx[0] = i;
                    idx[1] = j;
                }
            }
        }
        return idx;
    }
    maxRow(row) {
        checkRowIndex(this, row);
        if (this.isEmpty()) {
            return NaN;
        }
        let v = this.get(row, 0);
        for(let i = 1; i < this.columns; i++){
            if (this.get(row, i) > v) {
                v = this.get(row, i);
            }
        }
        return v;
    }
    maxRowIndex(row) {
        checkRowIndex(this, row);
        checkNonEmpty(this);
        let v = this.get(row, 0);
        let idx = [
            row,
            0
        ];
        for(let i = 1; i < this.columns; i++){
            if (this.get(row, i) > v) {
                v = this.get(row, i);
                idx[1] = i;
            }
        }
        return idx;
    }
    minRow(row) {
        checkRowIndex(this, row);
        if (this.isEmpty()) {
            return NaN;
        }
        let v = this.get(row, 0);
        for(let i = 1; i < this.columns; i++){
            if (this.get(row, i) < v) {
                v = this.get(row, i);
            }
        }
        return v;
    }
    minRowIndex(row) {
        checkRowIndex(this, row);
        checkNonEmpty(this);
        let v = this.get(row, 0);
        let idx = [
            row,
            0
        ];
        for(let i = 1; i < this.columns; i++){
            if (this.get(row, i) < v) {
                v = this.get(row, i);
                idx[1] = i;
            }
        }
        return idx;
    }
    maxColumn(column) {
        checkColumnIndex(this, column);
        if (this.isEmpty()) {
            return NaN;
        }
        let v = this.get(0, column);
        for(let i = 1; i < this.rows; i++){
            if (this.get(i, column) > v) {
                v = this.get(i, column);
            }
        }
        return v;
    }
    maxColumnIndex(column) {
        checkColumnIndex(this, column);
        checkNonEmpty(this);
        let v = this.get(0, column);
        let idx = [
            0,
            column
        ];
        for(let i = 1; i < this.rows; i++){
            if (this.get(i, column) > v) {
                v = this.get(i, column);
                idx[0] = i;
            }
        }
        return idx;
    }
    minColumn(column) {
        checkColumnIndex(this, column);
        if (this.isEmpty()) {
            return NaN;
        }
        let v = this.get(0, column);
        for(let i = 1; i < this.rows; i++){
            if (this.get(i, column) < v) {
                v = this.get(i, column);
            }
        }
        return v;
    }
    minColumnIndex(column) {
        checkColumnIndex(this, column);
        checkNonEmpty(this);
        let v = this.get(0, column);
        let idx = [
            0,
            column
        ];
        for(let i = 1; i < this.rows; i++){
            if (this.get(i, column) < v) {
                v = this.get(i, column);
                idx[0] = i;
            }
        }
        return idx;
    }
    diag() {
        let min = Math.min(this.rows, this.columns);
        let diag = [];
        for(let i = 0; i < min; i++){
            diag.push(this.get(i, i));
        }
        return diag;
    }
    norm(type = 'frobenius') {
        switch(type){
            case 'max':
                return this.max();
            case 'frobenius':
                return Math.sqrt(this.dot(this));
            default:
                throw new RangeError(`unknown norm type: ${type}`);
        }
    }
    cumulativeSum() {
        let sum = 0;
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                sum += this.get(i, j);
                this.set(i, j, sum);
            }
        }
        return this;
    }
    dot(vector2) {
        if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();
        let vector1 = this.to1DArray();
        if (vector1.length !== vector2.length) {
            throw new RangeError('vectors do not have the same size');
        }
        let dot = 0;
        for(let i = 0; i < vector1.length; i++){
            dot += vector1[i] * vector2[i];
        }
        return dot;
    }
    mmul(other) {
        other = Matrix.checkMatrix(other);
        let m = this.rows;
        let n = this.columns;
        let p = other.columns;
        let result = new Matrix(m, p);
        let Bcolj = new Float64Array(n);
        for(let j = 0; j < p; j++){
            for(let k = 0; k < n; k++){
                Bcolj[k] = other.get(k, j);
            }
            for(let i = 0; i < m; i++){
                let s = 0;
                for(let k = 0; k < n; k++){
                    s += this.get(i, k) * Bcolj[k];
                }
                result.set(i, j, s);
            }
        }
        return result;
    }
    mpow(scalar) {
        if (!this.isSquare()) {
            throw new RangeError('Matrix must be square');
        }
        if (!Number.isInteger(scalar) || scalar < 0) {
            throw new RangeError('Exponent must be a non-negative integer');
        }
        // Russian Peasant exponentiation, i.e. exponentiation by squaring
        let result = Matrix.eye(this.rows);
        let bb = this;
        // Note: Don't bit shift. In JS, that would truncate at 32 bits
        for(let e = scalar; e >= 1; e /= 2){
            if ((e & 1) !== 0) {
                result = result.mmul(bb);
            }
            bb = bb.mmul(bb);
        }
        return result;
    }
    strassen2x2(other) {
        other = Matrix.checkMatrix(other);
        let result = new Matrix(2, 2);
        const a11 = this.get(0, 0);
        const b11 = other.get(0, 0);
        const a12 = this.get(0, 1);
        const b12 = other.get(0, 1);
        const a21 = this.get(1, 0);
        const b21 = other.get(1, 0);
        const a22 = this.get(1, 1);
        const b22 = other.get(1, 1);
        // Compute intermediate values.
        const m1 = (a11 + a22) * (b11 + b22);
        const m2 = (a21 + a22) * b11;
        const m3 = a11 * (b12 - b22);
        const m4 = a22 * (b21 - b11);
        const m5 = (a11 + a12) * b22;
        const m6 = (a21 - a11) * (b11 + b12);
        const m7 = (a12 - a22) * (b21 + b22);
        // Combine intermediate values into the output.
        const c00 = m1 + m4 - m5 + m7;
        const c01 = m3 + m5;
        const c10 = m2 + m4;
        const c11 = m1 - m2 + m3 + m6;
        result.set(0, 0, c00);
        result.set(0, 1, c01);
        result.set(1, 0, c10);
        result.set(1, 1, c11);
        return result;
    }
    strassen3x3(other) {
        other = Matrix.checkMatrix(other);
        let result = new Matrix(3, 3);
        const a00 = this.get(0, 0);
        const a01 = this.get(0, 1);
        const a02 = this.get(0, 2);
        const a10 = this.get(1, 0);
        const a11 = this.get(1, 1);
        const a12 = this.get(1, 2);
        const a20 = this.get(2, 0);
        const a21 = this.get(2, 1);
        const a22 = this.get(2, 2);
        const b00 = other.get(0, 0);
        const b01 = other.get(0, 1);
        const b02 = other.get(0, 2);
        const b10 = other.get(1, 0);
        const b11 = other.get(1, 1);
        const b12 = other.get(1, 2);
        const b20 = other.get(2, 0);
        const b21 = other.get(2, 1);
        const b22 = other.get(2, 2);
        const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;
        const m2 = (a00 - a10) * (-b01 + b11);
        const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);
        const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);
        const m5 = (a10 + a11) * (-b00 + b01);
        const m6 = a00 * b00;
        const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);
        const m8 = (-a00 + a20) * (b02 - b12);
        const m9 = (a20 + a21) * (-b00 + b02);
        const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;
        const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);
        const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);
        const m13 = (a02 - a22) * (b11 - b21);
        const m14 = a02 * b20;
        const m15 = (a21 + a22) * (-b20 + b21);
        const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);
        const m17 = (a02 - a12) * (b12 - b22);
        const m18 = (a11 + a12) * (-b20 + b22);
        const m19 = a01 * b10;
        const m20 = a12 * b21;
        const m21 = a10 * b02;
        const m22 = a20 * b01;
        const m23 = a22 * b22;
        const c00 = m6 + m14 + m19;
        const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;
        const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;
        const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;
        const c11 = m2 + m4 + m5 + m6 + m20;
        const c12 = m14 + m16 + m17 + m18 + m21;
        const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;
        const c21 = m12 + m13 + m14 + m15 + m22;
        const c22 = m6 + m7 + m8 + m9 + m23;
        result.set(0, 0, c00);
        result.set(0, 1, c01);
        result.set(0, 2, c02);
        result.set(1, 0, c10);
        result.set(1, 1, c11);
        result.set(1, 2, c12);
        result.set(2, 0, c20);
        result.set(2, 1, c21);
        result.set(2, 2, c22);
        return result;
    }
    mmulStrassen(y) {
        y = Matrix.checkMatrix(y);
        let x = this.clone();
        let r1 = x.rows;
        let c1 = x.columns;
        let r2 = y.rows;
        let c2 = y.columns;
        if (c1 !== r2) {
            // eslint-disable-next-line no-console
            console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);
        }
        // Put a matrix into the top left of a matrix of zeros.
        // `rows` and `cols` are the dimensions of the output matrix.
        function embed(mat, rows, cols) {
            let r = mat.rows;
            let c = mat.columns;
            if (r === rows && c === cols) {
                return mat;
            } else {
                let resultat = AbstractMatrix.zeros(rows, cols);
                resultat = resultat.setSubMatrix(mat, 0, 0);
                return resultat;
            }
        }
        // Make sure both matrices are the same size.
        // This is exclusively for simplicity:
        // this algorithm can be implemented with matrices of different sizes.
        let r = Math.max(r1, r2);
        let c = Math.max(c1, c2);
        x = embed(x, r, c);
        y = embed(y, r, c);
        // Our recursive multiplication function.
        function blockMult(a, b, rows, cols) {
            // For small matrices, resort to naive multiplication.
            if (rows <= 512 || cols <= 512) {
                return a.mmul(b); // a is equivalent to this
            }
            // Apply dynamic padding.
            if (rows % 2 === 1 && cols % 2 === 1) {
                a = embed(a, rows + 1, cols + 1);
                b = embed(b, rows + 1, cols + 1);
            } else if (rows % 2 === 1) {
                a = embed(a, rows + 1, cols);
                b = embed(b, rows + 1, cols);
            } else if (cols % 2 === 1) {
                a = embed(a, rows, cols + 1);
                b = embed(b, rows, cols + 1);
            }
            let halfRows = parseInt(a.rows / 2, 10);
            let halfCols = parseInt(a.columns / 2, 10);
            // Subdivide input matrices.
            let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);
            let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);
            let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);
            let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);
            let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);
            let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);
            let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);
            let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);
            // Compute intermediate values.
            let m1 = blockMult(AbstractMatrix.add(a11, a22), AbstractMatrix.add(b11, b22), halfRows, halfCols);
            let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);
            let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);
            let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);
            let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);
            let m6 = blockMult(AbstractMatrix.sub(a21, a11), AbstractMatrix.add(b11, b12), halfRows, halfCols);
            let m7 = blockMult(AbstractMatrix.sub(a12, a22), AbstractMatrix.add(b21, b22), halfRows, halfCols);
            // Combine intermediate values into the output.
            let c11 = AbstractMatrix.add(m1, m4);
            c11.sub(m5);
            c11.add(m7);
            let c12 = AbstractMatrix.add(m3, m5);
            let c21 = AbstractMatrix.add(m2, m4);
            let c22 = AbstractMatrix.sub(m1, m2);
            c22.add(m3);
            c22.add(m6);
            // Crop output to the desired size (undo dynamic padding).
            let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);
            result = result.setSubMatrix(c11, 0, 0);
            result = result.setSubMatrix(c12, c11.rows, 0);
            result = result.setSubMatrix(c21, 0, c11.columns);
            result = result.setSubMatrix(c22, c11.rows, c11.columns);
            return result.subMatrix(0, rows - 1, 0, cols - 1);
        }
        return blockMult(x, y, r, c);
    }
    scaleRows(options = {}) {
        if (typeof options !== 'object') {
            throw new TypeError('options must be an object');
        }
        const { min = 0, max = 1 } = options;
        if (!Number.isFinite(min)) throw new TypeError('min must be a number');
        if (!Number.isFinite(max)) throw new TypeError('max must be a number');
        if (min >= max) throw new RangeError('min must be smaller than max');
        let newMatrix = new Matrix(this.rows, this.columns);
        for(let i = 0; i < this.rows; i++){
            const row = this.getRow(i);
            if (row.length > 0) {
                rescale(row, {
                    min,
                    max,
                    output: row
                });
            }
            newMatrix.setRow(i, row);
        }
        return newMatrix;
    }
    scaleColumns(options = {}) {
        if (typeof options !== 'object') {
            throw new TypeError('options must be an object');
        }
        const { min = 0, max = 1 } = options;
        if (!Number.isFinite(min)) throw new TypeError('min must be a number');
        if (!Number.isFinite(max)) throw new TypeError('max must be a number');
        if (min >= max) throw new RangeError('min must be smaller than max');
        let newMatrix = new Matrix(this.rows, this.columns);
        for(let i = 0; i < this.columns; i++){
            const column = this.getColumn(i);
            if (column.length) {
                rescale(column, {
                    min,
                    max,
                    output: column
                });
            }
            newMatrix.setColumn(i, column);
        }
        return newMatrix;
    }
    flipRows() {
        const middle = Math.ceil(this.columns / 2);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < middle; j++){
                let first = this.get(i, j);
                let last = this.get(i, this.columns - 1 - j);
                this.set(i, j, last);
                this.set(i, this.columns - 1 - j, first);
            }
        }
        return this;
    }
    flipColumns() {
        const middle = Math.ceil(this.rows / 2);
        for(let j = 0; j < this.columns; j++){
            for(let i = 0; i < middle; i++){
                let first = this.get(i, j);
                let last = this.get(this.rows - 1 - i, j);
                this.set(i, j, last);
                this.set(this.rows - 1 - i, j, first);
            }
        }
        return this;
    }
    kroneckerProduct(other) {
        other = Matrix.checkMatrix(other);
        let m = this.rows;
        let n = this.columns;
        let p = other.rows;
        let q = other.columns;
        let result = new Matrix(m * p, n * q);
        for(let i = 0; i < m; i++){
            for(let j = 0; j < n; j++){
                for(let k = 0; k < p; k++){
                    for(let l = 0; l < q; l++){
                        result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));
                    }
                }
            }
        }
        return result;
    }
    kroneckerSum(other) {
        other = Matrix.checkMatrix(other);
        if (!this.isSquare() || !other.isSquare()) {
            throw new Error('Kronecker Sum needs two Square Matrices');
        }
        let m = this.rows;
        let n = other.rows;
        let AxI = this.kroneckerProduct(Matrix.eye(n, n));
        let IxB = Matrix.eye(m, m).kroneckerProduct(other);
        return AxI.add(IxB);
    }
    transpose() {
        let result = new Matrix(this.columns, this.rows);
        for(let i = 0; i < this.rows; i++){
            for(let j = 0; j < this.columns; j++){
                result.set(j, i, this.get(i, j));
            }
        }
        return result;
    }
    sortRows(compareFunction = compareNumbers) {
        for(let i = 0; i < this.rows; i++){
            this.setRow(i, this.getRow(i).sort(compareFunction));
        }
        return this;
    }
    sortColumns(compareFunction = compareNumbers) {
        for(let i = 0; i < this.columns; i++){
            this.setColumn(i, this.getColumn(i).sort(compareFunction));
        }
        return this;
    }
    subMatrix(startRow, endRow, startColumn, endColumn) {
        checkRange(this, startRow, endRow, startColumn, endColumn);
        let newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);
        for(let i = startRow; i <= endRow; i++){
            for(let j = startColumn; j <= endColumn; j++){
                newMatrix.set(i - startRow, j - startColumn, this.get(i, j));
            }
        }
        return newMatrix;
    }
    subMatrixRow(indices, startColumn, endColumn) {
        if (startColumn === undefined) startColumn = 0;
        if (endColumn === undefined) endColumn = this.columns - 1;
        if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {
            throw new RangeError('Argument out of range');
        }
        let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);
        for(let i = 0; i < indices.length; i++){
            for(let j = startColumn; j <= endColumn; j++){
                if (indices[i] < 0 || indices[i] >= this.rows) {
                    throw new RangeError(`Row index out of range: ${indices[i]}`);
                }
                newMatrix.set(i, j - startColumn, this.get(indices[i], j));
            }
        }
        return newMatrix;
    }
    subMatrixColumn(indices, startRow, endRow) {
        if (startRow === undefined) startRow = 0;
        if (endRow === undefined) endRow = this.rows - 1;
        if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {
            throw new RangeError('Argument out of range');
        }
        let newMatrix = new Matrix(endRow - startRow + 1, indices.length);
        for(let i = 0; i < indices.length; i++){
            for(let j = startRow; j <= endRow; j++){
                if (indices[i] < 0 || indices[i] >= this.columns) {
                    throw new RangeError(`Column index out of range: ${indices[i]}`);
                }
                newMatrix.set(j - startRow, i, this.get(j, indices[i]));
            }
        }
        return newMatrix;
    }
    setSubMatrix(matrix, startRow, startColumn) {
        matrix = Matrix.checkMatrix(matrix);
        if (matrix.isEmpty()) {
            return this;
        }
        let endRow = startRow + matrix.rows - 1;
        let endColumn = startColumn + matrix.columns - 1;
        checkRange(this, startRow, endRow, startColumn, endColumn);
        for(let i = 0; i < matrix.rows; i++){
            for(let j = 0; j < matrix.columns; j++){
                this.set(startRow + i, startColumn + j, matrix.get(i, j));
            }
        }
        return this;
    }
    selection(rowIndices, columnIndices) {
        checkRowIndices(this, rowIndices);
        checkColumnIndices(this, columnIndices);
        let newMatrix = new Matrix(rowIndices.length, columnIndices.length);
        for(let i = 0; i < rowIndices.length; i++){
            let rowIndex = rowIndices[i];
            for(let j = 0; j < columnIndices.length; j++){
                let columnIndex = columnIndices[j];
                newMatrix.set(i, j, this.get(rowIndex, columnIndex));
            }
        }
        return newMatrix;
    }
    trace() {
        let min = Math.min(this.rows, this.columns);
        let trace = 0;
        for(let i = 0; i < min; i++){
            trace += this.get(i, i);
        }
        return trace;
    }
    clone() {
        return this.constructor.copy(this, new Matrix(this.rows, this.columns));
    }
    /**
   * @template {AbstractMatrix} M
   * @param {AbstractMatrix} from
   * @param {M} to
   * @return {M}
   */ static copy(from, to) {
        for (const [row, column, value] of from.entries()){
            to.set(row, column, value);
        }
        return to;
    }
    sum(by) {
        switch(by){
            case 'row':
                return sumByRow(this);
            case 'column':
                return sumByColumn(this);
            case undefined:
                return sumAll(this);
            default:
                throw new Error(`invalid option: ${by}`);
        }
    }
    product(by) {
        switch(by){
            case 'row':
                return productByRow(this);
            case 'column':
                return productByColumn(this);
            case undefined:
                return productAll(this);
            default:
                throw new Error(`invalid option: ${by}`);
        }
    }
    mean(by) {
        const sum = this.sum(by);
        switch(by){
            case 'row':
                {
                    for(let i = 0; i < this.rows; i++){
                        sum[i] /= this.columns;
                    }
                    return sum;
                }
            case 'column':
                {
                    for(let i = 0; i < this.columns; i++){
                        sum[i] /= this.rows;
                    }
                    return sum;
                }
            case undefined:
                return sum / this.size;
            default:
                throw new Error(`invalid option: ${by}`);
        }
    }
    variance(by, options = {}) {
        if (typeof by === 'object') {
            options = by;
            by = undefined;
        }
        if (typeof options !== 'object') {
            throw new TypeError('options must be an object');
        }
        const { unbiased = true, mean = this.mean(by) } = options;
        if (typeof unbiased !== 'boolean') {
            throw new TypeError('unbiased must be a boolean');
        }
        switch(by){
            case 'row':
                {
                    if (!isAnyArray.isAnyArray(mean)) {
                        throw new TypeError('mean must be an array');
                    }
                    return varianceByRow(this, unbiased, mean);
                }
            case 'column':
                {
                    if (!isAnyArray.isAnyArray(mean)) {
                        throw new TypeError('mean must be an array');
                    }
                    return varianceByColumn(this, unbiased, mean);
                }
            case undefined:
                {
                    if (typeof mean !== 'number') {
                        throw new TypeError('mean must be a number');
                    }
                    return varianceAll(this, unbiased, mean);
                }
            default:
                throw new Error(`invalid option: ${by}`);
        }
    }
    standardDeviation(by, options) {
        if (typeof by === 'object') {
            options = by;
            by = undefined;
        }
        const variance = this.variance(by, options);
        if (by === undefined) {
            return Math.sqrt(variance);
        } else {
            for(let i = 0; i < variance.length; i++){
                variance[i] = Math.sqrt(variance[i]);
            }
            return variance;
        }
    }
    center(by, options = {}) {
        if (typeof by === 'object') {
            options = by;
            by = undefined;
        }
        if (typeof options !== 'object') {
            throw new TypeError('options must be an object');
        }
        const { center = this.mean(by) } = options;
        switch(by){
            case 'row':
                {
                    if (!isAnyArray.isAnyArray(center)) {
                        throw new TypeError('center must be an array');
                    }
                    centerByRow(this, center);
                    return this;
                }
            case 'column':
                {
                    if (!isAnyArray.isAnyArray(center)) {
                        throw new TypeError('center must be an array');
                    }
                    centerByColumn(this, center);
                    return this;
                }
            case undefined:
                {
                    if (typeof center !== 'number') {
                        throw new TypeError('center must be a number');
                    }
                    centerAll(this, center);
                    return this;
                }
            default:
                throw new Error(`invalid option: ${by}`);
        }
    }
    scale(by, options = {}) {
        if (typeof by === 'object') {
            options = by;
            by = undefined;
        }
        if (typeof options !== 'object') {
            throw new TypeError('options must be an object');
        }
        let scale = options.scale;
        switch(by){
            case 'row':
                {
                    if (scale === undefined) {
                        scale = getScaleByRow(this);
                    } else if (!isAnyArray.isAnyArray(scale)) {
                        throw new TypeError('scale must be an array');
                    }
                    scaleByRow(this, scale);
                    return this;
                }
            case 'column':
                {
                    if (scale === undefined) {
                        scale = getScaleByColumn(this);
                    } else if (!isAnyArray.isAnyArray(scale)) {
                        throw new TypeError('scale must be an array');
                    }
                    scaleByColumn(this, scale);
                    return this;
                }
            case undefined:
                {
                    if (scale === undefined) {
                        scale = getScaleAll(this);
                    } else if (typeof scale !== 'number') {
                        throw new TypeError('scale must be a number');
                    }
                    scaleAll(this, scale);
                    return this;
                }
            default:
                throw new Error(`invalid option: ${by}`);
        }
    }
    toString(options) {
        return inspectMatrixWithOptions(this, options);
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    /**
   * iterator from left to right, from top to bottom
   * yield [row, column, value]
   * @returns {Generator<[number, number, number], void, void>}
   */ *entries() {
        for(let row = 0; row < this.rows; row++){
            for(let col = 0; col < this.columns; col++){
                yield [
                    row,
                    col,
                    this.get(row, col)
                ];
            }
        }
    }
    /**
   * iterator from left to right, from top to bottom
   * yield value
   * @returns {Generator<number, void, void>}
   */ *values() {
        for(let row = 0; row < this.rows; row++){
            for(let col = 0; col < this.columns; col++){
                yield this.get(row, col);
            }
        }
    }
}
AbstractMatrix.prototype.klass = 'Matrix';
if (typeof Symbol !== 'undefined') {
    AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspectMatrix;
}
function compareNumbers(a, b) {
    return a - b;
}
function isArrayOfNumbers(array) {
    return array.every((element)=>{
        return typeof element === 'number';
    });
}
// Synonyms
AbstractMatrix.random = AbstractMatrix.rand;
AbstractMatrix.randomInt = AbstractMatrix.randInt;
AbstractMatrix.diagonal = AbstractMatrix.diag;
AbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;
AbstractMatrix.identity = AbstractMatrix.eye;
AbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;
AbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;
class Matrix extends AbstractMatrix {
    /**
   * @type {Float64Array[]}
   */ data;
    /**
   * Init an empty matrix
   * @param {number} nRows
   * @param {number} nColumns
   */ #initData(nRows, nColumns) {
        this.data = [];
        if (Number.isInteger(nColumns) && nColumns >= 0) {
            for(let i = 0; i < nRows; i++){
                this.data.push(new Float64Array(nColumns));
            }
        } else {
            throw new TypeError('nColumns must be a positive integer');
        }
        this.rows = nRows;
        this.columns = nColumns;
    }
    constructor(nRows, nColumns){
        super();
        if (Matrix.isMatrix(nRows)) {
            this.#initData(nRows.rows, nRows.columns);
            Matrix.copy(nRows, this);
        } else if (Number.isInteger(nRows) && nRows >= 0) {
            this.#initData(nRows, nColumns);
        } else if (isAnyArray.isAnyArray(nRows)) {
            // Copy the values from the 2D array
            const arrayData = nRows;
            nRows = arrayData.length;
            nColumns = nRows ? arrayData[0].length : 0;
            if (typeof nColumns !== 'number') {
                throw new TypeError('Data must be a 2D array with at least one element');
            }
            this.data = [];
            for(let i = 0; i < nRows; i++){
                if (arrayData[i].length !== nColumns) {
                    throw new RangeError('Inconsistent array dimensions');
                }
                if (!isArrayOfNumbers(arrayData[i])) {
                    throw new TypeError('Input data contains non-numeric values');
                }
                this.data.push(Float64Array.from(arrayData[i]));
            }
            this.rows = nRows;
            this.columns = nColumns;
        } else {
            throw new TypeError('First argument must be a positive number or an array');
        }
    }
    set(rowIndex, columnIndex, value) {
        this.data[rowIndex][columnIndex] = value;
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.data[rowIndex][columnIndex];
    }
    removeRow(index) {
        checkRowIndex(this, index);
        this.data.splice(index, 1);
        this.rows -= 1;
        return this;
    }
    addRow(index, array) {
        if (array === undefined) {
            array = index;
            index = this.rows;
        }
        checkRowIndex(this, index, true);
        array = Float64Array.from(checkRowVector(this, array));
        this.data.splice(index, 0, array);
        this.rows += 1;
        return this;
    }
    removeColumn(index) {
        checkColumnIndex(this, index);
        for(let i = 0; i < this.rows; i++){
            const newRow = new Float64Array(this.columns - 1);
            for(let j = 0; j < index; j++){
                newRow[j] = this.data[i][j];
            }
            for(let j = index + 1; j < this.columns; j++){
                newRow[j - 1] = this.data[i][j];
            }
            this.data[i] = newRow;
        }
        this.columns -= 1;
        return this;
    }
    addColumn(index, array) {
        if (typeof array === 'undefined') {
            array = index;
            index = this.columns;
        }
        checkColumnIndex(this, index, true);
        array = checkColumnVector(this, array);
        for(let i = 0; i < this.rows; i++){
            const newRow = new Float64Array(this.columns + 1);
            let j = 0;
            for(; j < index; j++){
                newRow[j] = this.data[i][j];
            }
            newRow[j++] = array[i];
            for(; j < this.columns + 1; j++){
                newRow[j] = this.data[i][j - 1];
            }
            this.data[i] = newRow;
        }
        this.columns += 1;
        return this;
    }
}
installMathOperations(AbstractMatrix, Matrix);
/**
 * @typedef {0 | 1 | number | boolean} Mask
 */ class SymmetricMatrix extends AbstractMatrix {
    /** @type {Matrix} */ #matrix;
    get size() {
        return this.#matrix.size;
    }
    get rows() {
        return this.#matrix.rows;
    }
    get columns() {
        return this.#matrix.columns;
    }
    get diagonalSize() {
        return this.rows;
    }
    /**
   * not the same as matrix.isSymmetric()
   * Here is to check if it's instanceof SymmetricMatrix without bundling issues
   *
   * @param value
   * @returns {boolean}
   */ static isSymmetricMatrix(value) {
        return Matrix.isMatrix(value) && value.klassType === 'SymmetricMatrix';
    }
    /**
   * @param diagonalSize
   * @return {SymmetricMatrix}
   */ static zeros(diagonalSize) {
        return new this(diagonalSize);
    }
    /**
   * @param diagonalSize
   * @return {SymmetricMatrix}
   */ static ones(diagonalSize) {
        return new this(diagonalSize).fill(1);
    }
    /**
   * @param {number | AbstractMatrix | ArrayLike<ArrayLike<number>>} diagonalSize
   * @return {this}
   */ constructor(diagonalSize){
        super();
        if (Matrix.isMatrix(diagonalSize)) {
            if (!diagonalSize.isSymmetric()) {
                throw new TypeError('not symmetric data');
            }
            this.#matrix = Matrix.copy(diagonalSize, new Matrix(diagonalSize.rows, diagonalSize.rows));
        } else if (Number.isInteger(diagonalSize) && diagonalSize >= 0) {
            this.#matrix = new Matrix(diagonalSize, diagonalSize);
        } else {
            this.#matrix = new Matrix(diagonalSize);
            if (!this.isSymmetric()) {
                throw new TypeError('not symmetric data');
            }
        }
    }
    clone() {
        const matrix = new SymmetricMatrix(this.diagonalSize);
        for (const [row, col, value] of this.upperRightEntries()){
            matrix.set(row, col, value);
        }
        return matrix;
    }
    toMatrix() {
        return new Matrix(this);
    }
    get(rowIndex, columnIndex) {
        return this.#matrix.get(rowIndex, columnIndex);
    }
    set(rowIndex, columnIndex, value) {
        // symmetric set
        this.#matrix.set(rowIndex, columnIndex, value);
        this.#matrix.set(columnIndex, rowIndex, value);
        return this;
    }
    removeCross(index) {
        // symmetric remove side
        this.#matrix.removeRow(index);
        this.#matrix.removeColumn(index);
        return this;
    }
    addCross(index, array) {
        if (array === undefined) {
            array = index;
            index = this.diagonalSize;
        }
        const row = array.slice();
        row.splice(index, 1);
        this.#matrix.addRow(index, row);
        this.#matrix.addColumn(index, array);
        return this;
    }
    /**
   * @param {Mask[]} mask
   */ applyMask(mask) {
        if (mask.length !== this.diagonalSize) {
            throw new RangeError('Mask size do not match with matrix size');
        }
        // prepare sides to remove from matrix from mask
        /** @type {number[]} */ const sidesToRemove = [];
        for (const [index, passthroughs] of mask.entries()){
            if (passthroughs) continue;
            sidesToRemove.push(index);
        }
        // to remove from highest to lowest for no mutation shifting
        sidesToRemove.reverse();
        // remove sides
        for (const sideIndex of sidesToRemove){
            this.removeCross(sideIndex);
        }
        return this;
    }
    /**
   * Compact format upper-right corner of matrix
   * iterate from left to right, from top to bottom.
   *
   * ```
   *   A B C D
   * A 1 2 3 4
   * B 2 5 6 7
   * C 3 6 8 9
   * D 4 7 9 10
   * ```
   *
   * will return compact 1D array `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`
   *
   * length is S(i=0, n=sideSize) => 10 for a 4 sideSized matrix
   *
   * @returns {number[]}
   */ toCompact() {
        const { diagonalSize } = this;
        /** @type {number[]} */ const compact = new Array(diagonalSize * (diagonalSize + 1) / 2);
        for(let col = 0, row = 0, index = 0; index < compact.length; index++){
            compact[index] = this.get(row, col);
            if (++col >= diagonalSize) col = ++row;
        }
        return compact;
    }
    /**
   * @param {number[]} compact
   * @return {SymmetricMatrix}
   */ static fromCompact(compact) {
        const compactSize = compact.length;
        // compactSize = (sideSize * (sideSize + 1)) / 2
        // https://mathsolver.microsoft.com/fr/solve-problem/y%20%3D%20%20x%20%60cdot%20%20%20%60frac%7B%20%20%60left(%20x%2B1%20%20%60right)%20%20%20%20%7D%7B%202%20%20%7D
        // sideSize = (Sqrt(8 × compactSize + 1) - 1) / 2
        const diagonalSize = (Math.sqrt(8 * compactSize + 1) - 1) / 2;
        if (!Number.isInteger(diagonalSize)) {
            throw new TypeError(`This array is not a compact representation of a Symmetric Matrix, ${JSON.stringify(compact)}`);
        }
        const matrix = new SymmetricMatrix(diagonalSize);
        for(let col = 0, row = 0, index = 0; index < compactSize; index++){
            matrix.set(col, row, compact[index]);
            if (++col >= diagonalSize) col = ++row;
        }
        return matrix;
    }
    /**
   * half iterator upper-right-corner from left to right, from top to bottom
   * yield [row, column, value]
   *
   * @returns {Generator<[number, number, number], void, void>}
   */ *upperRightEntries() {
        for(let row = 0, col = 0; row < this.diagonalSize; void 0){
            const value = this.get(row, col);
            yield [
                row,
                col,
                value
            ];
            // at the end of row, move cursor to next row at diagonal position
            if (++col >= this.diagonalSize) col = ++row;
        }
    }
    /**
   * half iterator upper-right-corner from left to right, from top to bottom
   * yield value
   *
   * @returns {Generator<[number, number, number], void, void>}
   */ *upperRightValues() {
        for(let row = 0, col = 0; row < this.diagonalSize; void 0){
            const value = this.get(row, col);
            yield value;
            // at the end of row, move cursor to next row at diagonal position
            if (++col >= this.diagonalSize) col = ++row;
        }
    }
}
SymmetricMatrix.prototype.klassType = 'SymmetricMatrix';
class DistanceMatrix extends SymmetricMatrix {
    /**
   * not the same as matrix.isSymmetric()
   * Here is to check if it's instanceof SymmetricMatrix without bundling issues
   *
   * @param value
   * @returns {boolean}
   */ static isDistanceMatrix(value) {
        return SymmetricMatrix.isSymmetricMatrix(value) && value.klassSubType === 'DistanceMatrix';
    }
    constructor(sideSize){
        super(sideSize);
        if (!this.isDistance()) {
            throw new TypeError('Provided arguments do no produce a distance matrix');
        }
    }
    set(rowIndex, columnIndex, value) {
        // distance matrix diagonal is 0
        if (rowIndex === columnIndex) value = 0;
        return super.set(rowIndex, columnIndex, value);
    }
    addCross(index, array) {
        if (array === undefined) {
            array = index;
            index = this.diagonalSize;
        }
        // ensure distance
        array = array.slice();
        array[index] = 0;
        return super.addCross(index, array);
    }
    toSymmetricMatrix() {
        return new SymmetricMatrix(this);
    }
    clone() {
        const matrix = new DistanceMatrix(this.diagonalSize);
        for (const [row, col, value] of this.upperRightEntries()){
            if (row === col) continue;
            matrix.set(row, col, value);
        }
        return matrix;
    }
    /**
   * Compact format upper-right corner of matrix
   * no diagonal (only zeros)
   * iterable from left to right, from top to bottom.
   *
   * ```
   *   A B C D
   * A 0 1 2 3
   * B 1 0 4 5
   * C 2 4 0 6
   * D 3 5 6 0
   * ```
   *
   * will return compact 1D array `[1, 2, 3, 4, 5, 6]`
   *
   * length is S(i=0, n=sideSize-1) => 6 for a 4 side sized matrix
   *
   * @returns {number[]}
   */ toCompact() {
        const { diagonalSize } = this;
        const compactLength = (diagonalSize - 1) * diagonalSize / 2;
        /** @type {number[]} */ const compact = new Array(compactLength);
        for(let col = 1, row = 0, index = 0; index < compact.length; index++){
            compact[index] = this.get(row, col);
            if (++col >= diagonalSize) col = ++row + 1;
        }
        return compact;
    }
    /**
   * @param {number[]} compact
   */ static fromCompact(compact) {
        const compactSize = compact.length;
        if (compactSize === 0) {
            return new this(0);
        }
        // compactSize in Natural integer range ]0;∞]
        // compactSize = (sideSize * (sideSize - 1)) / 2
        // sideSize = (Sqrt(8 × compactSize + 1) + 1) / 2
        const diagonalSize = (Math.sqrt(8 * compactSize + 1) + 1) / 2;
        if (!Number.isInteger(diagonalSize)) {
            throw new TypeError(`This array is not a compact representation of a DistanceMatrix, ${JSON.stringify(compact)}`);
        }
        const matrix = new this(diagonalSize);
        for(let col = 1, row = 0, index = 0; index < compactSize; index++){
            matrix.set(col, row, compact[index]);
            if (++col >= diagonalSize) col = ++row + 1;
        }
        return matrix;
    }
}
DistanceMatrix.prototype.klassSubType = 'DistanceMatrix';
class BaseView extends AbstractMatrix {
    constructor(matrix, rows, columns){
        super();
        this.matrix = matrix;
        this.rows = rows;
        this.columns = columns;
    }
}
class MatrixColumnView extends BaseView {
    constructor(matrix, column){
        checkColumnIndex(matrix, column);
        super(matrix, matrix.rows, 1);
        this.column = column;
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(rowIndex, this.column, value);
        return this;
    }
    get(rowIndex) {
        return this.matrix.get(rowIndex, this.column);
    }
}
class MatrixColumnSelectionView extends BaseView {
    constructor(matrix, columnIndices){
        checkColumnIndices(matrix, columnIndices);
        super(matrix, matrix.rows, columnIndices.length);
        this.columnIndices = columnIndices;
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);
    }
}
class MatrixFlipColumnView extends BaseView {
    constructor(matrix){
        super(matrix, matrix.rows, matrix.columns);
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);
    }
}
class MatrixFlipRowView extends BaseView {
    constructor(matrix){
        super(matrix, matrix.rows, matrix.columns);
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);
    }
}
class MatrixRowView extends BaseView {
    constructor(matrix, row){
        checkRowIndex(matrix, row);
        super(matrix, 1, matrix.columns);
        this.row = row;
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(this.row, columnIndex, value);
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.matrix.get(this.row, columnIndex);
    }
}
class MatrixRowSelectionView extends BaseView {
    constructor(matrix, rowIndices){
        checkRowIndices(matrix, rowIndices);
        super(matrix, rowIndices.length, matrix.columns);
        this.rowIndices = rowIndices;
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.matrix.get(this.rowIndices[rowIndex], columnIndex);
    }
}
class MatrixSelectionView extends BaseView {
    constructor(matrix, rowIndices, columnIndices){
        checkRowIndices(matrix, rowIndices);
        checkColumnIndices(matrix, columnIndices);
        super(matrix, rowIndices.length, columnIndices.length);
        this.rowIndices = rowIndices;
        this.columnIndices = columnIndices;
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);
    }
}
class MatrixSubView extends BaseView {
    constructor(matrix, startRow, endRow, startColumn, endColumn){
        checkRange(matrix, startRow, endRow, startColumn, endColumn);
        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);
        this.startRow = startRow;
        this.startColumn = startColumn;
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);
    }
}
class MatrixTransposeView extends BaseView {
    constructor(matrix){
        super(matrix, matrix.columns, matrix.rows);
    }
    set(rowIndex, columnIndex, value) {
        this.matrix.set(columnIndex, rowIndex, value);
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.matrix.get(columnIndex, rowIndex);
    }
}
class WrapperMatrix1D extends AbstractMatrix {
    constructor(data, options = {}){
        const { rows = 1 } = options;
        if (data.length % rows !== 0) {
            throw new Error('the data length is not divisible by the number of rows');
        }
        super();
        this.rows = rows;
        this.columns = data.length / rows;
        this.data = data;
    }
    set(rowIndex, columnIndex, value) {
        let index = this._calculateIndex(rowIndex, columnIndex);
        this.data[index] = value;
        return this;
    }
    get(rowIndex, columnIndex) {
        let index = this._calculateIndex(rowIndex, columnIndex);
        return this.data[index];
    }
    _calculateIndex(row, column) {
        return row * this.columns + column;
    }
}
class WrapperMatrix2D extends AbstractMatrix {
    constructor(data){
        super();
        this.data = data;
        this.rows = data.length;
        this.columns = data[0].length;
    }
    set(rowIndex, columnIndex, value) {
        this.data[rowIndex][columnIndex] = value;
        return this;
    }
    get(rowIndex, columnIndex) {
        return this.data[rowIndex][columnIndex];
    }
}
function wrap(array, options) {
    if (isAnyArray.isAnyArray(array)) {
        if (array[0] && isAnyArray.isAnyArray(array[0])) {
            return new WrapperMatrix2D(array);
        } else {
            return new WrapperMatrix1D(array, options);
        }
    } else {
        throw new Error('the argument is not an array');
    }
}
class LuDecomposition {
    constructor(matrix){
        matrix = WrapperMatrix2D.checkMatrix(matrix);
        let lu = matrix.clone();
        let rows = lu.rows;
        let columns = lu.columns;
        let pivotVector = new Float64Array(rows);
        let pivotSign = 1;
        let i, j, k, p, s, t, v;
        let LUcolj, kmax;
        for(i = 0; i < rows; i++){
            pivotVector[i] = i;
        }
        LUcolj = new Float64Array(rows);
        for(j = 0; j < columns; j++){
            for(i = 0; i < rows; i++){
                LUcolj[i] = lu.get(i, j);
            }
            for(i = 0; i < rows; i++){
                kmax = Math.min(i, j);
                s = 0;
                for(k = 0; k < kmax; k++){
                    s += lu.get(i, k) * LUcolj[k];
                }
                LUcolj[i] -= s;
                lu.set(i, j, LUcolj[i]);
            }
            p = j;
            for(i = j + 1; i < rows; i++){
                if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
                    p = i;
                }
            }
            if (p !== j) {
                for(k = 0; k < columns; k++){
                    t = lu.get(p, k);
                    lu.set(p, k, lu.get(j, k));
                    lu.set(j, k, t);
                }
                v = pivotVector[p];
                pivotVector[p] = pivotVector[j];
                pivotVector[j] = v;
                pivotSign = -pivotSign;
            }
            if (j < rows && lu.get(j, j) !== 0) {
                for(i = j + 1; i < rows; i++){
                    lu.set(i, j, lu.get(i, j) / lu.get(j, j));
                }
            }
        }
        this.LU = lu;
        this.pivotVector = pivotVector;
        this.pivotSign = pivotSign;
    }
    isSingular() {
        let data = this.LU;
        let col = data.columns;
        for(let j = 0; j < col; j++){
            if (data.get(j, j) === 0) {
                return true;
            }
        }
        return false;
    }
    solve(value) {
        value = Matrix.checkMatrix(value);
        let lu = this.LU;
        let rows = lu.rows;
        if (rows !== value.rows) {
            throw new Error('Invalid matrix dimensions');
        }
        if (this.isSingular()) {
            throw new Error('LU matrix is singular');
        }
        let count = value.columns;
        let X = value.subMatrixRow(this.pivotVector, 0, count - 1);
        let columns = lu.columns;
        let i, j, k;
        for(k = 0; k < columns; k++){
            for(i = k + 1; i < columns; i++){
                for(j = 0; j < count; j++){
                    X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));
                }
            }
        }
        for(k = columns - 1; k >= 0; k--){
            for(j = 0; j < count; j++){
                X.set(k, j, X.get(k, j) / lu.get(k, k));
            }
            for(i = 0; i < k; i++){
                for(j = 0; j < count; j++){
                    X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));
                }
            }
        }
        return X;
    }
    get determinant() {
        let data = this.LU;
        if (!data.isSquare()) {
            throw new Error('Matrix must be square');
        }
        let determinant = this.pivotSign;
        let col = data.columns;
        for(let j = 0; j < col; j++){
            determinant *= data.get(j, j);
        }
        return determinant;
    }
    get lowerTriangularMatrix() {
        let data = this.LU;
        let rows = data.rows;
        let columns = data.columns;
        let X = new Matrix(rows, columns);
        for(let i = 0; i < rows; i++){
            for(let j = 0; j < columns; j++){
                if (i > j) {
                    X.set(i, j, data.get(i, j));
                } else if (i === j) {
                    X.set(i, j, 1);
                } else {
                    X.set(i, j, 0);
                }
            }
        }
        return X;
    }
    get upperTriangularMatrix() {
        let data = this.LU;
        let rows = data.rows;
        let columns = data.columns;
        let X = new Matrix(rows, columns);
        for(let i = 0; i < rows; i++){
            for(let j = 0; j < columns; j++){
                if (i <= j) {
                    X.set(i, j, data.get(i, j));
                } else {
                    X.set(i, j, 0);
                }
            }
        }
        return X;
    }
    get pivotPermutationVector() {
        return Array.from(this.pivotVector);
    }
}
function hypotenuse(a, b) {
    let r = 0;
    if (Math.abs(a) > Math.abs(b)) {
        r = b / a;
        return Math.abs(a) * Math.sqrt(1 + r * r);
    }
    if (b !== 0) {
        r = a / b;
        return Math.abs(b) * Math.sqrt(1 + r * r);
    }
    return 0;
}
class QrDecomposition {
    constructor(value){
        value = WrapperMatrix2D.checkMatrix(value);
        let qr = value.clone();
        let m = value.rows;
        let n = value.columns;
        let rdiag = new Float64Array(n);
        let i, j, k, s;
        for(k = 0; k < n; k++){
            let nrm = 0;
            for(i = k; i < m; i++){
                nrm = hypotenuse(nrm, qr.get(i, k));
            }
            if (nrm !== 0) {
                if (qr.get(k, k) < 0) {
                    nrm = -nrm;
                }
                for(i = k; i < m; i++){
                    qr.set(i, k, qr.get(i, k) / nrm);
                }
                qr.set(k, k, qr.get(k, k) + 1);
                for(j = k + 1; j < n; j++){
                    s = 0;
                    for(i = k; i < m; i++){
                        s += qr.get(i, k) * qr.get(i, j);
                    }
                    s = -s / qr.get(k, k);
                    for(i = k; i < m; i++){
                        qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));
                    }
                }
            }
            rdiag[k] = -nrm;
        }
        this.QR = qr;
        this.Rdiag = rdiag;
    }
    solve(value) {
        value = Matrix.checkMatrix(value);
        let qr = this.QR;
        let m = qr.rows;
        if (value.rows !== m) {
            throw new Error('Matrix row dimensions must agree');
        }
        if (!this.isFullRank()) {
            throw new Error('Matrix is rank deficient');
        }
        let count = value.columns;
        let X = value.clone();
        let n = qr.columns;
        let i, j, k, s;
        for(k = 0; k < n; k++){
            for(j = 0; j < count; j++){
                s = 0;
                for(i = k; i < m; i++){
                    s += qr.get(i, k) * X.get(i, j);
                }
                s = -s / qr.get(k, k);
                for(i = k; i < m; i++){
                    X.set(i, j, X.get(i, j) + s * qr.get(i, k));
                }
            }
        }
        for(k = n - 1; k >= 0; k--){
            for(j = 0; j < count; j++){
                X.set(k, j, X.get(k, j) / this.Rdiag[k]);
            }
            for(i = 0; i < k; i++){
                for(j = 0; j < count; j++){
                    X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));
                }
            }
        }
        return X.subMatrix(0, n - 1, 0, count - 1);
    }
    isFullRank() {
        let columns = this.QR.columns;
        for(let i = 0; i < columns; i++){
            if (this.Rdiag[i] === 0) {
                return false;
            }
        }
        return true;
    }
    get upperTriangularMatrix() {
        let qr = this.QR;
        let n = qr.columns;
        let X = new Matrix(n, n);
        let i, j;
        for(i = 0; i < n; i++){
            for(j = 0; j < n; j++){
                if (i < j) {
                    X.set(i, j, qr.get(i, j));
                } else if (i === j) {
                    X.set(i, j, this.Rdiag[i]);
                } else {
                    X.set(i, j, 0);
                }
            }
        }
        return X;
    }
    get orthogonalMatrix() {
        let qr = this.QR;
        let rows = qr.rows;
        let columns = qr.columns;
        let X = new Matrix(rows, columns);
        let i, j, k, s;
        for(k = columns - 1; k >= 0; k--){
            for(i = 0; i < rows; i++){
                X.set(i, k, 0);
            }
            X.set(k, k, 1);
            for(j = k; j < columns; j++){
                if (qr.get(k, k) !== 0) {
                    s = 0;
                    for(i = k; i < rows; i++){
                        s += qr.get(i, k) * X.get(i, j);
                    }
                    s = -s / qr.get(k, k);
                    for(i = k; i < rows; i++){
                        X.set(i, j, X.get(i, j) + s * qr.get(i, k));
                    }
                }
            }
        }
        return X;
    }
}
class SingularValueDecomposition {
    constructor(value, options = {}){
        value = WrapperMatrix2D.checkMatrix(value);
        if (value.isEmpty()) {
            throw new Error('Matrix must be non-empty');
        }
        let m = value.rows;
        let n = value.columns;
        const { computeLeftSingularVectors = true, computeRightSingularVectors = true, autoTranspose = false } = options;
        let wantu = Boolean(computeLeftSingularVectors);
        let wantv = Boolean(computeRightSingularVectors);
        let swapped = false;
        let a;
        if (m < n) {
            if (!autoTranspose) {
                a = value.clone();
                // eslint-disable-next-line no-console
                console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');
            } else {
                a = value.transpose();
                m = a.rows;
                n = a.columns;
                swapped = true;
                let aux = wantu;
                wantu = wantv;
                wantv = aux;
            }
        } else {
            a = value.clone();
        }
        let nu = Math.min(m, n);
        let ni = Math.min(m + 1, n);
        let s = new Float64Array(ni);
        let U = new Matrix(m, nu);
        let V = new Matrix(n, n);
        let e = new Float64Array(n);
        let work = new Float64Array(m);
        let si = new Float64Array(ni);
        for(let i = 0; i < ni; i++)si[i] = i;
        let nct = Math.min(m - 1, n);
        let nrt = Math.max(0, Math.min(n - 2, m));
        let mrc = Math.max(nct, nrt);
        for(let k = 0; k < mrc; k++){
            if (k < nct) {
                s[k] = 0;
                for(let i = k; i < m; i++){
                    s[k] = hypotenuse(s[k], a.get(i, k));
                }
                if (s[k] !== 0) {
                    if (a.get(k, k) < 0) {
                        s[k] = -s[k];
                    }
                    for(let i = k; i < m; i++){
                        a.set(i, k, a.get(i, k) / s[k]);
                    }
                    a.set(k, k, a.get(k, k) + 1);
                }
                s[k] = -s[k];
            }
            for(let j = k + 1; j < n; j++){
                if (k < nct && s[k] !== 0) {
                    let t = 0;
                    for(let i = k; i < m; i++){
                        t += a.get(i, k) * a.get(i, j);
                    }
                    t = -t / a.get(k, k);
                    for(let i = k; i < m; i++){
                        a.set(i, j, a.get(i, j) + t * a.get(i, k));
                    }
                }
                e[j] = a.get(k, j);
            }
            if (wantu && k < nct) {
                for(let i = k; i < m; i++){
                    U.set(i, k, a.get(i, k));
                }
            }
            if (k < nrt) {
                e[k] = 0;
                for(let i = k + 1; i < n; i++){
                    e[k] = hypotenuse(e[k], e[i]);
                }
                if (e[k] !== 0) {
                    if (e[k + 1] < 0) {
                        e[k] = 0 - e[k];
                    }
                    for(let i = k + 1; i < n; i++){
                        e[i] /= e[k];
                    }
                    e[k + 1] += 1;
                }
                e[k] = -e[k];
                if (k + 1 < m && e[k] !== 0) {
                    for(let i = k + 1; i < m; i++){
                        work[i] = 0;
                    }
                    for(let i = k + 1; i < m; i++){
                        for(let j = k + 1; j < n; j++){
                            work[i] += e[j] * a.get(i, j);
                        }
                    }
                    for(let j = k + 1; j < n; j++){
                        let t = -e[j] / e[k + 1];
                        for(let i = k + 1; i < m; i++){
                            a.set(i, j, a.get(i, j) + t * work[i]);
                        }
                    }
                }
                if (wantv) {
                    for(let i = k + 1; i < n; i++){
                        V.set(i, k, e[i]);
                    }
                }
            }
        }
        let p = Math.min(n, m + 1);
        if (nct < n) {
            s[nct] = a.get(nct, nct);
        }
        if (m < p) {
            s[p - 1] = 0;
        }
        if (nrt + 1 < p) {
            e[nrt] = a.get(nrt, p - 1);
        }
        e[p - 1] = 0;
        if (wantu) {
            for(let j = nct; j < nu; j++){
                for(let i = 0; i < m; i++){
                    U.set(i, j, 0);
                }
                U.set(j, j, 1);
            }
            for(let k = nct - 1; k >= 0; k--){
                if (s[k] !== 0) {
                    for(let j = k + 1; j < nu; j++){
                        let t = 0;
                        for(let i = k; i < m; i++){
                            t += U.get(i, k) * U.get(i, j);
                        }
                        t = -t / U.get(k, k);
                        for(let i = k; i < m; i++){
                            U.set(i, j, U.get(i, j) + t * U.get(i, k));
                        }
                    }
                    for(let i = k; i < m; i++){
                        U.set(i, k, -U.get(i, k));
                    }
                    U.set(k, k, 1 + U.get(k, k));
                    for(let i = 0; i < k - 1; i++){
                        U.set(i, k, 0);
                    }
                } else {
                    for(let i = 0; i < m; i++){
                        U.set(i, k, 0);
                    }
                    U.set(k, k, 1);
                }
            }
        }
        if (wantv) {
            for(let k = n - 1; k >= 0; k--){
                if (k < nrt && e[k] !== 0) {
                    for(let j = k + 1; j < n; j++){
                        let t = 0;
                        for(let i = k + 1; i < n; i++){
                            t += V.get(i, k) * V.get(i, j);
                        }
                        t = -t / V.get(k + 1, k);
                        for(let i = k + 1; i < n; i++){
                            V.set(i, j, V.get(i, j) + t * V.get(i, k));
                        }
                    }
                }
                for(let i = 0; i < n; i++){
                    V.set(i, k, 0);
                }
                V.set(k, k, 1);
            }
        }
        let pp = p - 1;
        let eps = Number.EPSILON;
        while(p > 0){
            let k, kase;
            for(k = p - 2; k >= -1; k--){
                if (k === -1) {
                    break;
                }
                const alpha = Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));
                if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {
                    e[k] = 0;
                    break;
                }
            }
            if (k === p - 2) {
                kase = 4;
            } else {
                let ks;
                for(ks = p - 1; ks >= k; ks--){
                    if (ks === k) {
                        break;
                    }
                    let t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);
                    if (Math.abs(s[ks]) <= eps * t) {
                        s[ks] = 0;
                        break;
                    }
                }
                if (ks === k) {
                    kase = 3;
                } else if (ks === p - 1) {
                    kase = 1;
                } else {
                    kase = 2;
                    k = ks;
                }
            }
            k++;
            switch(kase){
                case 1:
                    {
                        let f = e[p - 2];
                        e[p - 2] = 0;
                        for(let j = p - 2; j >= k; j--){
                            let t = hypotenuse(s[j], f);
                            let cs = s[j] / t;
                            let sn = f / t;
                            s[j] = t;
                            if (j !== k) {
                                f = -sn * e[j - 1];
                                e[j - 1] = cs * e[j - 1];
                            }
                            if (wantv) {
                                for(let i = 0; i < n; i++){
                                    t = cs * V.get(i, j) + sn * V.get(i, p - 1);
                                    V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));
                                    V.set(i, j, t);
                                }
                            }
                        }
                        break;
                    }
                case 2:
                    {
                        let f = e[k - 1];
                        e[k - 1] = 0;
                        for(let j = k; j < p; j++){
                            let t = hypotenuse(s[j], f);
                            let cs = s[j] / t;
                            let sn = f / t;
                            s[j] = t;
                            f = -sn * e[j];
                            e[j] = cs * e[j];
                            if (wantu) {
                                for(let i = 0; i < m; i++){
                                    t = cs * U.get(i, j) + sn * U.get(i, k - 1);
                                    U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));
                                    U.set(i, j, t);
                                }
                            }
                        }
                        break;
                    }
                case 3:
                    {
                        const scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));
                        const sp = s[p - 1] / scale;
                        const spm1 = s[p - 2] / scale;
                        const epm1 = e[p - 2] / scale;
                        const sk = s[k] / scale;
                        const ek = e[k] / scale;
                        const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;
                        const c = sp * epm1 * (sp * epm1);
                        let shift = 0;
                        if (b !== 0 || c !== 0) {
                            if (b < 0) {
                                shift = 0 - Math.sqrt(b * b + c);
                            } else {
                                shift = Math.sqrt(b * b + c);
                            }
                            shift = c / (b + shift);
                        }
                        let f = (sk + sp) * (sk - sp) + shift;
                        let g = sk * ek;
                        for(let j = k; j < p - 1; j++){
                            let t = hypotenuse(f, g);
                            if (t === 0) t = Number.MIN_VALUE;
                            let cs = f / t;
                            let sn = g / t;
                            if (j !== k) {
                                e[j - 1] = t;
                            }
                            f = cs * s[j] + sn * e[j];
                            e[j] = cs * e[j] - sn * s[j];
                            g = sn * s[j + 1];
                            s[j + 1] = cs * s[j + 1];
                            if (wantv) {
                                for(let i = 0; i < n; i++){
                                    t = cs * V.get(i, j) + sn * V.get(i, j + 1);
                                    V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));
                                    V.set(i, j, t);
                                }
                            }
                            t = hypotenuse(f, g);
                            if (t === 0) t = Number.MIN_VALUE;
                            cs = f / t;
                            sn = g / t;
                            s[j] = t;
                            f = cs * e[j] + sn * s[j + 1];
                            s[j + 1] = -sn * e[j] + cs * s[j + 1];
                            g = sn * e[j + 1];
                            e[j + 1] = cs * e[j + 1];
                            if (wantu && j < m - 1) {
                                for(let i = 0; i < m; i++){
                                    t = cs * U.get(i, j) + sn * U.get(i, j + 1);
                                    U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));
                                    U.set(i, j, t);
                                }
                            }
                        }
                        e[p - 2] = f;
                        break;
                    }
                case 4:
                    {
                        if (s[k] <= 0) {
                            s[k] = s[k] < 0 ? -s[k] : 0;
                            if (wantv) {
                                for(let i = 0; i <= pp; i++){
                                    V.set(i, k, -V.get(i, k));
                                }
                            }
                        }
                        while(k < pp){
                            if (s[k] >= s[k + 1]) {
                                break;
                            }
                            let t = s[k];
                            s[k] = s[k + 1];
                            s[k + 1] = t;
                            if (wantv && k < n - 1) {
                                for(let i = 0; i < n; i++){
                                    t = V.get(i, k + 1);
                                    V.set(i, k + 1, V.get(i, k));
                                    V.set(i, k, t);
                                }
                            }
                            if (wantu && k < m - 1) {
                                for(let i = 0; i < m; i++){
                                    t = U.get(i, k + 1);
                                    U.set(i, k + 1, U.get(i, k));
                                    U.set(i, k, t);
                                }
                            }
                            k++;
                        }
                        p--;
                        break;
                    }
            }
        }
        if (swapped) {
            let tmp = V;
            V = U;
            U = tmp;
        }
        this.m = m;
        this.n = n;
        this.s = s;
        this.U = U;
        this.V = V;
    }
    solve(value) {
        let Y = value;
        let e = this.threshold;
        let scols = this.s.length;
        let Ls = Matrix.zeros(scols, scols);
        for(let i = 0; i < scols; i++){
            if (Math.abs(this.s[i]) <= e) {
                Ls.set(i, i, 0);
            } else {
                Ls.set(i, i, 1 / this.s[i]);
            }
        }
        let U = this.U;
        let V = this.rightSingularVectors;
        let VL = V.mmul(Ls);
        let vrows = V.rows;
        let urows = U.rows;
        let VLU = Matrix.zeros(vrows, urows);
        for(let i = 0; i < vrows; i++){
            for(let j = 0; j < urows; j++){
                let sum = 0;
                for(let k = 0; k < scols; k++){
                    sum += VL.get(i, k) * U.get(j, k);
                }
                VLU.set(i, j, sum);
            }
        }
        return VLU.mmul(Y);
    }
    solveForDiagonal(value) {
        return this.solve(Matrix.diag(value));
    }
    inverse() {
        let V = this.V;
        let e = this.threshold;
        let vrows = V.rows;
        let vcols = V.columns;
        let X = new Matrix(vrows, this.s.length);
        for(let i = 0; i < vrows; i++){
            for(let j = 0; j < vcols; j++){
                if (Math.abs(this.s[j]) > e) {
                    X.set(i, j, V.get(i, j) / this.s[j]);
                }
            }
        }
        let U = this.U;
        let urows = U.rows;
        let ucols = U.columns;
        let Y = new Matrix(vrows, urows);
        for(let i = 0; i < vrows; i++){
            for(let j = 0; j < urows; j++){
                let sum = 0;
                for(let k = 0; k < ucols; k++){
                    sum += X.get(i, k) * U.get(j, k);
                }
                Y.set(i, j, sum);
            }
        }
        return Y;
    }
    get condition() {
        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];
    }
    get norm2() {
        return this.s[0];
    }
    get rank() {
        let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;
        let r = 0;
        let s = this.s;
        for(let i = 0, ii = s.length; i < ii; i++){
            if (s[i] > tol) {
                r++;
            }
        }
        return r;
    }
    get diagonal() {
        return Array.from(this.s);
    }
    get threshold() {
        return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];
    }
    get leftSingularVectors() {
        return this.U;
    }
    get rightSingularVectors() {
        return this.V;
    }
    get diagonalMatrix() {
        return Matrix.diag(this.s);
    }
}
function inverse(matrix, useSVD = false) {
    matrix = WrapperMatrix2D.checkMatrix(matrix);
    if (useSVD) {
        return new SingularValueDecomposition(matrix).inverse();
    } else {
        return solve(matrix, Matrix.eye(matrix.rows));
    }
}
function solve(leftHandSide, rightHandSide, useSVD = false) {
    leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);
    rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);
    if (useSVD) {
        return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);
    } else {
        return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);
    }
}
function determinant(matrix) {
    matrix = Matrix.checkMatrix(matrix);
    if (matrix.isSquare()) {
        if (matrix.columns === 0) {
            return 1;
        }
        let a, b, c, d;
        if (matrix.columns === 2) {
            // 2 x 2 matrix
            a = matrix.get(0, 0);
            b = matrix.get(0, 1);
            c = matrix.get(1, 0);
            d = matrix.get(1, 1);
            return a * d - b * c;
        } else if (matrix.columns === 3) {
            // 3 x 3 matrix
            let subMatrix0, subMatrix1, subMatrix2;
            subMatrix0 = new MatrixSelectionView(matrix, [
                1,
                2
            ], [
                1,
                2
            ]);
            subMatrix1 = new MatrixSelectionView(matrix, [
                1,
                2
            ], [
                0,
                2
            ]);
            subMatrix2 = new MatrixSelectionView(matrix, [
                1,
                2
            ], [
                0,
                1
            ]);
            a = matrix.get(0, 0);
            b = matrix.get(0, 1);
            c = matrix.get(0, 2);
            return a * determinant(subMatrix0) - b * determinant(subMatrix1) + c * determinant(subMatrix2);
        } else {
            // general purpose determinant using the LU decomposition
            return new LuDecomposition(matrix).determinant;
        }
    } else {
        throw Error('determinant can only be calculated for a square matrix');
    }
}
function xrange(n, exception) {
    let range = [];
    for(let i = 0; i < n; i++){
        if (i !== exception) {
            range.push(i);
        }
    }
    return range;
}
function dependenciesOneRow(error, matrix, index, thresholdValue = 10e-10, thresholdError = 10e-10) {
    if (error > thresholdError) {
        return new Array(matrix.rows + 1).fill(0);
    } else {
        let returnArray = matrix.addRow(index, [
            0
        ]);
        for(let i = 0; i < returnArray.rows; i++){
            if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {
                returnArray.set(i, 0, 0);
            }
        }
        return returnArray.to1DArray();
    }
}
function linearDependencies(matrix, options = {}) {
    const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;
    matrix = Matrix.checkMatrix(matrix);
    let n = matrix.rows;
    let results = new Matrix(n, n);
    for(let i = 0; i < n; i++){
        let b = Matrix.columnVector(matrix.getRow(i));
        let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();
        let svd = new SingularValueDecomposition(Abis);
        let x = svd.solve(b);
        let error = Matrix.sub(b, Abis.mmul(x)).abs().max();
        results.setRow(i, dependenciesOneRow(error, x, i, thresholdValue, thresholdError));
    }
    return results;
}
function pseudoInverse(matrix, threshold = Number.EPSILON) {
    matrix = Matrix.checkMatrix(matrix);
    if (matrix.isEmpty()) {
        // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular
        // (0xn)*(nx0)*(0xn) = 0xn
        // (nx0)*(0xn)*(nx0) = nx0
        return matrix.transpose();
    }
    let svdSolution = new SingularValueDecomposition(matrix, {
        autoTranspose: true
    });
    let U = svdSolution.leftSingularVectors;
    let V = svdSolution.rightSingularVectors;
    let s = svdSolution.diagonal;
    for(let i = 0; i < s.length; i++){
        if (Math.abs(s[i]) > threshold) {
            s[i] = 1.0 / s[i];
        } else {
            s[i] = 0.0;
        }
    }
    return V.mmul(Matrix.diag(s).mmul(U.transpose()));
}
function covariance(xMatrix, yMatrix = xMatrix, options = {}) {
    xMatrix = new Matrix(xMatrix);
    let yIsSame = false;
    if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !isAnyArray.isAnyArray(yMatrix)) {
        options = yMatrix;
        yMatrix = xMatrix;
        yIsSame = true;
    } else {
        yMatrix = new Matrix(yMatrix);
    }
    if (xMatrix.rows !== yMatrix.rows) {
        throw new TypeError('Both matrices must have the same number of rows');
    }
    const { center = true } = options;
    if (center) {
        xMatrix = xMatrix.center('column');
        if (!yIsSame) {
            yMatrix = yMatrix.center('column');
        }
    }
    const cov = xMatrix.transpose().mmul(yMatrix);
    for(let i = 0; i < cov.rows; i++){
        for(let j = 0; j < cov.columns; j++){
            cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));
        }
    }
    return cov;
}
function correlation(xMatrix, yMatrix = xMatrix, options = {}) {
    xMatrix = new Matrix(xMatrix);
    let yIsSame = false;
    if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !isAnyArray.isAnyArray(yMatrix)) {
        options = yMatrix;
        yMatrix = xMatrix;
        yIsSame = true;
    } else {
        yMatrix = new Matrix(yMatrix);
    }
    if (xMatrix.rows !== yMatrix.rows) {
        throw new TypeError('Both matrices must have the same number of rows');
    }
    const { center = true, scale = true } = options;
    if (center) {
        xMatrix.center('column');
        if (!yIsSame) {
            yMatrix.center('column');
        }
    }
    if (scale) {
        xMatrix.scale('column');
        if (!yIsSame) {
            yMatrix.scale('column');
        }
    }
    const sdx = xMatrix.standardDeviation('column', {
        unbiased: true
    });
    const sdy = yIsSame ? sdx : yMatrix.standardDeviation('column', {
        unbiased: true
    });
    const corr = xMatrix.transpose().mmul(yMatrix);
    for(let i = 0; i < corr.rows; i++){
        for(let j = 0; j < corr.columns; j++){
            corr.set(i, j, corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)));
        }
    }
    return corr;
}
class EigenvalueDecomposition {
    constructor(matrix, options = {}){
        const { assumeSymmetric = false } = options;
        matrix = WrapperMatrix2D.checkMatrix(matrix);
        if (!matrix.isSquare()) {
            throw new Error('Matrix is not a square matrix');
        }
        if (matrix.isEmpty()) {
            throw new Error('Matrix must be non-empty');
        }
        let n = matrix.columns;
        let V = new Matrix(n, n);
        let d = new Float64Array(n);
        let e = new Float64Array(n);
        let value = matrix;
        let i, j;
        let isSymmetric = false;
        if (assumeSymmetric) {
            isSymmetric = true;
        } else {
            isSymmetric = matrix.isSymmetric();
        }
        if (isSymmetric) {
            for(i = 0; i < n; i++){
                for(j = 0; j < n; j++){
                    V.set(i, j, value.get(i, j));
                }
            }
            tred2(n, e, d, V);
            tql2(n, e, d, V);
        } else {
            let H = new Matrix(n, n);
            let ort = new Float64Array(n);
            for(j = 0; j < n; j++){
                for(i = 0; i < n; i++){
                    H.set(i, j, value.get(i, j));
                }
            }
            orthes(n, H, ort, V);
            hqr2(n, e, d, V, H);
        }
        this.n = n;
        this.e = e;
        this.d = d;
        this.V = V;
    }
    get realEigenvalues() {
        return Array.from(this.d);
    }
    get imaginaryEigenvalues() {
        return Array.from(this.e);
    }
    get eigenvectorMatrix() {
        return this.V;
    }
    get diagonalMatrix() {
        let n = this.n;
        let e = this.e;
        let d = this.d;
        let X = new Matrix(n, n);
        let i, j;
        for(i = 0; i < n; i++){
            for(j = 0; j < n; j++){
                X.set(i, j, 0);
            }
            X.set(i, i, d[i]);
            if (e[i] > 0) {
                X.set(i, i + 1, e[i]);
            } else if (e[i] < 0) {
                X.set(i, i - 1, e[i]);
            }
        }
        return X;
    }
}
function tred2(n, e, d, V) {
    let f, g, h, i, j, k, hh, scale;
    for(j = 0; j < n; j++){
        d[j] = V.get(n - 1, j);
    }
    for(i = n - 1; i > 0; i--){
        scale = 0;
        h = 0;
        for(k = 0; k < i; k++){
            scale = scale + Math.abs(d[k]);
        }
        if (scale === 0) {
            e[i] = d[i - 1];
            for(j = 0; j < i; j++){
                d[j] = V.get(i - 1, j);
                V.set(i, j, 0);
                V.set(j, i, 0);
            }
        } else {
            for(k = 0; k < i; k++){
                d[k] /= scale;
                h += d[k] * d[k];
            }
            f = d[i - 1];
            g = Math.sqrt(h);
            if (f > 0) {
                g = -g;
            }
            e[i] = scale * g;
            h = h - f * g;
            d[i - 1] = f - g;
            for(j = 0; j < i; j++){
                e[j] = 0;
            }
            for(j = 0; j < i; j++){
                f = d[j];
                V.set(j, i, f);
                g = e[j] + V.get(j, j) * f;
                for(k = j + 1; k <= i - 1; k++){
                    g += V.get(k, j) * d[k];
                    e[k] += V.get(k, j) * f;
                }
                e[j] = g;
            }
            f = 0;
            for(j = 0; j < i; j++){
                e[j] /= h;
                f += e[j] * d[j];
            }
            hh = f / (h + h);
            for(j = 0; j < i; j++){
                e[j] -= hh * d[j];
            }
            for(j = 0; j < i; j++){
                f = d[j];
                g = e[j];
                for(k = j; k <= i - 1; k++){
                    V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));
                }
                d[j] = V.get(i - 1, j);
                V.set(i, j, 0);
            }
        }
        d[i] = h;
    }
    for(i = 0; i < n - 1; i++){
        V.set(n - 1, i, V.get(i, i));
        V.set(i, i, 1);
        h = d[i + 1];
        if (h !== 0) {
            for(k = 0; k <= i; k++){
                d[k] = V.get(k, i + 1) / h;
            }
            for(j = 0; j <= i; j++){
                g = 0;
                for(k = 0; k <= i; k++){
                    g += V.get(k, i + 1) * V.get(k, j);
                }
                for(k = 0; k <= i; k++){
                    V.set(k, j, V.get(k, j) - g * d[k]);
                }
            }
        }
        for(k = 0; k <= i; k++){
            V.set(k, i + 1, 0);
        }
    }
    for(j = 0; j < n; j++){
        d[j] = V.get(n - 1, j);
        V.set(n - 1, j, 0);
    }
    V.set(n - 1, n - 1, 1);
    e[0] = 0;
}
function tql2(n, e, d, V) {
    let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;
    for(i = 1; i < n; i++){
        e[i - 1] = e[i];
    }
    e[n - 1] = 0;
    let f = 0;
    let tst1 = 0;
    let eps = Number.EPSILON;
    for(l = 0; l < n; l++){
        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
        m = l;
        while(m < n){
            if (Math.abs(e[m]) <= eps * tst1) {
                break;
            }
            m++;
        }
        if (m > l) {
            do {
                g = d[l];
                p = (d[l + 1] - g) / (2 * e[l]);
                r = hypotenuse(p, 1);
                if (p < 0) {
                    r = -r;
                }
                d[l] = e[l] / (p + r);
                d[l + 1] = e[l] * (p + r);
                dl1 = d[l + 1];
                h = g - d[l];
                for(i = l + 2; i < n; i++){
                    d[i] -= h;
                }
                f = f + h;
                p = d[m];
                c = 1;
                c2 = c;
                c3 = c;
                el1 = e[l + 1];
                s = 0;
                s2 = 0;
                for(i = m - 1; i >= l; i--){
                    c3 = c2;
                    c2 = c;
                    s2 = s;
                    g = c * e[i];
                    h = c * p;
                    r = hypotenuse(p, e[i]);
                    e[i + 1] = s * r;
                    s = e[i] / r;
                    c = p / r;
                    p = c * d[i] - s * g;
                    d[i + 1] = h + s * (c * g + s * d[i]);
                    for(k = 0; k < n; k++){
                        h = V.get(k, i + 1);
                        V.set(k, i + 1, s * V.get(k, i) + c * h);
                        V.set(k, i, c * V.get(k, i) - s * h);
                    }
                }
                p = -s * s2 * c3 * el1 * e[l] / dl1;
                e[l] = s * p;
                d[l] = c * p;
            }while (Math.abs(e[l]) > eps * tst1)
        }
        d[l] = d[l] + f;
        e[l] = 0;
    }
    for(i = 0; i < n - 1; i++){
        k = i;
        p = d[i];
        for(j = i + 1; j < n; j++){
            if (d[j] < p) {
                k = j;
                p = d[j];
            }
        }
        if (k !== i) {
            d[k] = d[i];
            d[i] = p;
            for(j = 0; j < n; j++){
                p = V.get(j, i);
                V.set(j, i, V.get(j, k));
                V.set(j, k, p);
            }
        }
    }
}
function orthes(n, H, ort, V) {
    let low = 0;
    let high = n - 1;
    let f, g, h, i, j, m;
    let scale;
    for(m = low + 1; m <= high - 1; m++){
        scale = 0;
        for(i = m; i <= high; i++){
            scale = scale + Math.abs(H.get(i, m - 1));
        }
        if (scale !== 0) {
            h = 0;
            for(i = high; i >= m; i--){
                ort[i] = H.get(i, m - 1) / scale;
                h += ort[i] * ort[i];
            }
            g = Math.sqrt(h);
            if (ort[m] > 0) {
                g = -g;
            }
            h = h - ort[m] * g;
            ort[m] = ort[m] - g;
            for(j = m; j < n; j++){
                f = 0;
                for(i = high; i >= m; i--){
                    f += ort[i] * H.get(i, j);
                }
                f = f / h;
                for(i = m; i <= high; i++){
                    H.set(i, j, H.get(i, j) - f * ort[i]);
                }
            }
            for(i = 0; i <= high; i++){
                f = 0;
                for(j = high; j >= m; j--){
                    f += ort[j] * H.get(i, j);
                }
                f = f / h;
                for(j = m; j <= high; j++){
                    H.set(i, j, H.get(i, j) - f * ort[j]);
                }
            }
            ort[m] = scale * ort[m];
            H.set(m, m - 1, scale * g);
        }
    }
    for(i = 0; i < n; i++){
        for(j = 0; j < n; j++){
            V.set(i, j, i === j ? 1 : 0);
        }
    }
    for(m = high - 1; m >= low + 1; m--){
        if (H.get(m, m - 1) !== 0) {
            for(i = m + 1; i <= high; i++){
                ort[i] = H.get(i, m - 1);
            }
            for(j = m; j <= high; j++){
                g = 0;
                for(i = m; i <= high; i++){
                    g += ort[i] * V.get(i, j);
                }
                g = g / ort[m] / H.get(m, m - 1);
                for(i = m; i <= high; i++){
                    V.set(i, j, V.get(i, j) + g * ort[i]);
                }
            }
        }
    }
}
function hqr2(nn, e, d, V, H) {
    let n = nn - 1;
    let low = 0;
    let high = nn - 1;
    let eps = Number.EPSILON;
    let exshift = 0;
    let norm = 0;
    let p = 0;
    let q = 0;
    let r = 0;
    let s = 0;
    let z = 0;
    let iter = 0;
    let i, j, k, l, m, t, w, x, y;
    let ra, sa, vr, vi;
    let notlast, cdivres;
    for(i = 0; i < nn; i++){
        if (i < low || i > high) {
            d[i] = H.get(i, i);
            e[i] = 0;
        }
        for(j = Math.max(i - 1, 0); j < nn; j++){
            norm = norm + Math.abs(H.get(i, j));
        }
    }
    while(n >= low){
        l = n;
        while(l > low){
            s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));
            if (s === 0) {
                s = norm;
            }
            if (Math.abs(H.get(l, l - 1)) < eps * s) {
                break;
            }
            l--;
        }
        if (l === n) {
            H.set(n, n, H.get(n, n) + exshift);
            d[n] = H.get(n, n);
            e[n] = 0;
            n--;
            iter = 0;
        } else if (l === n - 1) {
            w = H.get(n, n - 1) * H.get(n - 1, n);
            p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;
            q = p * p + w;
            z = Math.sqrt(Math.abs(q));
            H.set(n, n, H.get(n, n) + exshift);
            H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);
            x = H.get(n, n);
            if (q >= 0) {
                z = p >= 0 ? p + z : p - z;
                d[n - 1] = x + z;
                d[n] = d[n - 1];
                if (z !== 0) {
                    d[n] = x - w / z;
                }
                e[n - 1] = 0;
                e[n] = 0;
                x = H.get(n, n - 1);
                s = Math.abs(x) + Math.abs(z);
                p = x / s;
                q = z / s;
                r = Math.sqrt(p * p + q * q);
                p = p / r;
                q = q / r;
                for(j = n - 1; j < nn; j++){
                    z = H.get(n - 1, j);
                    H.set(n - 1, j, q * z + p * H.get(n, j));
                    H.set(n, j, q * H.get(n, j) - p * z);
                }
                for(i = 0; i <= n; i++){
                    z = H.get(i, n - 1);
                    H.set(i, n - 1, q * z + p * H.get(i, n));
                    H.set(i, n, q * H.get(i, n) - p * z);
                }
                for(i = low; i <= high; i++){
                    z = V.get(i, n - 1);
                    V.set(i, n - 1, q * z + p * V.get(i, n));
                    V.set(i, n, q * V.get(i, n) - p * z);
                }
            } else {
                d[n - 1] = x + p;
                d[n] = x + p;
                e[n - 1] = z;
                e[n] = -z;
            }
            n = n - 2;
            iter = 0;
        } else {
            x = H.get(n, n);
            y = 0;
            w = 0;
            if (l < n) {
                y = H.get(n - 1, n - 1);
                w = H.get(n, n - 1) * H.get(n - 1, n);
            }
            if (iter === 10) {
                exshift += x;
                for(i = low; i <= n; i++){
                    H.set(i, i, H.get(i, i) - x);
                }
                s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));
                // eslint-disable-next-line no-multi-assign
                x = y = 0.75 * s;
                w = -0.4375 * s * s;
            }
            if (iter === 30) {
                s = (y - x) / 2;
                s = s * s + w;
                if (s > 0) {
                    s = Math.sqrt(s);
                    if (y < x) {
                        s = -s;
                    }
                    s = x - w / ((y - x) / 2 + s);
                    for(i = low; i <= n; i++){
                        H.set(i, i, H.get(i, i) - s);
                    }
                    exshift += s;
                    // eslint-disable-next-line no-multi-assign
                    x = y = w = 0.964;
                }
            }
            iter = iter + 1;
            m = n - 2;
            while(m >= l){
                z = H.get(m, m);
                r = x - z;
                s = y - z;
                p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);
                q = H.get(m + 1, m + 1) - z - r - s;
                r = H.get(m + 2, m + 1);
                s = Math.abs(p) + Math.abs(q) + Math.abs(r);
                p = p / s;
                q = q / s;
                r = r / s;
                if (m === l) {
                    break;
                }
                if (Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H.get(m - 1, m - 1)) + Math.abs(z) + Math.abs(H.get(m + 1, m + 1))))) {
                    break;
                }
                m--;
            }
            for(i = m + 2; i <= n; i++){
                H.set(i, i - 2, 0);
                if (i > m + 2) {
                    H.set(i, i - 3, 0);
                }
            }
            for(k = m; k <= n - 1; k++){
                notlast = k !== n - 1;
                if (k !== m) {
                    p = H.get(k, k - 1);
                    q = H.get(k + 1, k - 1);
                    r = notlast ? H.get(k + 2, k - 1) : 0;
                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);
                    if (x !== 0) {
                        p = p / x;
                        q = q / x;
                        r = r / x;
                    }
                }
                if (x === 0) {
                    break;
                }
                s = Math.sqrt(p * p + q * q + r * r);
                if (p < 0) {
                    s = -s;
                }
                if (s !== 0) {
                    if (k !== m) {
                        H.set(k, k - 1, -s * x);
                    } else if (l !== m) {
                        H.set(k, k - 1, -H.get(k, k - 1));
                    }
                    p = p + s;
                    x = p / s;
                    y = q / s;
                    z = r / s;
                    q = q / p;
                    r = r / p;
                    for(j = k; j < nn; j++){
                        p = H.get(k, j) + q * H.get(k + 1, j);
                        if (notlast) {
                            p = p + r * H.get(k + 2, j);
                            H.set(k + 2, j, H.get(k + 2, j) - p * z);
                        }
                        H.set(k, j, H.get(k, j) - p * x);
                        H.set(k + 1, j, H.get(k + 1, j) - p * y);
                    }
                    for(i = 0; i <= Math.min(n, k + 3); i++){
                        p = x * H.get(i, k) + y * H.get(i, k + 1);
                        if (notlast) {
                            p = p + z * H.get(i, k + 2);
                            H.set(i, k + 2, H.get(i, k + 2) - p * r);
                        }
                        H.set(i, k, H.get(i, k) - p);
                        H.set(i, k + 1, H.get(i, k + 1) - p * q);
                    }
                    for(i = low; i <= high; i++){
                        p = x * V.get(i, k) + y * V.get(i, k + 1);
                        if (notlast) {
                            p = p + z * V.get(i, k + 2);
                            V.set(i, k + 2, V.get(i, k + 2) - p * r);
                        }
                        V.set(i, k, V.get(i, k) - p);
                        V.set(i, k + 1, V.get(i, k + 1) - p * q);
                    }
                }
            }
        }
    }
    if (norm === 0) {
        return;
    }
    for(n = nn - 1; n >= 0; n--){
        p = d[n];
        q = e[n];
        if (q === 0) {
            l = n;
            H.set(n, n, 1);
            for(i = n - 1; i >= 0; i--){
                w = H.get(i, i) - p;
                r = 0;
                for(j = l; j <= n; j++){
                    r = r + H.get(i, j) * H.get(j, n);
                }
                if (e[i] < 0) {
                    z = w;
                    s = r;
                } else {
                    l = i;
                    if (e[i] === 0) {
                        H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));
                    } else {
                        x = H.get(i, i + 1);
                        y = H.get(i + 1, i);
                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
                        t = (x * s - z * r) / q;
                        H.set(i, n, t);
                        H.set(i + 1, n, Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z);
                    }
                    t = Math.abs(H.get(i, n));
                    if (eps * t * t > 1) {
                        for(j = i; j <= n; j++){
                            H.set(j, n, H.get(j, n) / t);
                        }
                    }
                }
            }
        } else if (q < 0) {
            l = n - 1;
            if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {
                H.set(n - 1, n - 1, q / H.get(n, n - 1));
                H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));
            } else {
                cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);
                H.set(n - 1, n - 1, cdivres[0]);
                H.set(n - 1, n, cdivres[1]);
            }
            H.set(n, n - 1, 0);
            H.set(n, n, 1);
            for(i = n - 2; i >= 0; i--){
                ra = 0;
                sa = 0;
                for(j = l; j <= n; j++){
                    ra = ra + H.get(i, j) * H.get(j, n - 1);
                    sa = sa + H.get(i, j) * H.get(j, n);
                }
                w = H.get(i, i) - p;
                if (e[i] < 0) {
                    z = w;
                    r = ra;
                    s = sa;
                } else {
                    l = i;
                    if (e[i] === 0) {
                        cdivres = cdiv(-ra, -sa, w, q);
                        H.set(i, n - 1, cdivres[0]);
                        H.set(i, n, cdivres[1]);
                    } else {
                        x = H.get(i, i + 1);
                        y = H.get(i + 1, i);
                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
                        vi = (d[i] - p) * 2 * q;
                        if (vr === 0 && vi === 0) {
                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));
                        }
                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);
                        H.set(i, n - 1, cdivres[0]);
                        H.set(i, n, cdivres[1]);
                        if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {
                            H.set(i + 1, n - 1, (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x);
                            H.set(i + 1, n, (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x);
                        } else {
                            cdivres = cdiv(-r - y * H.get(i, n - 1), -s - y * H.get(i, n), z, q);
                            H.set(i + 1, n - 1, cdivres[0]);
                            H.set(i + 1, n, cdivres[1]);
                        }
                    }
                    t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));
                    if (eps * t * t > 1) {
                        for(j = i; j <= n; j++){
                            H.set(j, n - 1, H.get(j, n - 1) / t);
                            H.set(j, n, H.get(j, n) / t);
                        }
                    }
                }
            }
        }
    }
    for(i = 0; i < nn; i++){
        if (i < low || i > high) {
            for(j = i; j < nn; j++){
                V.set(i, j, H.get(i, j));
            }
        }
    }
    for(j = nn - 1; j >= low; j--){
        for(i = low; i <= high; i++){
            z = 0;
            for(k = low; k <= Math.min(j, high); k++){
                z = z + V.get(i, k) * H.get(k, j);
            }
            V.set(i, j, z);
        }
    }
}
function cdiv(xr, xi, yr, yi) {
    let r, d;
    if (Math.abs(yr) > Math.abs(yi)) {
        r = yi / yr;
        d = yr + r * yi;
        return [
            (xr + r * xi) / d,
            (xi - r * xr) / d
        ];
    } else {
        r = yr / yi;
        d = yi + r * yr;
        return [
            (r * xr + xi) / d,
            (r * xi - xr) / d
        ];
    }
}
class CholeskyDecomposition {
    constructor(value){
        value = WrapperMatrix2D.checkMatrix(value);
        if (!value.isSymmetric()) {
            throw new Error('Matrix is not symmetric');
        }
        let a = value;
        let dimension = a.rows;
        let l = new Matrix(dimension, dimension);
        let positiveDefinite = true;
        let i, j, k;
        for(j = 0; j < dimension; j++){
            let d = 0;
            for(k = 0; k < j; k++){
                let s = 0;
                for(i = 0; i < k; i++){
                    s += l.get(k, i) * l.get(j, i);
                }
                s = (a.get(j, k) - s) / l.get(k, k);
                l.set(j, k, s);
                d = d + s * s;
            }
            d = a.get(j, j) - d;
            positiveDefinite &&= d > 0;
            l.set(j, j, Math.sqrt(Math.max(d, 0)));
            for(k = j + 1; k < dimension; k++){
                l.set(j, k, 0);
            }
        }
        this.L = l;
        this.positiveDefinite = positiveDefinite;
    }
    isPositiveDefinite() {
        return this.positiveDefinite;
    }
    solve(value) {
        value = WrapperMatrix2D.checkMatrix(value);
        let l = this.L;
        let dimension = l.rows;
        if (value.rows !== dimension) {
            throw new Error('Matrix dimensions do not match');
        }
        if (this.isPositiveDefinite() === false) {
            throw new Error('Matrix is not positive definite');
        }
        let count = value.columns;
        let B = value.clone();
        let i, j, k;
        for(k = 0; k < dimension; k++){
            for(j = 0; j < count; j++){
                for(i = 0; i < k; i++){
                    B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));
                }
                B.set(k, j, B.get(k, j) / l.get(k, k));
            }
        }
        for(k = dimension - 1; k >= 0; k--){
            for(j = 0; j < count; j++){
                for(i = k + 1; i < dimension; i++){
                    B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));
                }
                B.set(k, j, B.get(k, j) / l.get(k, k));
            }
        }
        return B;
    }
    get lowerTriangularMatrix() {
        return this.L;
    }
}
class nipals {
    constructor(X, options = {}){
        X = WrapperMatrix2D.checkMatrix(X);
        let { Y } = options;
        const { scaleScores = false, maxIterations = 1000, terminationCriteria = 1e-10 } = options;
        let u;
        if (Y) {
            if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {
                Y = Matrix.columnVector(Y);
            } else {
                Y = WrapperMatrix2D.checkMatrix(Y);
            }
            if (Y.rows !== X.rows) {
                throw new Error('Y should have the same number of rows as X');
            }
            u = Y.getColumnVector(0);
        } else {
            u = X.getColumnVector(0);
        }
        let diff = 1;
        let t, q, w, tOld;
        for(let counter = 0; counter < maxIterations && diff > terminationCriteria; counter++){
            w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));
            w = w.div(w.norm());
            t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));
            if (counter > 0) {
                diff = t.clone().sub(tOld).pow(2).sum();
            }
            tOld = t.clone();
            if (Y) {
                q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));
                q = q.div(q.norm());
                u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));
            } else {
                u = t;
            }
        }
        if (Y) {
            let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));
            p = p.div(p.norm());
            let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));
            let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));
            let yResidual = Y.clone().sub(t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()));
            this.t = t;
            this.p = p.transpose();
            this.w = w.transpose();
            this.q = q;
            this.u = u;
            this.s = t.transpose().mmul(t);
            this.xResidual = xResidual;
            this.yResidual = yResidual;
            this.betas = residual;
        } else {
            this.w = w.transpose();
            this.s = t.transpose().mmul(t).sqrt();
            if (scaleScores) {
                this.t = t.clone().div(this.s.get(0, 0));
            } else {
                this.t = t;
            }
            this.xResidual = X.sub(t.mmul(w.transpose()));
        }
    }
}
exports.AbstractMatrix = AbstractMatrix;
exports.CHO = CholeskyDecomposition;
exports.CholeskyDecomposition = CholeskyDecomposition;
exports.DistanceMatrix = DistanceMatrix;
exports.EVD = EigenvalueDecomposition;
exports.EigenvalueDecomposition = EigenvalueDecomposition;
exports.LU = LuDecomposition;
exports.LuDecomposition = LuDecomposition;
exports.Matrix = Matrix;
exports.MatrixColumnSelectionView = MatrixColumnSelectionView;
exports.MatrixColumnView = MatrixColumnView;
exports.MatrixFlipColumnView = MatrixFlipColumnView;
exports.MatrixFlipRowView = MatrixFlipRowView;
exports.MatrixRowSelectionView = MatrixRowSelectionView;
exports.MatrixRowView = MatrixRowView;
exports.MatrixSelectionView = MatrixSelectionView;
exports.MatrixSubView = MatrixSubView;
exports.MatrixTransposeView = MatrixTransposeView;
exports.NIPALS = nipals;
exports.Nipals = nipals;
exports.QR = QrDecomposition;
exports.QrDecomposition = QrDecomposition;
exports.SVD = SingularValueDecomposition;
exports.SingularValueDecomposition = SingularValueDecomposition;
exports.SymmetricMatrix = SymmetricMatrix;
exports.WrapperMatrix1D = WrapperMatrix1D;
exports.WrapperMatrix2D = WrapperMatrix2D;
exports.correlation = correlation;
exports.covariance = covariance;
exports.default = Matrix;
exports.determinant = determinant;
exports.inverse = inverse;
exports.linearDependencies = linearDependencies;
exports.pseudoInverse = pseudoInverse;
exports.solve = solve;
exports.wrap = wrap;
}}),
"[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AbstractMatrix": (()=>AbstractMatrix),
    "CHO": (()=>CHO),
    "CholeskyDecomposition": (()=>CholeskyDecomposition),
    "DistanceMatrix": (()=>DistanceMatrix),
    "EVD": (()=>EVD),
    "EigenvalueDecomposition": (()=>EigenvalueDecomposition),
    "LU": (()=>LU),
    "LuDecomposition": (()=>LuDecomposition),
    "Matrix": (()=>Matrix),
    "MatrixColumnSelectionView": (()=>MatrixColumnSelectionView),
    "MatrixColumnView": (()=>MatrixColumnView),
    "MatrixFlipColumnView": (()=>MatrixFlipColumnView),
    "MatrixFlipRowView": (()=>MatrixFlipRowView),
    "MatrixRowSelectionView": (()=>MatrixRowSelectionView),
    "MatrixRowView": (()=>MatrixRowView),
    "MatrixSelectionView": (()=>MatrixSelectionView),
    "MatrixSubView": (()=>MatrixSubView),
    "MatrixTransposeView": (()=>MatrixTransposeView),
    "NIPALS": (()=>NIPALS),
    "Nipals": (()=>Nipals),
    "QR": (()=>QR),
    "QrDecomposition": (()=>QrDecomposition),
    "SVD": (()=>SVD),
    "SingularValueDecomposition": (()=>SingularValueDecomposition),
    "SymmetricMatrix": (()=>SymmetricMatrix),
    "WrapperMatrix1D": (()=>WrapperMatrix1D),
    "WrapperMatrix2D": (()=>WrapperMatrix2D),
    "correlation": (()=>correlation),
    "covariance": (()=>covariance),
    "default": (()=>__TURBOPACK__default__export__),
    "determinant": (()=>determinant),
    "inverse": (()=>inverse),
    "linearDependencies": (()=>linearDependencies),
    "pseudoInverse": (()=>pseudoInverse),
    "solve": (()=>solve),
    "wrap": (()=>wrap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.js [app-rsc] (ecmascript)");
;
const AbstractMatrix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AbstractMatrix"];
const CHO = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CHO"];
const CholeskyDecomposition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CholeskyDecomposition"];
const DistanceMatrix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DistanceMatrix"];
const EVD = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EVD"];
const EigenvalueDecomposition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EigenvalueDecomposition"];
const LU = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LU"];
const LuDecomposition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LuDecomposition"];
const Matrix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"];
const MatrixColumnSelectionView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixColumnSelectionView"];
const MatrixColumnView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixColumnView"];
const MatrixFlipColumnView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixFlipColumnView"];
const MatrixFlipRowView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixFlipRowView"];
const MatrixRowSelectionView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixRowSelectionView"];
const MatrixRowView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixRowView"];
const MatrixSelectionView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixSelectionView"];
const MatrixSubView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixSubView"];
const MatrixTransposeView = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixTransposeView"];
const NIPALS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["NIPALS"];
const Nipals = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Nipals"];
const QR = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["QR"];
const QrDecomposition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["QrDecomposition"];
const SVD = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SVD"];
const SingularValueDecomposition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SingularValueDecomposition"];
const SymmetricMatrix = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SymmetricMatrix"];
const WrapperMatrix1D = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WrapperMatrix1D"];
const WrapperMatrix2D = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WrapperMatrix2D"];
const correlation = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["correlation"];
const covariance = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["covariance"];
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].Matrix ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].Matrix : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"];
const determinant = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["determinant"];
const inverse = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["inverse"];
const linearDependencies = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["linearDependencies"];
const pseudoInverse = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["pseudoInverse"];
const solve = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["solve"];
const wrap = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["wrap"];
}}),
"[project]/node_modules/ml-logistic-regression/src/logreg_2classes.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>LogisticRegressionTwoClasses)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)");
;
class LogisticRegressionTwoClasses {
    constructor(options = {}){
        const { numSteps = 50000, learningRate = 5e-4, weights = null } = options;
        this.numSteps = numSteps;
        this.learningRate = learningRate;
        this.weights = weights ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].checkMatrix(weights) : null;
    }
    train(features, target) {
        let weights = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].zeros(1, features.columns);
        for(let step = 0; step < this.numSteps; step++){
            const scores = features.mmul(weights.transpose());
            const predictions = sigmoid(scores);
            // Update weights with gradient
            const outputErrorSignal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].columnVector(predictions).neg().add(target);
            const gradient = features.transpose().mmul(outputErrorSignal);
            weights = weights.add(gradient.mul(this.learningRate).transpose());
        }
        this.weights = weights;
    }
    testScores(features) {
        const finalData = features.mmul(this.weights.transpose());
        return sigmoid(finalData);
    }
    predict(features) {
        const finalData = features.mmul(this.weights.transpose());
        return sigmoid(finalData).map(Math.round);
    }
    static load(model) {
        return new LogisticRegressionTwoClasses(model);
    }
    toJSON() {
        return {
            numSteps: this.numSteps,
            learningRate: this.learningRate,
            weights: this.weights
        };
    }
}
function sigmoid(scores) {
    scores = scores.to1DArray();
    let result = [];
    for(let i = 0; i < scores.length; i++){
        result.push(1 / (1 + Math.exp(-scores[i])));
    }
    return result;
}
}}),
"[project]/node_modules/ml-logistic-regression/src/logreg.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>LogisticRegression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$logistic$2d$regression$2f$src$2f$logreg_2classes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-logistic-regression/src/logreg_2classes.js [app-rsc] (ecmascript)");
;
;
function transformClassesForOneVsAll(Y, oneClass) {
    let y = Y.to1DArray();
    for(let i = 0; i < y.length; i++){
        if (y[i] === oneClass) {
            y[i] = 0;
        } else {
            y[i] = 1;
        }
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].columnVector(y);
}
class LogisticRegression {
    constructor(options = {}){
        const { numSteps = 50000, learningRate = 5e-4, classifiers = [], numberClasses = 0 } = options;
        this.numSteps = numSteps;
        this.learningRate = learningRate;
        this.classifiers = classifiers;
        this.numberClasses = numberClasses;
    }
    train(X, Y) {
        this.numberClasses = new Set(Y.to1DArray()).size;
        this.classifiers = new Array(this.numberClasses);
        // train the classifiers
        for(let i = 0; i < this.numberClasses; i++){
            this.classifiers[i] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$logistic$2d$regression$2f$src$2f$logreg_2classes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]({
                numSteps: this.numSteps,
                learningRate: this.learningRate
            });
            let y = Y.clone();
            y = transformClassesForOneVsAll(y, i);
            this.classifiers[i].train(X, y);
        }
    }
    predict(Xtest) {
        let resultsOneClass = new Array(this.numberClasses).fill(0);
        let i;
        for(i = 0; i < this.numberClasses; i++){
            resultsOneClass[i] = this.classifiers[i].testScores(Xtest);
        }
        let finalResults = new Array(Xtest.rows).fill(0);
        for(i = 0; i < Xtest.rows; i++){
            let minimum = 100000;
            for(let j = 0; j < this.numberClasses; j++){
                if (resultsOneClass[j][i] < minimum) {
                    minimum = resultsOneClass[j][i];
                    finalResults[i] = j;
                }
            }
        }
        return finalResults;
    }
    static load(model) {
        if (model.name !== 'LogisticRegression') {
            throw new Error(`invalid model: ${model.name}`);
        }
        const newClassifier = new LogisticRegression(model);
        for(let i = 0; i < newClassifier.numberClasses; i++){
            newClassifier.classifiers[i] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$logistic$2d$regression$2f$src$2f$logreg_2classes$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"].load(model.classifiers[i]);
        }
        return newClassifier;
    }
    toJSON() {
        return {
            name: 'LogisticRegression',
            numSteps: this.numSteps,
            learningRate: this.learningRate,
            numberClasses: this.numberClasses,
            classifiers: this.classifiers
        };
    }
}
}}),
"[project]/node_modules/ml-array-sum/lib-es6/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>sum)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/is-any-array/lib-esm/index.js [app-rsc] (ecmascript)");
;
function sum(input) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAnyArray"])(input)) {
        throw new TypeError('input must be an array');
    }
    if (input.length === 0) {
        throw new TypeError('input must not be empty');
    }
    var sumValue = 0;
    for(var i = 0; i < input.length; i++){
        sumValue += input[i];
    }
    return sumValue;
}
;
}}),
"[project]/node_modules/ml-array-mean/lib-es6/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>mean)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$sum$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-array-sum/lib-es6/index.js [app-rsc] (ecmascript)");
;
function mean(input) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$sum$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(input) / input.length;
}
;
}}),
"[project]/node_modules/ml-cart/src/utils.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getNumberOfClasses": (()=>getNumberOfClasses),
    "giniGain": (()=>giniGain),
    "giniImpurity": (()=>giniImpurity),
    "matrixSplitter": (()=>matrixSplitter),
    "mean": (()=>mean),
    "regressionError": (()=>regressionError),
    "squaredError": (()=>squaredError),
    "toDiscreteDistribution": (()=>toDiscreteDistribution),
    "zip": (()=>zip)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$mean$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-array-mean/lib-es6/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)");
;
;
function toDiscreteDistribution(array, numberOfClasses) {
    let counts = new Array(numberOfClasses).fill(0);
    for(let i = 0; i < array.length; ++i){
        counts[array[i]] += 1 / array.length;
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].rowVector(counts);
}
function giniImpurity(array) {
    if (array.length === 0) {
        return 0;
    }
    let probabilities = toDiscreteDistribution(array, getNumberOfClasses(array)).getRow(0);
    let sum = 0.0;
    for(let i = 0; i < probabilities.length; ++i){
        sum += probabilities[i] * probabilities[i];
    }
    return 1 - sum;
}
function getNumberOfClasses(array) {
    return array.filter((val, i, arr)=>{
        return arr.indexOf(val) === i;
    }).map((val)=>val + 1).reduce((a, b)=>Math.max(a, b));
}
function giniGain(array, splitted) {
    let splitsImpurity = 0.0;
    let splits = [
        'greater',
        'lesser'
    ];
    for(let i = 0; i < splits.length; ++i){
        let currentSplit = splitted[splits[i]];
        splitsImpurity += giniImpurity(currentSplit) * currentSplit.length / array.length;
    }
    return giniImpurity(array) - splitsImpurity;
}
function squaredError(array) {
    let l = array.length;
    if (l === 0) {
        return 0.0;
    }
    let m = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$mean$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(array);
    let error = 0.0;
    for(let i = 0; i < l; ++i){
        let currentElement = array[i];
        error += (currentElement - m) * (currentElement - m);
    }
    return error;
}
function regressionError(array, splitted) {
    let error = 0.0;
    let splits = [
        'greater',
        'lesser'
    ];
    for(let i = 0; i < splits.length; ++i){
        let currentSplit = splitted[splits[i]];
        error += squaredError(currentSplit);
    }
    return error;
}
function matrixSplitter(X, y, column, value) {
    let lesserX = [];
    let greaterX = [];
    let lesserY = [];
    let greaterY = [];
    for(let i = 0; i < X.rows; ++i){
        if (X.get(i, column) < value) {
            lesserX.push(X.getRow(i));
            lesserY.push(y[i]);
        } else {
            greaterX.push(X.getRow(i));
            greaterY.push(y[i]);
        }
    }
    return {
        greaterX: greaterX,
        greaterY: greaterY,
        lesserX: lesserX,
        lesserY: lesserY
    };
}
function mean(a, b) {
    return (a + b) / 2;
}
function zip(a, b) {
    if (a.length !== b.length) {
        throw new TypeError(`Error on zip: the size of a: ${a.length} is different from b: ${b.length}`);
    }
    let ret = new Array(a.length);
    for(let i = 0; i < a.length; ++i){
        ret[i] = [
            a[i],
            b[i]
        ];
    }
    return ret;
}
}}),
"[project]/node_modules/ml-cart/src/TreeNode.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>TreeNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$mean$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-array-mean/lib-es6/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/utils.js [app-rsc] (ecmascript)");
;
;
;
const gainFunctions = {
    gini: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["giniGain"],
    regression: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["regressionError"]
};
const splitFunctions = {
    mean: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mean"]
};
class TreeNode {
    /**
   * @private
   * Constructor for a tree node given the options received on the main classes (DecisionTreeClassifier, DecisionTreeRegression)
   * @param {object|TreeNode} options for loading
   * @constructor
   */ constructor(options){
        // options parameters
        this.kind = options.kind;
        this.gainFunction = options.gainFunction;
        this.splitFunction = options.splitFunction;
        this.minNumSamples = options.minNumSamples;
        this.maxDepth = options.maxDepth;
        this.gainThreshold = options.gainThreshold || 0;
    }
    /**
   * @private
   * Function that retrieve the best feature to make the split.
   * @param {Matrix} XTranspose - Training set transposed
   * @param {Array} y - labels or values (depending of the decision tree)
   * @return {object} - return tree values, the best gain, column and the split value.
   */ bestSplit(XTranspose, y) {
        // Depending in the node tree class, we set the variables to check information gain (to classify)
        // or error (for regression)
        let bestGain = this.kind === 'classifier' ? -Infinity : Infinity;
        let check = this.kind === 'classifier' ? (a, b)=>a > b : (a, b)=>a < b;
        let maxColumn;
        let maxValue;
        let numberSamples;
        for(let i = 0; i < XTranspose.rows; ++i){
            let currentFeature = XTranspose.getRow(i);
            let splitValues = this.featureSplit(currentFeature, y);
            for(let j = 0; j < splitValues.length; ++j){
                let currentSplitVal = splitValues[j];
                let splitted = this.split(currentFeature, y, currentSplitVal);
                let gain = gainFunctions[this.gainFunction](y, splitted);
                if (check(gain, bestGain)) {
                    maxColumn = i;
                    maxValue = currentSplitVal;
                    bestGain = gain;
                    numberSamples = currentFeature.length;
                }
            }
        }
        return {
            maxGain: bestGain,
            maxColumn: maxColumn,
            maxValue: maxValue,
            numberSamples: numberSamples
        };
    }
    /**
   * @private
   * Makes the split of the training labels or values from the training set feature given a split value.
   * @param {Array} x - Training set feature
   * @param {Array} y - Training set value or label
   * @param {number} splitValue
   * @return {object}
   */ split(x, y, splitValue) {
        let lesser = [];
        let greater = [];
        for(let i = 0; i < x.length; ++i){
            if (x[i] < splitValue) {
                lesser.push(y[i]);
            } else {
                greater.push(y[i]);
            }
        }
        return {
            greater: greater,
            lesser: lesser
        };
    }
    /**
   * @private
   * Calculates the possible points to split over the tree given a training set feature and corresponding labels or values.
   * @param {Array} x - Training set feature
   * @param {Array} y - Training set value or label
   * @return {Array} possible split values.
   */ featureSplit(x, y) {
        let splitValues = [];
        let arr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["zip"])(x, y);
        arr.sort((a, b)=>{
            return a[0] - b[0];
        });
        for(let i = 1; i < arr.length; ++i){
            if (arr[i - 1][1] !== arr[i][1]) {
                splitValues.push(splitFunctions[this.splitFunction](arr[i - 1][0], arr[i][0]));
            }
        }
        return splitValues;
    }
    /**
   * @private
   * Calculate the predictions of a leaf tree node given the training labels or values
   * @param {Array} y
   */ calculatePrediction(y) {
        if (this.kind === 'classifier') {
            this.distribution = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["toDiscreteDistribution"])(y, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getNumberOfClasses"])(y));
            if (this.distribution.columns === 0) {
                throw new TypeError('Error on calculate the prediction');
            }
        } else {
            this.distribution = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$mean$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(y);
        }
    }
    /**
   * @private
   * Train a node given the training set and labels, because it trains recursively, it also receive
   * the current depth of the node, parent gain to avoid infinite recursion and boolean value to check if
   * the training set is transposed.
   * @param {Matrix} X - Training set (could be transposed or not given transposed).
   * @param {Array} y - Training labels or values.
   * @param {number} currentDepth - Current depth of the node.
   * @param {number} parentGain - parent node gain or error.
   */ train(X, y, currentDepth, parentGain) {
        if (X.rows <= this.minNumSamples) {
            this.calculatePrediction(y);
            return;
        }
        if (parentGain === undefined) parentGain = 0.0;
        let XTranspose = X.transpose();
        let split = this.bestSplit(XTranspose, y);
        this.splitValue = split.maxValue;
        this.splitColumn = split.maxColumn;
        this.gain = split.maxGain;
        this.numberSamples = split.numberSamples;
        let splittedMatrix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["matrixSplitter"])(X, y, this.splitColumn, this.splitValue);
        if (currentDepth < this.maxDepth && this.gain > this.gainThreshold && this.gain !== parentGain && splittedMatrix.lesserX.length > 0 && splittedMatrix.greaterX.length > 0) {
            this.left = new TreeNode(this);
            this.right = new TreeNode(this);
            let lesserX = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"](splittedMatrix.lesserX);
            let greaterX = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"](splittedMatrix.greaterX);
            this.left.train(lesserX, splittedMatrix.lesserY, currentDepth + 1, this.gain);
            this.right.train(greaterX, splittedMatrix.greaterY, currentDepth + 1, this.gain);
        } else {
            this.calculatePrediction(y);
        }
    }
    /**
   * @private
   * Calculates the prediction of a given element.
   * @param {Array} row
   * @return {number|Array} prediction
   *          * if a node is a classifier returns an array of probabilities of each class.
   *          * if a node is for regression returns a number with the prediction.
   */ classify(row) {
        if (this.right && this.left) {
            if (row[this.splitColumn] < this.splitValue) {
                return this.left.classify(row);
            } else {
                return this.right.classify(row);
            }
        }
        return this.distribution;
    }
    /**
   * @private
   * Set the parameter of the current node and their children.
   * @param {object} node - parameters of the current node and the children.
   */ setNodeParameters(node) {
        if (node.distribution !== undefined) {
            this.distribution = node.distribution.constructor === Array ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"](node.distribution) : node.distribution;
        } else {
            this.distribution = undefined;
            this.splitValue = node.splitValue;
            this.splitColumn = node.splitColumn;
            this.gain = node.gain;
            this.left = new TreeNode(this);
            this.right = new TreeNode(this);
            if (node.left !== {}) {
                this.left.setNodeParameters(node.left);
            }
            if (node.right !== {}) {
                this.right.setNodeParameters(node.right);
            }
        }
    }
}
}}),
"[project]/node_modules/ml-cart/src/DecisionTreeClassifier.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DecisionTreeClassifier": (()=>DecisionTreeClassifier)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$TreeNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/TreeNode.js [app-rsc] (ecmascript)");
;
;
const defaultOptions = {
    gainFunction: 'gini',
    splitFunction: 'mean',
    minNumSamples: 3,
    maxDepth: Infinity,
    gainThreshold: 0.01
};
class DecisionTreeClassifier {
    /**
   * Create new Decision Tree Classifier with CART implementation with the given options
   * @param {object} options
   * @param {string} [options.gainFunction="gini"] - gain function to get the best split, "gini" the only one supported.
   * @param {string} [options.splitFunction="mean"] - given two integers from a split feature, get the value to split, "mean" the only one supported.
   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.
   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.
   * @param {object} model - for load purposes.
   * @constructor
   */ constructor(options, model){
        if (options === true) {
            this.options = model.options;
            this.root = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$TreeNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"](model.options);
            this.root.setNodeParameters(model.root);
        } else {
            this.options = Object.assign({}, defaultOptions, options);
            this.options.kind = 'classifier';
        }
    }
    /**
   * Train the decision tree with the given training set and labels.
   * @param {Matrix|MatrixTransposeView|Array} trainingSet
   * @param {Array} trainingLabels
   */ train(trainingSet, trainingLabels) {
        this.root = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$TreeNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"](this.options);
        trainingSet = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].checkMatrix(trainingSet);
        this.root.train(trainingSet, trainingLabels, 0, null);
    }
    /**
   * Predicts the output given the matrix to predict.
   * @param {Matrix|MatrixTransposeView|Array} toPredict
   * @return {Array} predictions
   */ predict(toPredict) {
        toPredict = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].checkMatrix(toPredict);
        let predictions = new Array(toPredict.rows);
        for(let i = 0; i < toPredict.rows; ++i){
            predictions[i] = this.root.classify(toPredict.getRow(i)).maxRowIndex(0)[1];
        }
        return predictions;
    }
    /**
   * Export the current model to JSON.
   * @return {object} - Current model.
   */ toJSON() {
        return {
            options: this.options,
            root: this.root,
            name: 'DTClassifier'
        };
    }
    /**
   * Load a Decision tree classifier with the given model.
   * @param {object} model
   * @return {DecisionTreeClassifier}
   */ static load(model) {
        if (model.name !== 'DTClassifier') {
            throw new RangeError(`Invalid model: ${model.name}`);
        }
        return new DecisionTreeClassifier(true, model);
    }
}
}}),
"[project]/node_modules/ml-cart/src/DecisionTreeRegression.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DecisionTreeRegression": (()=>DecisionTreeRegression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$TreeNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/TreeNode.js [app-rsc] (ecmascript)");
;
;
const defaultOptions = {
    gainFunction: 'regression',
    splitFunction: 'mean',
    minNumSamples: 3,
    maxDepth: Infinity
};
class DecisionTreeRegression {
    /**
   * Create new Decision Tree Regression with CART implementation with the given options.
   * @param {object} options
   * @param {string} [options.gainFunction="regression"] - gain function to get the best split, "regression" the only one supported.
   * @param {string} [options.splitFunction="mean"] - given two integers from a split feature, get the value to split, "mean" the only one supported.
   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.
   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.
   * @param {object} model - for load purposes.
   */ constructor(options, model){
        if (options === true) {
            this.options = model.options;
            this.root = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$TreeNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"](model.options);
            this.root.setNodeParameters(model.root);
        } else {
            this.options = Object.assign({}, defaultOptions, options);
            this.options.kind = 'regression';
        }
    }
    /**
   * Train the decision tree with the given training set and values.
   * @param {Matrix|MatrixTransposeView|Array} trainingSet
   * @param {Array} trainingValues
   */ train(trainingSet, trainingValues) {
        this.root = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$TreeNode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"](this.options);
        if (typeof trainingSet[0] !== 'undefined' && trainingSet[0].length === undefined) {
            trainingSet = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].columnVector(trainingSet);
        } else {
            trainingSet = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].checkMatrix(trainingSet);
        }
        this.root.train(trainingSet, trainingValues, 0);
    }
    /**
   * Predicts the values given the matrix to predict.
   * @param {Matrix|MatrixTransposeView|Array} toPredict
   * @return {Array} predictions
   */ predict(toPredict) {
        if (typeof toPredict[0] !== 'undefined' && toPredict[0].length === undefined) {
            toPredict = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].columnVector(toPredict);
        }
        toPredict = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].checkMatrix(toPredict);
        let predictions = new Array(toPredict.rows);
        for(let i = 0; i < toPredict.rows; ++i){
            predictions[i] = this.root.classify(toPredict.getRow(i));
        }
        return predictions;
    }
    /**
   * Export the current model to JSON.
   * @return {object} - Current model.
   */ toJSON() {
        return {
            options: this.options,
            root: this.root,
            name: 'DTRegression'
        };
    }
    /**
   * Load a Decision tree regression with the given model.
   * @param {object} model
   * @return {DecisionTreeRegression}
   */ static load(model) {
        if (model.name !== 'DTRegression') {
            throw new RangeError(`Invalid model:${model.name}`);
        }
        return new DecisionTreeRegression(true, model);
    }
}
}}),
"[project]/node_modules/ml-cart/src/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
}}),
"[project]/node_modules/ml-cart/src/index.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$DecisionTreeClassifier$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/DecisionTreeClassifier.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$DecisionTreeRegression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/DecisionTreeRegression.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/ml-array-mode/lib-es6/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>mode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/is-any-array/lib-esm/index.js [app-rsc] (ecmascript)");
;
function mode(input) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAnyArray"])(input)) {
        throw new TypeError('input must be an array');
    }
    if (input.length === 0) {
        throw new TypeError('input must not be empty');
    }
    var maxValue = 0;
    var maxCount = 0;
    var count = 0;
    var counts = {};
    for(var i = 0; i < input.length; ++i){
        var element = input[i];
        count = counts[element];
        if (count) {
            counts[element]++;
            count++;
        } else {
            counts[element] = count = 1;
        }
        if (count > maxCount) {
            maxCount = count;
            maxValue = input[i];
        }
    }
    return maxValue;
}
;
}}),
"[project]/node_modules/random-js/dist/random-js.esm.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MersenneTwister19937": (()=>MersenneTwister19937),
    "Random": (()=>Random),
    "bool": (()=>bool),
    "browserCrypto": (()=>browserCrypto),
    "createEntropy": (()=>createEntropy),
    "date": (()=>date),
    "dice": (()=>dice),
    "die": (()=>die),
    "hex": (()=>hex),
    "int32": (()=>int32),
    "int53": (()=>int53),
    "int53Full": (()=>int53Full),
    "integer": (()=>integer),
    "nativeMath": (()=>nativeMath),
    "nodeCrypto": (()=>nodeCrypto),
    "pick": (()=>pick),
    "picker": (()=>picker),
    "real": (()=>real),
    "realZeroToOneExclusive": (()=>realZeroToOneExclusive),
    "realZeroToOneInclusive": (()=>realZeroToOneInclusive),
    "sample": (()=>sample),
    "shuffle": (()=>shuffle),
    "string": (()=>string),
    "uint32": (()=>uint32),
    "uint53": (()=>uint53),
    "uint53Full": (()=>uint53Full),
    "uuid4": (()=>uuid4)
});
const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;
const LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;
const UINT32_MAX = -1 >>> 0;
const UINT32_SIZE = UINT32_MAX + 1;
const INT32_SIZE = UINT32_SIZE / 2;
const INT32_MAX = INT32_SIZE - 1;
const UINT21_SIZE = 1 << 21;
const UINT21_MAX = UINT21_SIZE - 1;
/**
 * Returns a value within [-0x80000000, 0x7fffffff]
 */ function int32(engine) {
    return engine.next() | 0;
}
function add(distribution, addend) {
    if (addend === 0) {
        return distribution;
    } else {
        return (engine)=>distribution(engine) + addend;
    }
}
/**
 * Returns a value within [-0x20000000000000, 0x1fffffffffffff]
 */ function int53(engine) {
    const high = engine.next() | 0;
    const low = engine.next() >>> 0;
    return (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);
}
/**
 * Returns a value within [-0x20000000000000, 0x20000000000000]
 */ function int53Full(engine) {
    while(true){
        const high = engine.next() | 0;
        if (high & 0x400000) {
            if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {
                return SMALLEST_UNSAFE_INTEGER;
            }
        } else {
            const low = engine.next() >>> 0;
            return (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);
        }
    }
}
/**
 * Returns a value within [0, 0xffffffff]
 */ function uint32(engine) {
    return engine.next() >>> 0;
}
/**
 * Returns a value within [0, 0x1fffffffffffff]
 */ function uint53(engine) {
    const high = engine.next() & UINT21_MAX;
    const low = engine.next() >>> 0;
    return high * UINT32_SIZE + low;
}
/**
 * Returns a value within [0, 0x20000000000000]
 */ function uint53Full(engine) {
    while(true){
        const high = engine.next() | 0;
        if (high & UINT21_SIZE) {
            if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {
                return SMALLEST_UNSAFE_INTEGER;
            }
        } else {
            const low = engine.next() >>> 0;
            return (high & UINT21_MAX) * UINT32_SIZE + low;
        }
    }
}
function isPowerOfTwoMinusOne(value) {
    return (value + 1 & value) === 0;
}
function bitmask(masking) {
    return (engine)=>engine.next() & masking;
}
function downscaleToLoopCheckedRange(range) {
    const extendedRange = range + 1;
    const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);
    return (engine)=>{
        let value = 0;
        do {
            value = engine.next() >>> 0;
        }while (value >= maximum)
        return value % extendedRange;
    };
}
function downscaleToRange(range) {
    if (isPowerOfTwoMinusOne(range)) {
        return bitmask(range);
    } else {
        return downscaleToLoopCheckedRange(range);
    }
}
function isEvenlyDivisibleByMaxInt32(value) {
    return (value | 0) === 0;
}
function upscaleWithHighMasking(masking) {
    return (engine)=>{
        const high = engine.next() & masking;
        const low = engine.next() >>> 0;
        return high * UINT32_SIZE + low;
    };
}
function upscaleToLoopCheckedRange(extendedRange) {
    const maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);
    return (engine)=>{
        let ret = 0;
        do {
            const high = engine.next() & UINT21_MAX;
            const low = engine.next() >>> 0;
            ret = high * UINT32_SIZE + low;
        }while (ret >= maximum)
        return ret % extendedRange;
    };
}
function upscaleWithinU53(range) {
    const extendedRange = range + 1;
    if (isEvenlyDivisibleByMaxInt32(extendedRange)) {
        const highRange = (extendedRange / UINT32_SIZE | 0) - 1;
        if (isPowerOfTwoMinusOne(highRange)) {
            return upscaleWithHighMasking(highRange);
        }
    }
    return upscaleToLoopCheckedRange(extendedRange);
}
function upscaleWithinI53AndLoopCheck(min, max) {
    return (engine)=>{
        let ret = 0;
        do {
            const high = engine.next() | 0;
            const low = engine.next() >>> 0;
            ret = (high & UINT21_MAX) * UINT32_SIZE + low + (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);
        }while (ret < min || ret > max)
        return ret;
    };
}
/**
 * Returns a Distribution to return a value within [min, max]
 * @param min The minimum integer value, inclusive. No less than -0x20000000000000.
 * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.
 */ function integer(min, max) {
    min = Math.floor(min);
    max = Math.floor(max);
    if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {
        throw new RangeError(`Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`);
    } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {
        throw new RangeError(`Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`);
    }
    const range = max - min;
    if (range <= 0 || !isFinite(range)) {
        return ()=>min;
    } else if (range === UINT32_MAX) {
        if (min === 0) {
            return uint32;
        } else {
            return add(int32, min + INT32_SIZE);
        }
    } else if (range < UINT32_MAX) {
        return add(downscaleToRange(range), min);
    } else if (range === LARGEST_SAFE_INTEGER) {
        return add(uint53, min);
    } else if (range < LARGEST_SAFE_INTEGER) {
        return add(upscaleWithinU53(range), min);
    } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {
        return add(uint53Full, min);
    } else if (min === -SMALLEST_UNSAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {
        return int53Full;
    } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {
        return int53;
    } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {
        return add(int53, 1);
    } else if (max === SMALLEST_UNSAFE_INTEGER) {
        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);
    } else {
        return upscaleWithinI53AndLoopCheck(min, max);
    }
}
function isLeastBitTrue(engine) {
    return (engine.next() & 1) === 1;
}
function lessThan(distribution, value) {
    return (engine)=>distribution(engine) < value;
}
function probability(percentage) {
    if (percentage <= 0) {
        return ()=>false;
    } else if (percentage >= 1) {
        return ()=>true;
    } else {
        const scaled = percentage * UINT32_SIZE;
        if (scaled % 1 === 0) {
            return lessThan(int32, scaled - INT32_SIZE | 0);
        } else {
            return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));
        }
    }
}
function bool(numerator, denominator) {
    if (denominator == null) {
        if (numerator == null) {
            return isLeastBitTrue;
        }
        return probability(numerator);
    } else {
        if (numerator <= 0) {
            return ()=>false;
        } else if (numerator >= denominator) {
            return ()=>true;
        }
        return lessThan(integer(0, denominator - 1), numerator);
    }
}
/**
 * Returns a Distribution that returns a random `Date` within the inclusive
 * range of [`start`, `end`].
 * @param start The minimum `Date`
 * @param end The maximum `Date`
 */ function date(start, end) {
    const distribution = integer(+start, +end);
    return (engine)=>new Date(distribution(engine));
}
/**
 * Returns a Distribution to return a value within [1, sideCount]
 * @param sideCount The number of sides of the die
 */ function die(sideCount) {
    return integer(1, sideCount);
}
/**
 * Returns a distribution that returns an array of length `dieCount` of values
 * within [1, `sideCount`]
 * @param sideCount The number of sides of each die
 * @param dieCount The number of dice
 */ function dice(sideCount, dieCount) {
    const distribution = die(sideCount);
    return (engine)=>{
        const result = [];
        for(let i = 0; i < dieCount; ++i){
            result.push(distribution(engine));
        }
        return result;
    };
}
// tslint:disable:unified-signatures
// has 2**x chars, for faster uniform distribution
const DEFAULT_STRING_POOL = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-";
function string(pool = DEFAULT_STRING_POOL) {
    const poolLength = pool.length;
    if (!poolLength) {
        throw new Error("Expected pool not to be an empty string");
    }
    const distribution = integer(0, poolLength - 1);
    return (engine, length)=>{
        let result = "";
        for(let i = 0; i < length; ++i){
            const j = distribution(engine);
            result += pool.charAt(j);
        }
        return result;
    };
}
const LOWER_HEX_POOL = "0123456789abcdef";
const lowerHex = string(LOWER_HEX_POOL);
const upperHex = string(LOWER_HEX_POOL.toUpperCase());
/**
 * Returns a Distribution that returns a random string comprised of numbers
 * or the characters `abcdef` (or `ABCDEF`) of length `length`.
 * @param length Length of the result string
 * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`
 */ function hex(uppercase) {
    if (uppercase) {
        return upperHex;
    } else {
        return lowerHex;
    }
}
function convertSliceArgument(value, length) {
    if (value < 0) {
        return Math.max(value + length, 0);
    } else {
        return Math.min(value, length);
    }
}
function toInteger(value) {
    const num = +value;
    if (num < 0) {
        return Math.ceil(num);
    } else {
        return Math.floor(num);
    }
}
/**
 * Returns a random value within the provided `source` within the sliced
 * bounds of `begin` and `end`.
 * @param source an array of items to pick from
 * @param begin the beginning slice index (defaults to `0`)
 * @param end the ending slice index (defaults to `source.length`)
 */ function pick(engine, source, begin, end) {
    const length = source.length;
    if (length === 0) {
        throw new RangeError("Cannot pick from an empty array");
    }
    const start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);
    const finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);
    if (start >= finish) {
        throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);
    }
    const distribution = integer(start, finish - 1);
    return source[distribution(engine)];
}
function multiply(distribution, multiplier) {
    if (multiplier === 1) {
        return distribution;
    } else if (multiplier === 0) {
        return ()=>0;
    } else {
        return (engine)=>distribution(engine) * multiplier;
    }
}
/**
 * Returns a floating-point value within [0.0, 1.0)
 */ function realZeroToOneExclusive(engine) {
    return uint53(engine) / SMALLEST_UNSAFE_INTEGER;
}
/**
 * Returns a floating-point value within [0.0, 1.0]
 */ function realZeroToOneInclusive(engine) {
    return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;
}
/**
 * Returns a floating-point value within [min, max) or [min, max]
 * @param min The minimum floating-point value, inclusive.
 * @param max The maximum floating-point value.
 * @param inclusive If true, `max` will be inclusive.
 */ function real(min, max, inclusive = false) {
    if (!isFinite(min)) {
        throw new RangeError("Expected min to be a finite number");
    } else if (!isFinite(max)) {
        throw new RangeError("Expected max to be a finite number");
    }
    return add(multiply(inclusive ? realZeroToOneInclusive : realZeroToOneExclusive, max - min), min);
}
const sliceArray = Array.prototype.slice;
/**
 * Shuffles an array in-place
 * @param engine The Engine to use when choosing random values
 * @param array The array to shuffle
 * @param downTo minimum index to shuffle. Only used internally.
 */ function shuffle(engine, array, downTo = 0) {
    const length = array.length;
    if (length) {
        for(let i = length - 1 >>> 0; i > downTo; --i){
            const distribution = integer(0, i);
            const j = distribution(engine);
            if (i !== j) {
                const tmp = array[i];
                array[i] = array[j];
                array[j] = tmp;
            }
        }
    }
    return array;
}
/**
 * From the population array, produce an array with sampleSize elements that
 * are randomly chosen without repeats.
 * @param engine The Engine to use when choosing random values
 * @param population An array that has items to choose a sample from
 * @param sampleSize The size of the result array
 */ function sample(engine, population, sampleSize) {
    if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {
        throw new RangeError("Expected sampleSize to be within 0 and the length of the population");
    }
    if (sampleSize === 0) {
        return [];
    }
    const clone = sliceArray.call(population);
    const length = clone.length;
    if (length === sampleSize) {
        return shuffle(engine, clone, 0);
    }
    const tailLength = length - sampleSize;
    return shuffle(engine, clone, tailLength - 1).slice(tailLength);
}
const stringRepeat = (()=>{
    try {
        if ("x".repeat(3) === "xxx") {
            return (pattern, count)=>pattern.repeat(count);
        }
    } catch (_) {
    // nothing to do here
    }
    return (pattern, count)=>{
        let result = "";
        while(count > 0){
            if (count & 1) {
                result += pattern;
            }
            count >>= 1;
            pattern += pattern;
        }
        return result;
    };
})();
function zeroPad(text, zeroCount) {
    return stringRepeat("0", zeroCount - text.length) + text;
}
/**
 * Returns a Universally Unique Identifier Version 4.
 *
 * See http://en.wikipedia.org/wiki/Universally_unique_identifier
 */ function uuid4(engine) {
    const a = engine.next() >>> 0;
    const b = engine.next() | 0;
    const c = engine.next() | 0;
    const d = engine.next() >>> 0;
    return zeroPad(a.toString(16), 8) + "-" + zeroPad((b & 0xffff).toString(16), 4) + "-" + zeroPad((b >> 4 & 0x0fff | 0x4000).toString(16), 4) + "-" + zeroPad((c & 0x3fff | 0x8000).toString(16), 4) + "-" + zeroPad((c >> 4 & 0xffff).toString(16), 4) + zeroPad(d.toString(16), 8);
}
/**
 * An int32-producing Engine that uses `Math.random()`
 */ const nativeMath = {
    next () {
        return Math.random() * UINT32_SIZE | 0;
    }
};
// tslint:disable:unified-signatures
/**
 * A wrapper around an Engine that provides easy-to-use methods for
 * producing values based on known distributions
 */ class Random {
    /**
     * Creates a new Random wrapper
     * @param engine The engine to use (defaults to a `Math.random`-based implementation)
     */ constructor(engine = nativeMath){
        this.engine = engine;
    }
    /**
     * Returns a value within [-0x80000000, 0x7fffffff]
     */ int32() {
        return int32(this.engine);
    }
    /**
     * Returns a value within [0, 0xffffffff]
     */ uint32() {
        return uint32(this.engine);
    }
    /**
     * Returns a value within [0, 0x1fffffffffffff]
     */ uint53() {
        return uint53(this.engine);
    }
    /**
     * Returns a value within [0, 0x20000000000000]
     */ uint53Full() {
        return uint53Full(this.engine);
    }
    /**
     * Returns a value within [-0x20000000000000, 0x1fffffffffffff]
     */ int53() {
        return int53(this.engine);
    }
    /**
     * Returns a value within [-0x20000000000000, 0x20000000000000]
     */ int53Full() {
        return int53Full(this.engine);
    }
    /**
     * Returns a value within [min, max]
     * @param min The minimum integer value, inclusive. No less than -0x20000000000000.
     * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.
     */ integer(min, max) {
        return integer(min, max)(this.engine);
    }
    /**
     * Returns a floating-point value within [0.0, 1.0]
     */ realZeroToOneInclusive() {
        return realZeroToOneInclusive(this.engine);
    }
    /**
     * Returns a floating-point value within [0.0, 1.0)
     */ realZeroToOneExclusive() {
        return realZeroToOneExclusive(this.engine);
    }
    /**
     * Returns a floating-point value within [min, max) or [min, max]
     * @param min The minimum floating-point value, inclusive.
     * @param max The maximum floating-point value.
     * @param inclusive If true, `max` will be inclusive.
     */ real(min, max, inclusive = false) {
        return real(min, max, inclusive)(this.engine);
    }
    bool(numerator, denominator) {
        return bool(numerator, denominator)(this.engine);
    }
    /**
     * Return a random value within the provided `source` within the sliced
     * bounds of `begin` and `end`.
     * @param source an array of items to pick from
     * @param begin the beginning slice index (defaults to `0`)
     * @param end the ending slice index (defaults to `source.length`)
     */ pick(source, begin, end) {
        return pick(this.engine, source, begin, end);
    }
    /**
     * Shuffles an array in-place
     * @param array The array to shuffle
     */ shuffle(array) {
        return shuffle(this.engine, array);
    }
    /**
     * From the population array, returns an array with sampleSize elements that
     * are randomly chosen without repeats.
     * @param population An array that has items to choose a sample from
     * @param sampleSize The size of the result array
     */ sample(population, sampleSize) {
        return sample(this.engine, population, sampleSize);
    }
    /**
     * Returns a value within [1, sideCount]
     * @param sideCount The number of sides of the die
     */ die(sideCount) {
        return die(sideCount)(this.engine);
    }
    /**
     * Returns an array of length `dieCount` of values within [1, sideCount]
     * @param sideCount The number of sides of each die
     * @param dieCount The number of dice
     */ dice(sideCount, dieCount) {
        return dice(sideCount, dieCount)(this.engine);
    }
    /**
     * Returns a Universally Unique Identifier Version 4.
     *
     * See http://en.wikipedia.org/wiki/Universally_unique_identifier
     */ uuid4() {
        return uuid4(this.engine);
    }
    string(length, pool) {
        return string(pool)(this.engine, length);
    }
    /**
     * Returns a random string comprised of numbers or the characters `abcdef`
     * (or `ABCDEF`) of length `length`.
     * @param length Length of the result string
     * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`
     */ hex(length, uppercase) {
        return hex(uppercase)(this.engine, length);
    }
    /**
     * Returns a random `Date` within the inclusive range of [`start`, `end`].
     * @param start The minimum `Date`
     * @param end The maximum `Date`
     */ date(start, end) {
        return date(start, end)(this.engine);
    }
}
/**
 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array
 */ const I32Array = (()=>{
    try {
        const buffer = new ArrayBuffer(4);
        const view = new Int32Array(buffer);
        view[0] = INT32_SIZE;
        if (view[0] === -INT32_SIZE) {
            return Int32Array;
        }
    } catch (_) {
    // nothing to do here
    }
    return Array;
})();
let data = null;
const COUNT = 128;
let index = COUNT;
/**
 * An Engine that relies on the globally-available `crypto.getRandomValues`,
 * which is typically available in modern browsers.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
 *
 * If unavailable or otherwise non-functioning, then `browserCrypto` will
 * likely `throw` on the first call to `next()`.
 */ const browserCrypto = {
    next () {
        if (index >= COUNT) {
            if (data === null) {
                data = new I32Array(COUNT);
            }
            crypto.getRandomValues(data);
            index = 0;
        }
        return data[index++] | 0;
    }
};
/**
 * Returns an array of random int32 values, based on current time
 * and a random number engine
 *
 * @param engine an Engine to pull random values from, default `nativeMath`
 * @param length the length of the Array, minimum 1, default 16
 */ function createEntropy(engine = nativeMath, length = 16) {
    const array = [];
    array.push(new Date().getTime() | 0);
    for(let i = 1; i < length; ++i){
        array[i] = engine.next() | 0;
    }
    return array;
}
/**
 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
 */ const imul = (()=>{
    try {
        if (Math.imul(UINT32_MAX, 5) === -5) {
            return Math.imul;
        }
    } catch (_) {
    // nothing to do here
    }
    const UINT16_MAX = 0xffff;
    return (a, b)=>{
        const ah = a >>> 16 & UINT16_MAX;
        const al = a & UINT16_MAX;
        const bh = b >>> 16 & UINT16_MAX;
        const bl = b & UINT16_MAX;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
})();
const ARRAY_SIZE = 624;
const ARRAY_MAX = ARRAY_SIZE - 1;
const M = 397;
const ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;
const A = 0x9908b0df;
/**
 * An Engine that is a pseudorandom number generator using the Mersenne
 * Twister algorithm based on the prime 2**19937 − 1
 *
 * See http://en.wikipedia.org/wiki/Mersenne_twister
 */ class MersenneTwister19937 {
    /**
     * MersenneTwister19937 should not be instantiated directly.
     * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.
     */ constructor(){
        this.data = new I32Array(ARRAY_SIZE);
        this.index = 0; // integer within [0, 624]
        this.uses = 0;
    }
    /**
     * Returns a MersenneTwister19937 seeded with an initial int32 value
     * @param initial the initial seed value
     */ static seed(initial) {
        return new MersenneTwister19937().seed(initial);
    }
    /**
     * Returns a MersenneTwister19937 seeded with zero or more int32 values
     * @param source A series of int32 values
     */ static seedWithArray(source) {
        return new MersenneTwister19937().seedWithArray(source);
    }
    /**
     * Returns a MersenneTwister19937 seeded with the current time and
     * a series of natively-generated random values
     */ static autoSeed() {
        return MersenneTwister19937.seedWithArray(createEntropy());
    }
    /**
     * Returns the next int32 value of the sequence
     */ next() {
        if ((this.index | 0) >= ARRAY_SIZE) {
            refreshData(this.data);
            this.index = 0;
        }
        const value = this.data[this.index];
        this.index = this.index + 1 | 0;
        this.uses += 1;
        return temper(value) | 0;
    }
    /**
     * Returns the number of times that the Engine has been used.
     *
     * This can be provided to an unused MersenneTwister19937 with the same
     * seed, bringing it to the exact point that was left off.
     */ getUseCount() {
        return this.uses;
    }
    /**
     * Discards one or more items from the engine
     * @param count The count of items to discard
     */ discard(count) {
        if (count <= 0) {
            return this;
        }
        this.uses += count;
        if ((this.index | 0) >= ARRAY_SIZE) {
            refreshData(this.data);
            this.index = 0;
        }
        while(count + this.index > ARRAY_SIZE){
            count -= ARRAY_SIZE - this.index;
            refreshData(this.data);
            this.index = 0;
        }
        this.index = this.index + count | 0;
        return this;
    }
    seed(initial) {
        let previous = 0;
        this.data[0] = previous = initial | 0;
        for(let i = 1; i < ARRAY_SIZE; i = i + 1 | 0){
            this.data[i] = previous = imul(previous ^ previous >>> 30, 0x6c078965) + i | 0;
        }
        this.index = ARRAY_SIZE;
        this.uses = 0;
        return this;
    }
    seedWithArray(source) {
        this.seed(0x012bd6aa);
        seedWithArray(this.data, source);
        return this;
    }
}
function refreshData(data) {
    let k = 0;
    let tmp = 0;
    for(; (k | 0) < ARRAY_SIZE_MINUS_M; k = k + 1 | 0){
        tmp = data[k] & INT32_SIZE | data[k + 1 | 0] & INT32_MAX;
        data[k] = data[k + M | 0] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);
    }
    for(; (k | 0) < ARRAY_MAX; k = k + 1 | 0){
        tmp = data[k] & INT32_SIZE | data[k + 1 | 0] & INT32_MAX;
        data[k] = data[k - ARRAY_SIZE_MINUS_M | 0] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);
    }
    tmp = data[ARRAY_MAX] & INT32_SIZE | data[0] & INT32_MAX;
    data[ARRAY_MAX] = data[M - 1] ^ tmp >>> 1 ^ (tmp & 0x1 ? A : 0);
}
function temper(value) {
    value ^= value >>> 11;
    value ^= value << 7 & 0x9d2c5680;
    value ^= value << 15 & 0xefc60000;
    return value ^ value >>> 18;
}
function seedWithArray(data, source) {
    let i = 1;
    let j = 0;
    const sourceLength = source.length;
    let k = Math.max(sourceLength, ARRAY_SIZE) | 0;
    let previous = data[0] | 0;
    for(; (k | 0) > 0; --k){
        data[i] = previous = (data[i] ^ imul(previous ^ previous >>> 30, 0x0019660d)) + (source[j] | 0) + (j | 0) | 0;
        i = i + 1 | 0;
        ++j;
        if ((i | 0) > ARRAY_MAX) {
            data[0] = data[ARRAY_MAX];
            i = 1;
        }
        if (j >= sourceLength) {
            j = 0;
        }
    }
    for(k = ARRAY_MAX; (k | 0) > 0; --k){
        data[i] = previous = (data[i] ^ imul(previous ^ previous >>> 30, 0x5d588b65)) - i | 0;
        i = i + 1 | 0;
        if ((i | 0) > ARRAY_MAX) {
            data[0] = data[ARRAY_MAX];
            i = 1;
        }
    }
    data[0] = INT32_SIZE;
}
let data$1 = null;
const COUNT$1 = 128;
let index$1 = COUNT$1;
/**
 * An Engine that relies on the node-available
 * `require('crypto').randomBytes`, which has been available since 0.58.
 *
 * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback
 *
 * If unavailable or otherwise non-functioning, then `nodeCrypto` will
 * likely `throw` on the first call to `next()`.
 */ const nodeCrypto = {
    next () {
        if (index$1 >= COUNT$1) {
            data$1 = new Int32Array(new Int8Array(__turbopack_context__.r("[externals]/crypto [external] (crypto, cjs)").randomBytes(4 * COUNT$1)).buffer);
            index$1 = 0;
        }
        return data$1[index$1++] | 0;
    }
};
/**
 * Returns a Distribution to random value within the provided `source`
 * within the sliced bounds of `begin` and `end`.
 * @param source an array of items to pick from
 * @param begin the beginning slice index (defaults to `0`)
 * @param end the ending slice index (defaults to `source.length`)
 */ function picker(source, begin, end) {
    const clone = sliceArray.call(source, begin, end);
    if (clone.length === 0) {
        throw new RangeError(`Cannot pick from a source with no items`);
    }
    const distribution = integer(0, clone.length - 1);
    return (engine)=>clone[distribution(engine)];
}
;
 //# sourceMappingURL=random-js.esm.js.map
}}),
"[project]/node_modules/ml-random-forest/src/utils.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "checkFloat": (()=>checkFloat),
    "collectOOB": (()=>collectOOB),
    "examplesBaggingWithReplacement": (()=>examplesBaggingWithReplacement),
    "featureBagging": (()=>featureBagging),
    "isFloat": (()=>isFloat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$random$2d$js$2f$dist$2f$random$2d$js$2e$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/random-js/dist/random-js.esm.js [app-rsc] (ecmascript)");
;
;
function checkFloat(n) {
    return n > 0.0 && n <= 1.0;
}
function isFloat(n) {
    return Number(n) === n && n % 1 !== 0;
}
function examplesBaggingWithReplacement(trainingSet, trainingValue, seed) {
    let engine;
    let distribution = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$random$2d$js$2f$dist$2f$random$2d$js$2e$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["integer"])(0, trainingSet.rows - 1);
    if (seed === undefined) {
        engine = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$random$2d$js$2f$dist$2f$random$2d$js$2e$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MersenneTwister19937"].autoSeed();
    } else if (Number.isInteger(seed)) {
        engine = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$random$2d$js$2f$dist$2f$random$2d$js$2e$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MersenneTwister19937"].seed(seed);
    } else {
        throw new RangeError(`Expected seed must be undefined or integer not ${seed}`);
    }
    let Xr = new Array(trainingSet.rows);
    let yr = new Array(trainingSet.rows);
    let oob = new Array(trainingSet.rows).fill(0);
    let oobN = trainingSet.rows;
    for(let i = 0; i < trainingSet.rows; ++i){
        let index = distribution(engine);
        Xr[i] = trainingSet.getRow(index);
        yr[i] = trainingValue[index];
        if (oob[index]++ === 0) {
            oobN--;
        }
    }
    let Xoob = new Array(oobN);
    let ioob = new Array(oobN);
    // run backwards to have ioob filled in increasing order
    for(let i = trainingSet.rows - 1; i >= 0 && oobN > 0; --i){
        if (oob[i] === 0) {
            Xoob[--oobN] = trainingSet.getRow(i);
            ioob[oobN] = i;
        }
    }
    return {
        X: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"](Xr),
        y: yr,
        Xoob: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"](Xoob),
        ioob,
        seed: engine.next()
    };
}
function featureBagging(trainingSet, n, replacement, seed) {
    if (trainingSet.columns < n) {
        throw new RangeError('N should be less or equal to the number of columns of X');
    }
    let distribution = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$random$2d$js$2f$dist$2f$random$2d$js$2e$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["integer"])(0, trainingSet.columns - 1);
    let engine;
    if (seed === undefined) {
        engine = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$random$2d$js$2f$dist$2f$random$2d$js$2e$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MersenneTwister19937"].autoSeed();
    } else if (Number.isInteger(seed)) {
        engine = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$random$2d$js$2f$dist$2f$random$2d$js$2e$esm$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MersenneTwister19937"].seed(seed);
    } else {
        throw new RangeError(`Expected seed must be undefined or integer not ${seed}`);
    }
    let toRet = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"](trainingSet.rows, n);
    let usedIndex;
    let index;
    if (replacement) {
        usedIndex = new Array(n);
        for(let i = 0; i < n; ++i){
            index = distribution(engine);
            usedIndex[i] = index;
            toRet.setColumn(i, trainingSet.getColumn(index));
        }
    } else {
        usedIndex = new Set();
        index = distribution(engine);
        for(let i = 0; i < n; ++i){
            while(usedIndex.has(index)){
                index = distribution(engine);
            }
            toRet.setColumn(i, trainingSet.getColumn(index));
            usedIndex.add(index);
        }
        usedIndex = Array.from(usedIndex);
    }
    return {
        X: toRet,
        usedIndex: usedIndex,
        seed: engine.next()
    };
}
const collectOOB = (oob, y, aggregate)=>{
    const res = Array(y.length);
    for(let i = 0; i < y.length; i++){
        const all = [];
        for(let j = 0; j < oob.length; j++){
            const o = oob[j];
            if (o.index[0] === i) {
                all.push(o.predicted[0]);
                o.index = o.index.slice(1);
                o.predicted = o.predicted.slice(1);
            }
        }
        res[i] = {
            true: y[i],
            all: all,
            predicted: aggregate(all)
        };
    }
    return res;
};
}}),
"[project]/node_modules/ml-random-forest/src/RandomForestBase.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RandomForestBase": (()=>RandomForestBase)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$DecisionTreeClassifier$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/DecisionTreeClassifier.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$DecisionTreeRegression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-cart/src/DecisionTreeRegression.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-matrix/matrix.mjs [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-random-forest/src/utils.js [app-rsc] (ecmascript)");
;
;
;
class RandomForestBase {
    /**
   * Create a new base random forest for a classifier or regression model.
   * @constructor
   * @param {object} options
   * @param {number|String} [options.maxFeatures] - the number of features used on each estimator.
   *        * if is an integer it selects maxFeatures elements over the sample features.
   *        * if is a float between (0, 1), it takes the percentage of features.
   * @param {boolean} [options.replacement] - use replacement over the sample features.
   * @param {number} [options.seed] - seed for feature and samples selection, must be a 32-bit integer.
   * @param {number} [options.nEstimators] - number of estimator to use.
   * @param {object} [options.treeOptions] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}
   * @param {boolean} [options.isClassifier] - boolean to check if is a classifier or regression model (used by subclasses).
   * @param {boolean} [options.useSampleBagging] - use bagging over training samples.
   * @param {boolean} [options.noOOB] - don't calculate Out-Of-Bag predictions.
   * @param {object} model - for load purposes.
   */ constructor(options, model){
        if (options === true) {
            this.replacement = model.replacement;
            this.maxFeatures = model.maxFeatures;
            this.nEstimators = model.nEstimators;
            this.treeOptions = model.treeOptions;
            this.isClassifier = model.isClassifier;
            this.seed = model.seed;
            this.n = model.n;
            this.indexes = model.indexes;
            this.useSampleBagging = model.useSampleBagging;
            this.noOOB = true;
            this.maxSamples = model.maxSamples;
            let Estimator = this.isClassifier ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$DecisionTreeClassifier$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DecisionTreeClassifier"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$DecisionTreeRegression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DecisionTreeRegression"];
            this.estimators = model.estimators.map((est)=>Estimator.load(est));
        } else {
            this.replacement = options.replacement;
            this.maxFeatures = options.maxFeatures;
            this.nEstimators = options.nEstimators;
            this.treeOptions = options.treeOptions;
            this.isClassifier = options.isClassifier;
            this.seed = options.seed;
            this.useSampleBagging = options.useSampleBagging;
            this.noOOB = options.noOOB;
            this.maxSamples = options.maxSamples;
        }
    }
    /**
   * Train the decision tree with the given training set and labels.
   * @param {Matrix|Array} trainingSet
   * @param {Array} trainingValues
   */ train(trainingSet, trainingValues) {
        let currentSeed = this.seed;
        trainingSet = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].checkMatrix(trainingSet);
        this.maxFeatures = this.maxFeatures || trainingSet.columns;
        this.numberFeatures = trainingSet.columns;
        this.numberSamples = trainingSet.rows;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["checkFloat"])(this.maxFeatures)) {
            this.n = Math.floor(trainingSet.columns * this.maxFeatures);
        } else if (Number.isInteger(this.maxFeatures)) {
            if (this.maxFeatures > trainingSet.columns) {
                throw new RangeError(`The maxFeatures parameter should be less than ${trainingSet.columns}`);
            } else {
                this.n = this.maxFeatures;
            }
        } else {
            throw new RangeError(`Cannot process the maxFeatures parameter ${this.maxFeatures}`);
        }
        if (this.maxSamples) {
            if (this.maxSamples < 0) {
                throw new RangeError(`Please choose a positive value for maxSamples`);
            } else {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isFloat"])(this.maxSamples)) {
                    if (this.maxSamples > 1.0) {
                        throw new RangeError('Please choose either a float value between 0 and 1 or a positive integer for maxSamples');
                    } else {
                        this.numberSamples = Math.floor(trainingSet.rows * this.maxSamples);
                    }
                } else if (Number.isInteger(this.maxSamples)) {
                    if (this.maxSamples > trainingSet.rows) {
                        throw new RangeError(`The maxSamples parameter should be less than ${trainingSet.rows}`);
                    } else {
                        this.numberSamples = this.maxSamples;
                    }
                }
            }
        }
        if (this.maxSamples) {
            if (trainingSet.rows !== this.numberSamples) {
                let tmp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"](this.numberSamples, trainingSet.columns);
                for(let j = 0; j < this.numberSamples; j++){
                    tmp.removeRow(0);
                }
                for(let i = 0; i < this.numberSamples; i++){
                    tmp.addRow(trainingSet.getRow(i));
                }
                trainingSet = tmp;
                trainingValues = trainingValues.slice(0, this.numberSamples);
            }
        }
        let Estimator;
        if (this.isClassifier) {
            Estimator = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$DecisionTreeClassifier$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DecisionTreeClassifier"];
        } else {
            Estimator = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$cart$2f$src$2f$DecisionTreeRegression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["DecisionTreeRegression"];
        }
        this.estimators = new Array(this.nEstimators);
        this.indexes = new Array(this.nEstimators);
        let oobResults = new Array(this.nEstimators);
        for(let i = 0; i < this.nEstimators; ++i){
            let res = this.useSampleBagging ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["examplesBaggingWithReplacement"])(trainingSet, trainingValues, currentSeed) : {
                X: trainingSet,
                y: trainingValues,
                seed: currentSeed,
                Xoob: undefined,
                yoob: [],
                ioob: []
            };
            let X = res.X;
            let y = res.y;
            currentSeed = res.seed;
            let { Xoob, ioob } = res;
            // Other implementations of random forests apply feature bagging at every split during tree generation.
            // So I think it would be better to implement it at the CART level, not here.
            res = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["featureBagging"])(X, this.n, this.replacement, currentSeed);
            X = res.X;
            currentSeed = res.seed;
            this.indexes[i] = res.usedIndex;
            this.estimators[i] = new Estimator(this.treeOptions);
            this.estimators[i].train(X, y);
            if (!this.noOOB && this.useSampleBagging) {
                let xoob = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixColumnSelectionView"](Xoob, this.indexes[i]);
                oobResults[i] = {
                    index: ioob,
                    predicted: this.estimators[i].predict(xoob)
                };
            }
        }
        if (!this.noOOB && this.useSampleBagging && oobResults.length > 0) {
            this.oobResults = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["collectOOB"])(oobResults, trainingValues, this.selection.bind(this));
        }
    }
    /**
   * Evaluate the feature importances for each tree in the ensemble
   * @return {Array} feature importances
   */ featureImportance() {
        const trees = JSON.parse(JSON.stringify(this.estimators));
        const indexes = JSON.parse(JSON.stringify(this.indexes));
        let importance = [];
        function computeFeatureImportances(i, node) {
            // node.gain can be null or undefined
            if (!node || !('splitColumn' in node) || !(node.gain > 0)) return;
            let f = node.gain * node.numberSamples;
            if ('left' in node) {
                f -= (node.left.gain || 0) * (node.left.numberSamples || 0);
            }
            if ('right' in node) {
                f -= (node.right.gain || 0) * (node.right.numberSamples || 0);
            }
            importance[i][node.splitColumn] += f;
            if (node.left) {
                computeFeatureImportances(i, node.left);
            }
            if (node.right) {
                computeFeatureImportances(i, node.right);
            }
        }
        function normalizeImportances(i) {
            const s = importance[i].reduce((cum, v)=>{
                return cum += v;
            }, 0);
            importance[i] = importance[i].map((v)=>{
                return v / s;
            });
        }
        for(let i = 0; i < trees.length; i++){
            importance.push(new Array(this.numberFeatures).fill(0.0));
            computeFeatureImportances(i, trees[i].root);
            normalizeImportances(i);
        }
        let avgImportance = new Array(this.numberFeatures).fill(0.0);
        for(let i = 0; i < importance.length; i++){
            for(let x = 0; x < this.numberFeatures; x++){
                avgImportance[indexes[i][x]] += importance[i][x];
            }
        }
        const s = avgImportance.reduce((cum, v)=>{
            return cum += v;
        }, 0);
        return avgImportance.map((v)=>{
            return v / s;
        });
    }
    /**
   * Method that returns the way the algorithm generates the predictions, for example, in classification
   * you can return the mode of all predictions retrieved by the trees, or in case of regression you can
   * use the mean or the median.
   * @abstract
   * @param {Array} values - predictions of the estimators.
   * @return {number} prediction.
   */ // eslint-disable-next-line no-unused-vars
    selection(values) {
        throw new Error("Abstract method 'selection' not implemented!");
    }
    /**
   * Predicts the output given the matrix to predict.
   * @param {Matrix|Array} toPredict
   * @return {Array} predictions
   */ predict(toPredict) {
        const predictionValues = this.predictionValues(toPredict);
        let predictions = new Array(predictionValues.rows);
        for(let i = 0; i < predictionValues.rows; ++i){
            predictions[i] = this.selection(predictionValues.getRow(i));
        }
        return predictions;
    }
    /**
   * Predicts the output given the matrix to predict.
   * @param {Matrix|Array} toPredict
   * @return {MatrixTransposeView} predictions of estimators
   */ predictionValues(toPredict) {
        let predictionValues = new Array(this.nEstimators);
        toPredict = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Matrix"].checkMatrix(toPredict);
        for(let i = 0; i < this.nEstimators; ++i){
            let X = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixColumnSelectionView"](toPredict, this.indexes[i]);
            predictionValues[i] = this.estimators[i].predict(X);
        }
        return predictionValues = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MatrixTransposeView"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$matrix$2f$matrix$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["WrapperMatrix2D"](predictionValues));
    }
    /**
   * Returns the Out-Of-Bag predictions.
   * @return {Array} predictions
   */ predictOOB() {
        if (!this.oobResults || this.oobResults.length === 0) {
            throw new Error('No Out-Of-Bag results found. Did you forgot to train first?');
        }
        return this.oobResults.map((v)=>v.predicted);
    }
    /**
   * Export the current model to JSON.
   * @return {object} - Current model.
   */ toJSON() {
        return {
            indexes: this.indexes,
            n: this.n,
            replacement: this.replacement,
            maxFeatures: this.maxFeatures,
            nEstimators: this.nEstimators,
            treeOptions: this.treeOptions,
            isClassifier: this.isClassifier,
            seed: this.seed,
            estimators: this.estimators.map((est)=>est.toJSON()),
            useSampleBagging: this.useSampleBagging
        };
    }
}
}}),
"[project]/node_modules/ml-random-forest/src/RandomForestClassifier.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RandomForestClassifier": (()=>RandomForestClassifier)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$mode$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-array-mode/lib-es6/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$RandomForestBase$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-random-forest/src/RandomForestBase.js [app-rsc] (ecmascript)");
;
;
const defaultOptions = {
    maxFeatures: 1.0,
    replacement: true,
    nEstimators: 50,
    seed: 42,
    useSampleBagging: true,
    noOOB: false
};
class RandomForestClassifier extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$RandomForestBase$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RandomForestBase"] {
    /**
   * Create a new base random forest for a classifier or regression model.
   * @constructor
   * @param {object} options
   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.
   *        * if is an integer it selects maxFeatures elements over the sample features.
   *        * if is a float between (0, 1), it takes the percentage of features.
   * @param {boolean} [options.replacement=true] - use replacement over the sample features.
   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.
   * @param {number} [options.nEstimators=50] - number of estimator to use.
   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}
   * @param {boolean} [options.useSampleBagging=true] - use bagging over training samples.
   * @param {number} [options.maxSamples=null] - if null, then draw X.shape[0] samples. If int, then draw maxSamples samples. If float, then draw maxSamples * X.shape[0] samples. Thus, maxSamples should be in the interval (0.0, 1.0].
   * @param {object} model - for load purposes.
   */ constructor(options, model){
        if (options === true) {
            super(true, model.baseModel);
        } else {
            options = Object.assign({}, defaultOptions, options);
            options.isClassifier = true;
            super(options);
        }
    }
    /**
   * retrieve the prediction given the selection method.
   * @param {Array} values - predictions of the estimators.
   * @return {number} prediction
   */ selection(values) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$mode$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(values);
    }
    /**
   * Export the current model to JSON.
   * @return {object} - Current model.
   */ toJSON() {
        let baseModel = super.toJSON();
        return {
            baseModel: baseModel,
            name: 'RFClassifier'
        };
    }
    /**
   * Returns the confusion matrix
   * Make sure to run train first.
   * @return {object} - Current model.
   */ getConfusionMatrix() {
        if (!this.oobResults) {
            throw new Error('No Out-Of-Bag results available.');
        }
        const labels = new Set();
        const matrix = this.oobResults.reduce((p, v)=>{
            labels.add(v.true);
            labels.add(v.predicted);
            const x = p[v.predicted] || {};
            x[v.true] = (x[v.true] || 0) + 1;
            p[v.predicted] = x;
            return p;
        }, {});
        const sortedLabels = [
            ...labels
        ].sort();
        return sortedLabels.map((v)=>sortedLabels.map((w)=>(matrix[v] || {})[w] || 0));
    }
    /**
   * Load a Decision tree classifier with the given model.
   * @param {object} model
   * @return {RandomForestClassifier}
   */ static load(model) {
        if (model.name !== 'RFClassifier') {
            throw new RangeError(`Invalid model: ${model.name}`);
        }
        return new RandomForestClassifier(true, model);
    }
    /**
   * Predicts the probability of a label given the matrix to predict.
   * @param {Matrix|Array} toPredict
   * @param {number} label
   * @return {Array} predictions
   */ predictProbability(toPredict, label) {
        const predictionValues = this.predictionValues(toPredict);
        let predictions = new Array(predictionValues.rows);
        for(let i = 0; i < predictionValues.rows; ++i){
            const pvs = predictionValues.getRow(i);
            const l = pvs.length;
            const roundFactor = Math.pow(10, 6);
            predictions[i] = Math.round(pvs.reduce((p, v)=>{
                if (v === label) {
                    p += roundFactor / l;
                }
                return p;
            })) / roundFactor;
        }
        return predictions;
    }
}
}}),
"[project]/node_modules/median-quickselect/lib/median-quickselect.min.js [app-rsc] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
(function() {
    function a(d) {
        for(var e = 0, f = d.length - 1, g = void 0, h = void 0, i = void 0, j = c(e, f); !0;){
            if (f <= e) return d[j];
            if (f == e + 1) return d[e] > d[f] && b(d, e, f), d[j];
            for(g = c(e, f), d[g] > d[f] && b(d, g, f), d[e] > d[f] && b(d, e, f), d[g] > d[e] && b(d, g, e), b(d, g, e + 1), h = e + 1, i = f; !0;){
                do h++;
                while (d[e] > d[h])
                do i--;
                while (d[i] > d[e])
                if (i < h) break;
                b(d, h, i);
            }
            b(d, e, i), i <= j && (e = h), i >= j && (f = i - 1);
        }
    }
    var b = function b(d, e, f) {
        var _ref;
        return _ref = [
            d[f],
            d[e]
        ], d[e] = _ref[0], d[f] = _ref[1], _ref;
    }, c = function c(d, e) {
        return ~~((d + e) / 2);
    };
    'undefined' != ("TURBOPACK compile-time value", "object") && module.exports ? module.exports = a : window.median = a;
})();
}}),
"[project]/node_modules/ml-array-median/lib-es6/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>median)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/is-any-array/lib-esm/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$median$2d$quickselect$2f$lib$2f$median$2d$quickselect$2e$min$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/median-quickselect/lib/median-quickselect.min.js [app-rsc] (ecmascript)");
;
;
function median(input) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$is$2d$any$2d$array$2f$lib$2d$esm$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAnyArray"])(input)) {
        throw new TypeError('input must be an array');
    }
    if (input.length === 0) {
        throw new TypeError('input must not be empty');
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$median$2d$quickselect$2f$lib$2f$median$2d$quickselect$2e$min$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])(input.slice());
}
;
}}),
"[project]/node_modules/ml-random-forest/src/RandomForestRegression.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RandomForestRegression": (()=>RandomForestRegression)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$mean$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-array-mean/lib-es6/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$median$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-array-median/lib-es6/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$RandomForestBase$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-random-forest/src/RandomForestBase.js [app-rsc] (ecmascript)");
;
;
;
const selectionMethods = {
    mean: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$mean$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"],
    median: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$array$2d$median$2f$lib$2d$es6$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]
};
const defaultOptions = {
    maxFeatures: 1.0,
    replacement: false,
    nEstimators: 50,
    treeOptions: {},
    selectionMethod: 'mean',
    seed: 42,
    useSampleBagging: true,
    noOOB: false
};
class RandomForestRegression extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$RandomForestBase$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["RandomForestBase"] {
    /**
   * Create a new base random forest for a classifier or regression model.
   * @constructor
   * @param {object} options
   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.
   *        * if is an integer it selects maxFeatures elements over the sample features.
   *        * if is a float between (0, 1), it takes the percentage of features.
   * @param {boolean} [options.replacement=true] - use replacement over the sample features.
   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.
   * @param {number} [options.nEstimators=50] - number of estimator to use.
   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}
   * @param {string} [options.selectionMethod="mean"] - the way to calculate the prediction from estimators, "mean" and "median" are supported.
   * @param {boolean} [options.useSampleBagging=true] - use bagging over training samples.
   * @param {number} [options.maxSamples=null] - if null, then draw X.shape[0] samples. If int, then draw maxSamples samples. If float, then draw maxSamples * X.shape[0] samples. Thus, maxSamples should be in the interval (0.0, 1.0].
   * @param {object} model - for load purposes.
   */ constructor(options, model){
        if (options === true) {
            super(true, model.baseModel);
            this.selectionMethod = model.selectionMethod;
        } else {
            options = Object.assign({}, defaultOptions, options);
            if (!(options.selectionMethod === 'mean' || options.selectionMethod === 'median')) {
                throw new RangeError(`Unsupported selection method ${options.selectionMethod}`);
            }
            options.isClassifier = false;
            super(options);
            this.selectionMethod = options.selectionMethod;
        }
    }
    /**
   * retrieve the prediction given the selection method.
   * @param {Array} values - predictions of the estimators.
   * @return {number} prediction
   */ selection(values) {
        return selectionMethods[this.selectionMethod](values);
    }
    /**
   * Export the current model to JSON.
   * @return {object} - Current model.
   */ toJSON() {
        let baseModel = super.toJSON();
        return {
            baseModel: baseModel,
            selectionMethod: this.selectionMethod,
            name: 'RFRegression'
        };
    }
    /**
   * Load a Decision tree classifier with the given model.
   * @param {object} model
   * @return {RandomForestRegression}
   */ static load(model) {
        if (model.name !== 'RFRegression') {
            throw new RangeError(`Invalid model: ${model.name}`);
        }
        return new RandomForestRegression(true, model);
    }
}
}}),
"[project]/node_modules/ml-random-forest/src/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
}}),
"[project]/node_modules/ml-random-forest/src/index.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$RandomForestClassifier$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-random-forest/src/RandomForestClassifier.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$RandomForestRegression$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ml-random-forest/src/RandomForestRegression.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ml$2d$random$2d$forest$2f$src$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ml-random-forest/src/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/next/dist/esm/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    } else {
        if ("TURBOPACK compile-time truthy", 1) {
            module.exports = __turbopack_context__.r("[externals]/next/dist/compiled/next-server/app-page.runtime.dev.js [external] (next/dist/compiled/next-server/app-page.runtime.dev.js, cjs)");
        } else {
            "TURBOPACK unreachable";
        }
    }
} //# sourceMappingURL=module.compiled.js.map
}}),
"[project]/node_modules/next/dist/esm/server/route-kind.js [app-rsc] (ecmascript, Next.js server utility)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/next/dist/esm/server/route-kind.js [app-rsc] (ecmascript)"));}}),
"[project]/node_modules/next/dist/client/components/error-boundary.js [app-rsc] (ecmascript, Next.js server utility)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/next/dist/client/components/error-boundary.js [app-rsc] (ecmascript)"));}}),
"[project]/node_modules/next/dist/esm/server/app-render/entry-base.js [app-rsc] (ecmascript, Next.js server utility) <module evaluation>": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/next/dist/esm/server/app-render/entry-base.js [app-rsc] (ecmascript) <module evaluation>"));}}),
"[project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/page { METADATA_0 => \"[project]/app/favicon.ico.mjs { IMAGE => \\\"[project]/app/favicon.ico (static in ecmascript)\\\" } [app-rsc] (structured image object, ecmascript, Next.js server component)\", MODULE_1 => \"[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_2 => \"[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_3 => \"[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_4 => \"[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_5 => \"[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)\" } [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "__next_app__": (()=>__next_app__),
    "pages": (()=>pages),
    "routeModule": (()=>routeModule),
    "tree": (()=>tree)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$lib$2f$metadata$2f$get$2d$metadata$2d$route$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/lib/metadata/get-metadata-route.js [app-rsc] (ecmascript, Next.js server utility)");
var __TURBOPACK__imported__module__$5b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i('[project]/app/favicon.ico.mjs { IMAGE => "[project]/app/favicon.ico (static in ecmascript)" } [app-rsc] (structured image object, ecmascript, Next.js server component)');
var __TURBOPACK__imported__module__$5b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$module$2e$compiled$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/esm/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$route$2d$kind$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/esm/server/route-kind.js [app-rsc] (ecmascript, Next.js server utility)");
;
;
;
;
;
;
;
;
;
// We inject the tree and pages here so that we can use them in the route
// module.
const tree = [
    "",
    {
        "children": [
            "__PAGE__",
            {},
            {
                metadata: {},
                "page": [
                    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__,
                    "[project]/app/page.js"
                ]
            }
        ]
    },
    {
        metadata: {
            icon: [
                async (props)=>[
                        {
                            url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$lib$2f$metadata$2f$get$2d$metadata$2d$route$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["fillMetadataSegment"])("//", await props.params, "favicon.ico") + `?${__TURBOPACK__imported__module__$5b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].src.split("/").splice(-1)[0]}`,
                            sizes: `${__TURBOPACK__imported__module__$5b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].width}x${__TURBOPACK__imported__module__$5b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__["default"].height}`,
                            type: `image/x-icon`
                        }
                    ]
            ]
        },
        "layout": [
            ()=>__TURBOPACK__imported__module__$5b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__,
            "[project]/app/layout.js"
        ],
        "not-found": [
            ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__,
            "[project]/node_modules/next/dist/client/components/not-found-error.js"
        ],
        "forbidden": [
            ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__,
            "[project]/node_modules/next/dist/client/components/forbidden-error.js"
        ],
        "unauthorized": [
            ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__,
            "[project]/node_modules/next/dist/client/components/unauthorized-error.js"
        ]
    }
];
const pages = [
    "[project]/app/page.js"
];
;
;
const __next_app_require__ = __turbopack_context__.r;
const __next_app_load_chunk__ = __turbopack_context__.l;
const __next_app__ = {
    require: __next_app_require__,
    loadChunk: __next_app_load_chunk__
};
;
const routeModule = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$module$2e$compiled$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AppPageRouteModule"]({
    definition: {
        kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$route$2d$kind$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["RouteKind"].APP_PAGE,
        page: "/page",
        pathname: "/",
        // The following aren't used in production.
        bundlePath: '',
        filename: '',
        appPaths: []
    },
    userland: {
        loaderTree: tree
    }
}); //# sourceMappingURL=app-page.js.map
}}),
"[project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/page { METADATA_0 => \"[project]/app/favicon.ico.mjs { IMAGE => \\\"[project]/app/favicon.ico (static in ecmascript)\\\" } [app-rsc] (structured image object, ecmascript, Next.js server component)\", MODULE_1 => \"[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_2 => \"[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_3 => \"[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_4 => \"[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_5 => \"[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)\" } [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$lib$2f$metadata$2f$get$2d$metadata$2d$route$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/lib/metadata/get-metadata-route.js [app-rsc] (ecmascript, Next.js server utility)");
var __TURBOPACK__imported__module__$5b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i('[project]/app/favicon.ico.mjs { IMAGE => "[project]/app/favicon.ico (static in ecmascript)" } [app-rsc] (structured image object, ecmascript, Next.js server component)');
var __TURBOPACK__imported__module__$5b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29$__ = __turbopack_context__.i("[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$module$2e$compiled$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/esm/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$route$2d$kind$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/esm/server/route-kind.js [app-rsc] (ecmascript, Next.js server utility)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$error$2d$boundary$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/components/error-boundary.js [app-rsc] (ecmascript, Next.js server utility)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/next/dist/esm/server/app-render/entry-base.js [app-rsc] (ecmascript, Next.js server utility) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i('[project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/page { METADATA_0 => "[project]/app/favicon.ico.mjs { IMAGE => \\"[project]/app/favicon.ico (static in ecmascript)\\" } [app-rsc] (structured image object, ecmascript, Next.js server component)", MODULE_1 => "[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)", MODULE_2 => "[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_3 => "[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_4 => "[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_5 => "[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)" } [app-rsc] (ecmascript) <locals>');
}}),
"[project]/node_modules/next/dist/esm/server/app-render/entry-base.js [app-rsc] (ecmascript, Next.js server utility)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.n(__turbopack_context__.i("[project]/node_modules/next/dist/esm/server/app-render/entry-base.js [app-rsc] (ecmascript)"));}}),
"[project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/page { METADATA_0 => \"[project]/app/favicon.ico.mjs { IMAGE => \\\"[project]/app/favicon.ico (static in ecmascript)\\\" } [app-rsc] (structured image object, ecmascript, Next.js server component)\", MODULE_1 => \"[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_2 => \"[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_3 => \"[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_4 => \"[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_5 => \"[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)\" } [app-rsc] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ClientPageRoot": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["ClientPageRoot"]),
    "ClientSegmentRoot": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["ClientSegmentRoot"]),
    "GlobalError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$error$2d$boundary$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["default"]),
    "HTTPAccessFallbackBoundary": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["HTTPAccessFallbackBoundary"]),
    "LayoutRouter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["LayoutRouter"]),
    "MetadataBoundary": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["MetadataBoundary"]),
    "OutletBoundary": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["OutletBoundary"]),
    "Postpone": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["Postpone"]),
    "RenderFromTemplateContext": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["RenderFromTemplateContext"]),
    "ViewportBoundary": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["ViewportBoundary"]),
    "__next_app__": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["__next_app__"]),
    "actionAsyncStorage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["actionAsyncStorage"]),
    "collectSegmentData": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["collectSegmentData"]),
    "createMetadataComponents": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["createMetadataComponents"]),
    "createPrerenderParamsForClientSegment": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["createPrerenderParamsForClientSegment"]),
    "createPrerenderSearchParamsForClientPage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["createPrerenderSearchParamsForClientPage"]),
    "createServerParamsForMetadata": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["createServerParamsForMetadata"]),
    "createServerParamsForServerSegment": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["createServerParamsForServerSegment"]),
    "createServerSearchParamsForMetadata": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["createServerSearchParamsForMetadata"]),
    "createServerSearchParamsForServerPage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["createServerSearchParamsForServerPage"]),
    "createTemporaryReferenceSet": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["createTemporaryReferenceSet"]),
    "decodeAction": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["decodeAction"]),
    "decodeFormState": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["decodeFormState"]),
    "decodeReply": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["decodeReply"]),
    "pages": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["pages"]),
    "patchFetch": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["patchFetch"]),
    "preconnect": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["preconnect"]),
    "preloadFont": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["preloadFont"]),
    "preloadStyle": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["preloadStyle"]),
    "prerender": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["prerender"]),
    "renderToReadableStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["renderToReadableStream"]),
    "routeModule": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["routeModule"]),
    "serverHooks": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["serverHooks"]),
    "taintObjectReference": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["taintObjectReference"]),
    "tree": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["tree"]),
    "workAsyncStorage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["workAsyncStorage"]),
    "workUnitAsyncStorage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__["workUnitAsyncStorage"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$error$2d$boundary$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/client/components/error-boundary.js [app-rsc] (ecmascript, Next.js server utility)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$server$2f$app$2d$render$2f$entry$2d$base$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__utility$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/esm/server/app-render/entry-base.js [app-rsc] (ecmascript, Next.js server utility)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i('[project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/page { METADATA_0 => "[project]/app/favicon.ico.mjs { IMAGE => \\"[project]/app/favicon.ico (static in ecmascript)\\" } [app-rsc] (structured image object, ecmascript, Next.js server component)", MODULE_1 => "[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)", MODULE_2 => "[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_3 => "[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_4 => "[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_5 => "[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)" } [app-rsc] (ecmascript) <locals>');
}}),
"[project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/page { METADATA_0 => \"[project]/app/favicon.ico.mjs { IMAGE => \\\"[project]/app/favicon.ico (static in ecmascript)\\\" } [app-rsc] (structured image object, ecmascript, Next.js server component)\", MODULE_1 => \"[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_2 => \"[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_3 => \"[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_4 => \"[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)\", MODULE_5 => \"[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)\" } [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ClientPageRoot": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ClientPageRoot"]),
    "ClientSegmentRoot": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ClientSegmentRoot"]),
    "GlobalError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["GlobalError"]),
    "HTTPAccessFallbackBoundary": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["HTTPAccessFallbackBoundary"]),
    "LayoutRouter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["LayoutRouter"]),
    "MetadataBoundary": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MetadataBoundary"]),
    "OutletBoundary": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["OutletBoundary"]),
    "Postpone": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Postpone"]),
    "RenderFromTemplateContext": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["RenderFromTemplateContext"]),
    "ViewportBoundary": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ViewportBoundary"]),
    "__next_app__": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["__next_app__"]),
    "actionAsyncStorage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["actionAsyncStorage"]),
    "collectSegmentData": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["collectSegmentData"]),
    "createMetadataComponents": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["createMetadataComponents"]),
    "createPrerenderParamsForClientSegment": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["createPrerenderParamsForClientSegment"]),
    "createPrerenderSearchParamsForClientPage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["createPrerenderSearchParamsForClientPage"]),
    "createServerParamsForMetadata": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["createServerParamsForMetadata"]),
    "createServerParamsForServerSegment": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["createServerParamsForServerSegment"]),
    "createServerSearchParamsForMetadata": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["createServerSearchParamsForMetadata"]),
    "createServerSearchParamsForServerPage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["createServerSearchParamsForServerPage"]),
    "createTemporaryReferenceSet": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["createTemporaryReferenceSet"]),
    "decodeAction": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["decodeAction"]),
    "decodeFormState": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["decodeFormState"]),
    "decodeReply": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["decodeReply"]),
    "pages": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["pages"]),
    "patchFetch": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["patchFetch"]),
    "preconnect": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["preconnect"]),
    "preloadFont": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["preloadFont"]),
    "preloadStyle": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["preloadStyle"]),
    "prerender": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["prerender"]),
    "renderToReadableStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["renderToReadableStream"]),
    "routeModule": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["routeModule"]),
    "serverHooks": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["serverHooks"]),
    "taintObjectReference": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["taintObjectReference"]),
    "tree": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["tree"]),
    "workAsyncStorage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["workAsyncStorage"]),
    "workUnitAsyncStorage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["workUnitAsyncStorage"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i('[project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/page { METADATA_0 => "[project]/app/favicon.ico.mjs { IMAGE => \\"[project]/app/favicon.ico (static in ecmascript)\\" } [app-rsc] (structured image object, ecmascript, Next.js server component)", MODULE_1 => "[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)", MODULE_2 => "[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_3 => "[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_4 => "[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_5 => "[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)" } [app-rsc] (ecmascript) <module evaluation>');
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$esm$2f$build$2f$templates$2f$app$2d$page$2e$js$3f$page$3d2f$page__$7b$__METADATA_0__$3d3e$__$225b$project$5d2f$app$2f$favicon$2e$ico$2e$mjs__$7b$__IMAGE__$3d3e$__$5c225b$project$5d2f$app$2f$favicon$2e$ico__$28$static__in__ecmascript$295c22$__$7d$__$5b$app$2d$rsc$5d$__$28$structured__image__object$2c$__ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_1__$3d3e$__$225b$project$5d2f$app$2f$layout$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_2__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$not$2d$found$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_3__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$forbidden$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_4__$3d3e$__$225b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$unauthorized$2d$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$29222c$__MODULE_5__$3d3e$__$225b$project$5d2f$app$2f$page$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$2c$__Next$2e$js__server__component$2922$__$7d$__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i('[project]/node_modules/next/dist/esm/build/templates/app-page.js?page=/page { METADATA_0 => "[project]/app/favicon.ico.mjs { IMAGE => \\"[project]/app/favicon.ico (static in ecmascript)\\" } [app-rsc] (structured image object, ecmascript, Next.js server component)", MODULE_1 => "[project]/app/layout.js [app-rsc] (ecmascript, Next.js server component)", MODULE_2 => "[project]/node_modules/next/dist/client/components/not-found-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_3 => "[project]/node_modules/next/dist/client/components/forbidden-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_4 => "[project]/node_modules/next/dist/client/components/unauthorized-error.js [app-rsc] (ecmascript, Next.js server component)", MODULE_5 => "[project]/app/page.js [app-rsc] (ecmascript, Next.js server component)" } [app-rsc] (ecmascript) <exports>');
}}),

};

//# sourceMappingURL=node_modules_f5c0a40b._.js.map