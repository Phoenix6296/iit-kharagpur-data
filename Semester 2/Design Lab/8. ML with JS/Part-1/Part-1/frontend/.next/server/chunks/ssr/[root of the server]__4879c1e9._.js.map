{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/iit-kharagpur-data/Semester%202/Design%20Lab/8.%20ML%20with%20JS/Part-1/Part-1/frontend/app/page.js"],"sourcesContent":["\"use client\";\nimport KNN from \"ml-knn\";\nimport LogisticRegression from \"ml-logistic-regression\";\nimport { DecisionTreeClassifier } from \"ml-cart\";\nimport { RandomForestClassifier } from \"ml-random-forest\";\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { Matrix } from \"ml-matrix\";\n\n// Custom TF-IDF Implementation\nclass TFIDF {\n  constructor() {\n    this.documents = [];\n    this.termFreqs = [];\n    this.idfScores = {};\n  }\n\n  tokenize(text) {\n    return text.toLowerCase().match(/\\b\\w+\\b/g) || [];\n  }\n\n  computeTF(words) {\n    const tf = {};\n    words.forEach((word) => {\n      tf[word] = (tf[word] || 0) + 1;\n    });\n    const totalWords = words.length;\n    Object.keys(tf).forEach((word) => {\n      tf[word] /= totalWords;\n    });\n    return tf;\n  }\n\n  computeIDF() {\n    const totalDocs = this.documents.length;\n    const docFrequency = {};\n\n    this.documents.forEach((words) => {\n      const uniqueWords = new Set(words);\n      uniqueWords.forEach((word) => {\n        docFrequency[word] = (docFrequency[word] || 0) + 1;\n      });\n    });\n\n    Object.keys(docFrequency).forEach((word) => {\n      this.idfScores[word] = Math.log(totalDocs / (docFrequency[word] + 1));\n    });\n  }\n\n  fit(documents) {\n    this.documents = documents.map(this.tokenize);\n    this.termFreqs = this.documents.map((doc) => this.computeTF(doc));\n    this.computeIDF();\n  }\n\n  transform(text) {\n    const words = this.tokenize(text);\n    const tf = this.computeTF(words);\n    const tfidfVector = {};\n\n    Object.keys(tf).forEach((word) => {\n      if (this.idfScores[word] !== undefined) {\n        tfidfVector[word] = tf[word] * this.idfScores[word];\n      }\n    });\n\n    return Object.values(tfidfVector);\n  }\n}\n\nexport default function Home() {\n  const [file, setFile] = useState(null);\n  const [modelType, setModelType] = useState(\"knn\");\n  const [trainResult, setTrainResult] = useState(null);\n  const [evaluationMetrics, setEvaluationMetrics] = useState(null);\n  const [inputText, setInputText] = useState(\"\");\n  const [prediction, setPrediction] = useState(null);\n  const [isTraining, setIsTraining] = useState(false);\n  const [trainedModel, setTrainedModel] = useState(null);\n\n  // Convert trainLabels to a proper matrix or a plain array\n  const tfidf = new TFIDF();\n\n  const handleFileUpload = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const preprocessData = async (file) => {\n    const text = await file.text();\n\n    const result = Papa.parse(text, {\n      header: true,\n      skipEmptyLines: true,\n    });\n\n    if (!result.data || result.errors.length) {\n      alert(\"Error parsing CSV. Check file format.\");\n      return;\n    }\n\n    // Extract tweets and labels\n    const tweets = [];\n    const labels = [];\n\n    result.data.forEach((row) => {\n      const tweet = row[\"tweet\"]?.trim();\n      const label = row[\"label\"]?.trim().toLowerCase();\n\n      if (tweet && (label === \"real\" || label === \"fake\")) {\n        tweets.push(tweet);\n        labels.push(label);\n      }\n    });\n\n    if (tweets.length === 0) {\n      alert(\"No valid data found in the CSV.\");\n      return;\n    }\n\n    console.log(\"Tweets:\", tweets);\n    console.log(\"Labels:\", labels);\n\n    // Apply TF-IDF transformation\n    tfidf.fit(tweets);\n    const transformedData = tweets.map((text) => tfidf.transform(text));\n\n    // Shuffle dataset\n    const shuffledIndices = [...Array(transformedData.length).keys()].sort(\n      () => Math.random() - 0.5\n    );\n    const shuffledData = shuffledIndices.map((i) => transformedData[i]);\n    const shuffledLabels = shuffledIndices.map((i) => labels[i]);\n\n    const trainSize = Math.floor(0.7 * transformedData.length);\n    const valSize = Math.floor(0.1 * transformedData.length);\n\n    const trainData = shuffledData.slice(0, trainSize);\n    const trainLabels = shuffledLabels.slice(0, trainSize);\n\n    const testData = shuffledData.slice(trainSize + valSize);\n    const testLabels = shuffledLabels.slice(trainSize + valSize);\n\n    return { trainData, trainLabels, testData, testLabels };\n  };\n\n  const trainModel = async (event) => {\n    event.preventDefault();\n    if (!file) return;\n    setIsTraining(true);\n\n    const { trainData, trainLabels, testData, testLabels } =\n      await preprocessData(file);\n\n    // Convert trainLabels to a proper matrix or a plain array\n    const numericLabels = trainLabels.map((label) =>\n      label === \"real\" ? 1 : 0\n    );\n\n    let model;\n    switch (modelType) {\n      case \"knn\":\n        model = new KNN(trainData, numericLabels);\n        break;\n      case \"logistic_regression\":\n        model = new LogisticRegression();\n        model.train(new Matrix(trainData), numericLabels);\n        break;\n      case \"random_forest\":\n        model = new RandomForestClassifier({ nEstimators: 10 });\n        model.train(trainData, numericLabels);\n        break;\n      case \"decision_tree\":\n        model = new DecisionTreeClassifier();\n        model.train(trainData, numericLabels);\n        break;\n      default:\n        return;\n    }\n\n    // Save the trained model\n    setTrainedModel(model);\n\n    // Generate predictions on test set\n    const predictions = testData.map((sample) => model.predict(sample));\n\n    // Compute metrics\n    const tp = predictions.filter(\n      (pred, i) => pred === 1 && testLabels[i] === \"real\"\n    ).length;\n    const tn = predictions.filter(\n      (pred, i) => pred === 0 && testLabels[i] === \"fake\"\n    ).length;\n    const fp = predictions.filter(\n      (pred, i) => pred === 1 && testLabels[i] === \"fake\"\n    ).length;\n    const fn = predictions.filter(\n      (pred, i) => pred === 0 && testLabels[i] === \"real\"\n    ).length;\n\n    const accuracy = ((tp + tn) / (tp + tn + fp + fn)) * 100;\n    const precision = (tp / (tp + fp)) * 100 || 0;\n    const recall = (tp / (tp + fn)) * 100 || 0;\n    const f1Score = (2 * precision * recall) / (precision + recall) || 0;\n    const rocAuc = ((tp / (tp + fn) + tn / (tn + fp)) / 2) * 100 || 0;\n\n    setEvaluationMetrics({\n      accuracy,\n      precision,\n      recall,\n      f1Score,\n      rocAuc,\n      tp,\n      tn,\n      fp,\n      fn,\n    });\n    setTrainResult(`Model ${modelType} trained successfully!`);\n    setIsTraining(false);\n  };\n\n  // const handlePredict = () => {\n  //   if (!trainedModel || !inputText.trim()) {\n  //     alert(\"Please train a model and enter text to predict.\");\n  //     return;\n  //   }\n\n  //   try {\n  //     // Transform input text using TF-IDF\n  //     const transformedInput = tfidf.transform(inputText);\n\n  //     // Make prediction\n  //     const numericPrediction = trainedModel.predict(transformedInput);\n\n  //     // Convert numeric prediction back to label\n  //     const predictedLabel = numericPrediction === 1 ? \"real\" : \"fake\";\n\n  //     // Set prediction result\n  //     setPrediction(predictedLabel);\n  //   } catch (error) {\n  //     console.error(\"Prediction error:\", error);\n  //     alert(\n  //       \"Error making prediction. Make sure you've trained a model with valid data.\"\n  //     );\n  //   }\n  // };\n\n  return (\n    <div className=\"p-6 flex flex-col items-center\">\n      <div className=\"bg-white shadow-lg rounded-lg p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n          Train a Model\n        </h2>\n        <form className=\"space-y-4\" onSubmit={trainModel}>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFileUpload}\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 focus:ring focus:ring-blue-200 focus:outline-none\"\n          />\n          <select\n            value={modelType}\n            onChange={(e) => setModelType(e.target.value)}\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 focus:ring focus:ring-blue-200 focus:outline-none\"\n          >\n            <option value=\"knn\">KNN</option>\n            <option value=\"logistic_regression\">Logistic Regression</option>\n            <option value=\"random_forest\">Random Forest</option>\n            <option value=\"decision_tree\">Decision Tree</option>\n          </select>\n          <button\n            type=\"submit\"\n            className={`w-full rounded-lg py-2 font-semibold transition ${\n              isTraining\n                ? \"bg-gray-500 cursor-not-allowed\"\n                : \"bg-blue-600 text-white hover:bg-blue-700 cursor-pointer\"\n            }`}\n            disabled={isTraining}\n          >\n            {isTraining ? \"Training...\" : \"Train\"}\n          </button>\n        </form>\n        {trainResult && (\n          <p className=\"mt-4 text-green-600 font-semibold\">{trainResult}</p>\n        )}\n      </div>\n\n      {/* Prediction Input Box */}\n      {/* <div className=\"bg-white shadow-lg rounded-lg p-6 w-full max-w-md mt-6\">\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n          Make a Prediction\n        </h2>\n        <div className=\"space-y-4\">\n          <textarea\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            placeholder=\"Enter text to classify...\"\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 h-32 focus:ring focus:ring-blue-200 focus:outline-none\"\n          />\n          <button\n            onClick={handlePredict}\n            disabled={!trainedModel}\n            className={`w-full rounded-lg py-2 font-semibold transition ${\n              !trainedModel\n                ? \"bg-gray-500 cursor-not-allowed\"\n                : \"bg-blue-600 text-white hover:bg-blue-700 cursor-pointer\"\n            }`}\n          >\n            Predict\n          </button>\n        </div>\n        {prediction && (\n          <div className=\"mt-4\">\n            <p className=\"font-semibold text-gray-700\">Prediction Result:</p>\n            <div\n              className={`p-3 mt-2 rounded-lg font-bold text-center ${\n                prediction === \"real\"\n                  ? \"bg-green-100 text-green-800\"\n                  : \"bg-red-100 text-red-800\"\n              }`}\n            >\n              {prediction.toUpperCase()}\n            </div>\n          </div>\n        )}\n      </div> */}\n\n      {evaluationMetrics && (\n        <div className=\"bg-white shadow-lg rounded-lg p-6 w-full max-w-md mt-6\">\n          <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n            Model Evaluation Metrics\n          </h2>\n          <table className=\"w-full border-collapse border border-gray-300\">\n            <thead>\n              <tr className=\"bg-gray-200\">\n                <th className=\"border border-gray-300 p-2 text-left\">Metric</th>\n                <th className=\"border border-gray-300 p-2 text-left\">Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(evaluationMetrics).map(([key, value]) => (\n                <tr key={key} className=\"odd:bg-white even:bg-gray-100\">\n                  <td className=\"border border-gray-300 p-2\">{key}</td>\n                  <td className=\"border border-gray-300 p-2 font-semibold\">\n                    {value.toFixed(4)}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}