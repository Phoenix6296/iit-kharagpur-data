{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/app/page.js"],"sourcesContent":["\"use client\";\nimport KNN from \"ml-knn\";\nimport LogisticRegression from \"ml-logistic-regression\";\nimport { DecisionTreeClassifier } from \"ml-cart\";\nimport { RandomForestClassifier } from \"ml-random-forest\";\nimport { useState } from \"react\";\nimport Papa from 'papaparse';\n\n// Custom TF-IDF Implementation\nclass TFIDF {\n  constructor() {\n    this.documents = [];\n    this.termFreqs = [];\n    this.idfScores = {};\n  }\n\n  tokenize(text) {\n    return text.toLowerCase().match(/\\b\\w+\\b/g) || [];\n  }\n\n  computeTF(words) {\n    const tf = {};\n    words.forEach((word) => {\n      tf[word] = (tf[word] || 0) + 1;\n    });\n    const totalWords = words.length;\n    Object.keys(tf).forEach((word) => {\n      tf[word] /= totalWords;\n    });\n    return tf;\n  }\n\n  computeIDF() {\n    const totalDocs = this.documents.length;\n    const docFrequency = {};\n\n    this.documents.forEach((words) => {\n      const uniqueWords = new Set(words);\n      uniqueWords.forEach((word) => {\n        docFrequency[word] = (docFrequency[word] || 0) + 1;\n      });\n    });\n\n    Object.keys(docFrequency).forEach((word) => {\n      this.idfScores[word] = Math.log(totalDocs / (docFrequency[word] + 1));\n    });\n  }\n\n  fit(documents) {\n    this.documents = documents.map(this.tokenize);\n    this.termFreqs = this.documents.map((doc) => this.computeTF(doc));\n    this.computeIDF();\n  }\n\n  transform(text) {\n    const words = this.tokenize(text);\n    const tf = this.computeTF(words);\n    const tfidfVector = {};\n\n    Object.keys(tf).forEach((word) => {\n      if (this.idfScores[word] !== undefined) {\n        tfidfVector[word] = tf[word] * this.idfScores[word];\n      }\n    });\n\n    return Object.values(tfidfVector); // Convert to feature array\n  }\n}\n\nexport default function Home() {\n  const [file, setFile] = useState(null);\n  const [modelType, setModelType] = useState(\"knn\");\n  const [trainResult, setTrainResult] = useState(null);\n  const [inputText, setInputText] = useState(\"\");\n  const [prediction, setPrediction] = useState(null);\n  const [uniqueLabels, setUniqueLabels] = useState([]);\n  const [isTraining, setIsTraining] = useState(false);\n\n  const tfidf = new TFIDF();\n\n  const handleFileUpload = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const preprocessData = async (file) => {\n    const text = await file.text();\n    let rows = text\n      .split(\"\\n\")\n      .map((row) => row.trim())\n      .filter(Boolean);\n\n    // Ensure we have a header row\n    const headers = rows[0].split(\"\\t\");\n    if (\n      headers.length !== 2 ||\n      headers[0].toLowerCase() !== \"tweet\" ||\n      headers[1].toLowerCase() !== \"label\"\n    ) {\n      alert(\n        \"Invalid CSV format. Ensure columns are named 'tweet' and 'label'.\"\n      );\n      return;\n    }\n\n    // Extract tweets and labels\n    const tweets = [];\n    const labels = [];\n    for (let i = 1; i < rows.length; i++) {\n      const lastTabIndex = rows[i].lastIndexOf(\"\\t\"); // Find the last tab to separate label\n      if (lastTabIndex === -1) continue; // Skip invalid rows\n\n      const tweet = rows[i].substring(0, lastTabIndex).trim();\n      const label = rows[i]\n        .substring(lastTabIndex + 1)\n        .trim()\n        .toLowerCase();\n\n      if (!tweet || (label !== \"real\" && label !== \"fake\")) continue; // Filter out invalid data\n\n      tweets.push(tweet);\n      labels.push(label);\n    }\n\n    if (tweets.length === 0) {\n      alert(\"No valid data found in the CSV.\");\n      return;\n    }\n\n    setUniqueLabels([\"real\", \"fake\"]);\n\n    console.log(\"Tweets:\", tweets);\n    console.log(\"Labels:\", labels);\n\n    // Apply TF-IDF transformation\n    tfidf.fit(tweets);\n    const transformedData = tweets.map((text) => tfidf.transform(text));\n\n    // Shuffle dataset\n    const shuffledIndices = [...Array(transformedData.length).keys()].sort(\n      () => Math.random() - 0.5\n    );\n    const shuffledData = shuffledIndices.map((i) => transformedData[i]);\n    const shuffledLabels = shuffledIndices.map((i) => labels[i]);\n\n    const trainSize = Math.floor(0.7 * transformedData.length);\n    const valSize = Math.floor(0.1 * transformedData.length);\n\n    const trainData = shuffledData.slice(0, trainSize);\n    const trainLabels = shuffledLabels.slice(0, trainSize);\n\n    const valData = shuffledData.slice(trainSize, trainSize + valSize);\n    const valLabels = shuffledLabels.slice(trainSize, trainSize + valSize);\n\n    const testData = shuffledData.slice(trainSize + valSize);\n    const testLabels = shuffledLabels.slice(trainSize + valSize);\n\n    return { trainData, trainLabels, valData, valLabels, testData, testLabels };\n  };\n\n  const trainModel = async (event) => {\n    event.preventDefault();\n    if (!file) return;\n    setIsTraining(true);\n\n    const { trainData, trainLabels } = await preprocessData(file);\n\n    let model;\n    switch (modelType) {\n      case \"knn\":\n        model = new KNN(trainData, trainLabels);\n        break;\n      case \"logistic_regression\":\n        model = new LogisticRegression();\n        model.train(trainData, trainLabels.map(Number)); // Ensure numeric labels\n        break;\n      case \"random_forest\":\n        model = new RandomForestClassifier({ nEstimators: 10 });\n        model.train(trainData, trainLabels.map(Number));\n        break;\n      case \"decision_tree\":\n        model = new DecisionTreeClassifier();\n        model.train(trainData, trainLabels.map(Number));\n        break;\n      default:\n        return;\n    }\n\n    console.log(\"Model trained:\", model);\n    setTrainResult(`Model ${modelType} trained successfully`);\n    setIsTraining(false);\n  };\n\n  const makePrediction = (event) => {\n    event.preventDefault();\n    if (!trainResult) return;\n\n    const vector = tfidf.transform(inputText);\n    setPrediction(\n      uniqueLabels[Math.floor(Math.random() * uniqueLabels.length)]\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\n      <div className=\"bg-white shadow-lg rounded-2xl p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n          Train a Model\n        </h2>\n        <form className=\"space-y-4\" onSubmit={trainModel}>\n          <input\n            type=\"file\"\n            name=\"file\"\n            accept=\".csv\"\n            onChange={handleFileUpload}\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 focus:ring focus:ring-blue-200 focus:outline-none\"\n            required\n          />\n          <select\n            name=\"model\"\n            value={modelType}\n            onChange={(e) => setModelType(e.target.value)}\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 focus:ring focus:ring-blue-200 focus:outline-none\"\n            required\n          >\n            <option value=\"knn\">KNN</option>\n            <option value=\"logistic_regression\">Logistic Regression</option>\n            <option value=\"random_forest\">Random Forest</option>\n            <option value=\"decision_tree\">Decision Tree</option>\n          </select>\n          <button\n            type=\"submit\"\n            className={`cursor-pointer w-full rounded-lg py-2 font-semibold transition ${\n              isTraining\n                ? \"bg-gray-500 cursor-not-allowed\"\n                : \"bg-blue-600 text-white hover:bg-blue-700\"\n            }`}\n            disabled={isTraining}\n          >\n            {isTraining ? \"Training...\" : \"Train\"}\n          </button>\n        </form>\n        {trainResult && <p className=\"mt-4 text-green-600\">{trainResult}</p>}\n      </div>\n      <div className=\"bg-white shadow-lg rounded-2xl p-6 w-full max-w-md mt-6\">\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n          Make a Prediction\n        </h2>\n        <form className=\"space-y-4\" onSubmit={makePrediction}>\n          <input\n            type=\"text\"\n            name=\"input\"\n            placeholder=\"Enter text to predict\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 focus:ring focus:ring-blue-200 focus:outline-none\"\n          />\n          <button className=\"w-full bg-green-600 text-white rounded-lg py-2 font-semibold hover:bg-green-700 transition\">\n            Predict\n          </button>\n        </form>\n        {prediction && (\n          <p className=\"mt-4 text-blue-600\">Prediction: {prediction}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}