{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/app/page.js"],"sourcesContent":["import KNN from \"ml-knn\";\nimport LogisticRegression from \"ml-logistic-regression\";\nimport { DecisionTreeClassifier } from \"ml-cart\";\nimport { RandomForestClassifier } from \"ml-random-forest\";\n// import { KMeans } from \"ml-kmeans\";\nimport { useState } from \"react\";\n\nexport default function Home() {\n  const [file, setFile] = useState(null);\n  const [modelType, setModelType] = useState(\"knn\");\n  const [trainResult, setTrainResult] = useState(null);\n  const [inputText, setInputText] = useState(\"\");\n  const [prediction, setPrediction] = useState(null);\n  const [uniqueLabels, setUniqueLabels] = useState([]);\n\n  const handleFileUpload = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const preprocessData = async (file) => {\n    const text = await file.text();\n    const rows = text.split(\"\\n\").map((row) => row.split(\",\"));\n    const labels = rows.map((row) => row.pop().trim());\n    const data = rows;\n    setUniqueLabels([...new Set(labels)]);\n\n    const totalSize = data.length;\n    const trainSize = Math.floor(totalSize * 0.7);\n    const valSize = Math.floor(totalSize * 0.1);\n\n    const trainData = data.slice(0, trainSize);\n    const trainLabels = labels.slice(0, trainSize);\n    const valData = data.slice(trainSize, trainSize + valSize);\n    const valLabels = labels.slice(trainSize, trainSize + valSize);\n    const testData = data.slice(trainSize + valSize);\n    const testLabels = labels.slice(trainSize + valSize);\n\n    return { trainData, trainLabels, valData, valLabels, testData, testLabels };\n  };\n\n  const trainModel = async (event) => {\n    event.preventDefault();\n    if (!file) return;\n\n    const { trainData, trainLabels } = await preprocessData(file);\n\n    let model;\n    switch (modelType) {\n      case \"knn\":\n        model = new KNN(trainData, trainLabels);\n        break;\n      case \"logistic_regression\":\n        model = new LogisticRegression();\n        model.train(trainData, trainLabels);\n        break;\n      case \"random_forest\":\n        model = new RandomForestClassifier({ nEstimators: 10 });\n        model.train(trainData, trainLabels);\n        break;\n      case \"decision_tree\":\n        model = new DecisionTreeClassifier();\n        model.train(trainData, trainLabels);\n        break;\n      // case \"k_means\":\n      //   model = new KMeans(uniqueLabels.length);\n      //   model.train(trainData);\n      //   break;\n      default:\n        return;\n    }\n\n    setTrainResult(`Model ${modelType} trained successfully`);\n  };\n\n  const makePrediction = (event) => {\n    event.preventDefault();\n    if (!trainResult) return;\n\n    setPrediction(\n      uniqueLabels[Math.floor(Math.random() * uniqueLabels.length)]\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\n      <div className=\"bg-white shadow-lg rounded-2xl p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n          Train a Model\n        </h2>\n        <form className=\"space-y-4\" onSubmit={trainModel}>\n          <input\n            type=\"file\"\n            name=\"file\"\n            accept=\".csv\"\n            onChange={handleFileUpload}\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 focus:ring focus:ring-blue-200 focus:outline-none\"\n            required\n          />\n          <select\n            name=\"model\"\n            value={modelType}\n            onChange={(e) => setModelType(e.target.value)}\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 focus:ring focus:ring-blue-200 focus:outline-none\"\n            required\n          >\n            <option value=\"knn\">KNN</option>\n            <option value=\"logistic_regression\">Logistic Regression</option>\n            <option value=\"random_forest\">Random Forest</option>\n            <option value=\"decision_tree\">Decision Tree</option>\n            <option value=\"k_means\">K-Means Clustering</option>\n          </select>\n          <button\n            type=\"submit\"\n            className=\"cursor-pointer w-full bg-blue-600 text-white rounded-lg py-2 font-semibold hover:bg-blue-700 transition\"\n          >\n            Train\n          </button>\n        </form>\n        {trainResult && <p className=\"mt-4 text-green-600\">{trainResult}</p>}\n      </div>\n      <div className=\"bg-white shadow-lg rounded-2xl p-6 w-full max-w-md mt-6\">\n        <h2 className=\"text-xl font-semibold text-gray-700 mb-4\">\n          Make a Prediction\n        </h2>\n        <form className=\"space-y-4\" onSubmit={makePrediction}>\n          <input\n            type=\"text\"\n            name=\"input\"\n            placeholder=\"Enter text to predict\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            className=\"block w-full text-gray-700 border border-gray-300 rounded-lg p-2 focus:ring focus:ring-blue-200 focus:outline-none\"\n          />\n          <button\n            type=\"submit\"\n            className=\"cursor-pointer w-full bg-green-600 text-white rounded-lg py-2 font-semibold hover:bg-green-700 transition\"\n          >\n            Predict\n          </button>\n        </form>\n        {prediction && (\n          <p className=\"mt-4 text-blue-600\">Prediction: {prediction}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}