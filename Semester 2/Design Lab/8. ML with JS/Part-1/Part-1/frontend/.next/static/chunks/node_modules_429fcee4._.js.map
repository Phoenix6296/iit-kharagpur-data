{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-distance-euclidean/lib-es6/euclidean.js"],"sourcesContent":["export function squaredEuclidean(p, q) {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n        d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n}\r\nexport function euclidean(p, q) {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n}\r\n"],"names":[],"mappings":";;;;AAAO,SAAS,iBAAiB,CAAC,EAAE,CAAC;IACjC,IAAI,IAAI;IACR,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QAC/B,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IACrC;IACA,OAAO;AACX;AACO,SAAS,UAAU,CAAC,EAAE,CAAC;IAC1B,OAAO,KAAK,IAAI,CAAC,iBAAiB,GAAG;AACzC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-knn/src/KDTree.js"],"sourcesContent":["/*\n * Original code from:\n *\n * k-d Tree JavaScript - V 1.01\n *\n * https://github.com/ubilabs/kd-tree-javascript\n *\n * @author Mircea Pricop <pricop@ubilabs.net>, 2012\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n * @author Ubilabs http://ubilabs.net, 2012\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n */\n\nfunction Node(obj, dimension, parent) {\n  this.obj = obj;\n  this.left = null;\n  this.right = null;\n  this.parent = parent;\n  this.dimension = dimension;\n}\n\nexport default class KDTree {\n  constructor(points, metric) {\n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) {\n      this.dimensions = points.dimensions;\n      this.root = points;\n      restoreParent(this.root);\n    } else {\n      this.dimensions = new Array(points[0].length);\n      for (var i = 0; i < this.dimensions.length; i++) {\n        this.dimensions[i] = i;\n      }\n      this.root = buildTree(points, 0, null, this.dimensions);\n    }\n    this.metric = metric;\n  }\n\n  // Convert to a JSON serializable structure; this just requires removing\n  // the `parent` property\n  toJSON() {\n    const result = toJSONImpl(this.root, true);\n    result.dimensions = this.dimensions;\n    return result;\n  }\n\n  nearest(point, maxNodes, maxDistance) {\n    const metric = this.metric;\n    const dimensions = this.dimensions;\n    var i;\n\n    const bestNodes = new BinaryHeap(function (e) {\n      return -e[1];\n    });\n\n    function nearestSearch(node) {\n      const dimension = dimensions[node.dimension];\n      const ownDistance = metric(point, node.obj);\n      const linearPoint = {};\n      var bestChild, linearDistance, otherChild, i;\n\n      function saveNode(node, distance) {\n        bestNodes.push([node, distance]);\n        if (bestNodes.size() > maxNodes) {\n          bestNodes.pop();\n        }\n      }\n\n      for (i = 0; i < dimensions.length; i += 1) {\n        if (i === node.dimension) {\n          linearPoint[dimensions[i]] = point[dimensions[i]];\n        } else {\n          linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n        }\n      }\n\n      linearDistance = metric(linearPoint, node.obj);\n\n      if (node.right === null && node.left === null) {\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n          saveNode(node, ownDistance);\n        }\n        return;\n      }\n\n      if (node.right === null) {\n        bestChild = node.left;\n      } else if (node.left === null) {\n        bestChild = node.right;\n      } else {\n        if (point[dimension] < node.obj[dimension]) {\n          bestChild = node.left;\n        } else {\n          bestChild = node.right;\n        }\n      }\n\n      nearestSearch(bestChild);\n\n      if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n        saveNode(node, ownDistance);\n      }\n\n      if (\n        bestNodes.size() < maxNodes ||\n        Math.abs(linearDistance) < bestNodes.peek()[1]\n      ) {\n        if (bestChild === node.left) {\n          otherChild = node.right;\n        } else {\n          otherChild = node.left;\n        }\n        if (otherChild !== null) {\n          nearestSearch(otherChild);\n        }\n      }\n    }\n\n    if (maxDistance) {\n      for (i = 0; i < maxNodes; i += 1) {\n        bestNodes.push([null, maxDistance]);\n      }\n    }\n\n    if (this.root) {\n      nearestSearch(this.root);\n    }\n\n    const result = [];\n    for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n      if (bestNodes.content[i][0]) {\n        result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n      }\n    }\n    return result;\n  }\n}\n\nfunction toJSONImpl(src) {\n  const dest = new Node(src.obj, src.dimension, null);\n  if (src.left) dest.left = toJSONImpl(src.left);\n  if (src.right) dest.right = toJSONImpl(src.right);\n  return dest;\n}\n\nfunction buildTree(points, depth, parent, dimensions) {\n  const dim = depth % dimensions.length;\n\n  if (points.length === 0) {\n    return null;\n  }\n  if (points.length === 1) {\n    return new Node(points[0], dim, parent);\n  }\n\n  points.sort((a, b) => a[dimensions[dim]] - b[dimensions[dim]]);\n\n  const median = Math.floor(points.length / 2);\n  const node = new Node(points[median], dim, parent);\n  node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);\n  node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);\n\n  return node;\n}\n\nfunction restoreParent(root) {\n  if (root.left) {\n    root.left.parent = root;\n    restoreParent(root.left);\n  }\n\n  if (root.right) {\n    root.right.parent = root;\n    restoreParent(root.right);\n  }\n}\n\n// Binary heap implementation from:\n// http://eloquentjavascript.net/appendix2.html\nclass BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  }\n\n  peek() {\n    return this.content[0];\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n];\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = Math.floor((n + 1) / 2) - 1;\n      const parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to move it further.\n        break;\n      }\n    }\n  }\n\n  sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        var child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      } else {\n        // Otherwise, we are done.\n        break;\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-knn/src/index.js"],"sourcesContent":["import { euclidean as euclideanDistance } from 'ml-distance-euclidean';\n\nimport KDTree from './KDTree';\n\nexport default class KNN {\n  /**\n   * @param {Array} dataset\n   * @param {Array} labels\n   * @param {object} options\n   * @param {number} [options.k=numberOfClasses + 1] - Number of neighbors to classify.\n   * @param {function} [options.distance=euclideanDistance] - Distance function that takes two parameters.\n   */\n  constructor(dataset, labels, options = {}) {\n    if (dataset === true) {\n      const model = labels;\n      this.kdTree = new KDTree(model.kdTree, options);\n      this.k = model.k;\n      this.classes = new Set(model.classes);\n      this.isEuclidean = model.isEuclidean;\n      return;\n    }\n\n    const classes = new Set(labels);\n\n    const { distance = euclideanDistance, k = classes.size + 1 } = options;\n\n    const points = new Array(dataset.length);\n    for (var i = 0; i < points.length; ++i) {\n      points[i] = dataset[i].slice();\n    }\n\n    for (i = 0; i < labels.length; ++i) {\n      points[i].push(labels[i]);\n    }\n\n    this.kdTree = new KDTree(points, distance);\n    this.k = k;\n    this.classes = classes;\n    this.isEuclidean = distance === euclideanDistance;\n  }\n\n  /**\n   * Create a new KNN instance with the given model.\n   * @param {object} model\n   * @param {function} distance=euclideanDistance - distance function must be provided if the model wasn't trained with euclidean distance.\n   * @return {KNN}\n   */\n  static load(model, distance = euclideanDistance) {\n    if (model.name !== 'KNN') {\n      throw new Error(`invalid model: ${model.name}`);\n    }\n    if (!model.isEuclidean && distance === euclideanDistance) {\n      throw new Error(\n        'a custom distance function was used to create the model. Please provide it again'\n      );\n    }\n    if (model.isEuclidean && distance !== euclideanDistance) {\n      throw new Error(\n        'the model was created with the default distance function. Do not load it with another one'\n      );\n    }\n    return new KNN(true, model, distance);\n  }\n\n  /**\n   * Return a JSON containing the kd-tree model.\n   * @return {object} JSON KNN model.\n   */\n  toJSON() {\n    return {\n      name: 'KNN',\n      kdTree: this.kdTree,\n      k: this.k,\n      classes: Array.from(this.classes),\n      isEuclidean: this.isEuclidean\n    };\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Array} dataset\n   * @return {Array} predictions\n   */\n  predict(dataset) {\n    if (Array.isArray(dataset)) {\n      if (typeof dataset[0] === 'number') {\n        return getSinglePrediction(this, dataset);\n      } else if (\n        Array.isArray(dataset[0]) &&\n        typeof dataset[0][0] === 'number'\n      ) {\n        const predictions = new Array(dataset.length);\n        for (var i = 0; i < dataset.length; i++) {\n          predictions[i] = getSinglePrediction(this, dataset[i]);\n        }\n        return predictions;\n      }\n    }\n    throw new TypeError('dataset to predict must be an array or a matrix');\n  }\n}\n\nfunction getSinglePrediction(knn, currentCase) {\n  var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);\n  var pointsPerClass = {};\n  var predictedClass = -1;\n  var maxPoints = -1;\n  var lastElement = nearestPoints[0][0].length - 1;\n\n  for (var element of knn.classes) {\n    pointsPerClass[element] = 0;\n  }\n\n  for (var i = 0; i < nearestPoints.length; ++i) {\n    var currentClass = nearestPoints[i][0][lastElement];\n    var currentPoints = ++pointsPerClass[currentClass];\n    if (currentPoints > maxPoints) {\n      predictedClass = currentClass;\n      maxPoints = currentPoints;\n    }\n  }\n\n  return predictedClass;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,6DAA6D;;;;AAC7D,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAoBrC,SAAU,UAAU,CAAC,KAAc;IACvC,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACxD,CAAC","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-max/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,IAAI,KAAK;IAChB,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAEnF,IAAI,CAAC,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,qBAAqB,QAAQ,SAAS,EACtC,YAAY,uBAAuB,KAAK,IAAI,IAAI,oBAChD,mBAAmB,QAAQ,OAAO,EAClC,UAAU,qBAAqB,KAAK,IAAI,MAAM,MAAM,GAAG;IAE3D,IAAI,YAAY,KAAK,aAAa,MAAM,MAAM,IAAI,CAAC,OAAO,SAAS,CAAC,YAAY;QAC9E,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,WAAW,aAAa,UAAU,MAAM,MAAM,IAAI,CAAC,OAAO,SAAS,CAAC,UAAU;QAChF,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,WAAW,KAAK,CAAC,UAAU;IAE/B,IAAK,IAAI,IAAI,YAAY,GAAG,IAAI,SAAS,IAAK;QAC5C,IAAI,KAAK,CAAC,EAAE,GAAG,UAAU,WAAW,KAAK,CAAC,EAAE;IAC9C;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-min/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,IAAI,KAAK;IAChB,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAEnF,IAAI,CAAC,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,qBAAqB,QAAQ,SAAS,EACtC,YAAY,uBAAuB,KAAK,IAAI,IAAI,oBAChD,mBAAmB,QAAQ,OAAO,EAClC,UAAU,qBAAqB,KAAK,IAAI,MAAM,MAAM,GAAG;IAE3D,IAAI,YAAY,KAAK,aAAa,MAAM,MAAM,IAAI,CAAC,OAAO,SAAS,CAAC,YAAY;QAC9E,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,WAAW,aAAa,UAAU,MAAM,MAAM,IAAI,CAAC,OAAO,SAAS,CAAC,UAAU;QAChF,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,WAAW,KAAK,CAAC,UAAU;IAE/B,IAAK,IAAI,IAAI,YAAY,GAAG,IAAI,SAAS,IAAK;QAC5C,IAAI,KAAK,CAAC,EAAE,GAAG,UAAU,WAAW,KAAK,CAAC,EAAE;IAC9C;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-rescale/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,SAAS,QAAQ,KAAK;IACpB,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC;IAEnF,IAAI,CAAC,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB,OAAO,IAAI,MAAM,MAAM,KAAK,GAAG;QAC7B,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI;IAEJ,IAAI,QAAQ,MAAM,KAAK,WAAW;QAChC,IAAI,CAAC,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ,MAAM,GAAG;YAC/B,MAAM,IAAI,UAAU;QACtB;QAEA,SAAS,QAAQ,MAAM;IACzB,OAAO;QACL,SAAS,IAAI,MAAM,MAAM,MAAM;IACjC;IAEA,IAAI,aAAa,CAAA,GAAA,4JAAA,CAAA,UAAG,AAAD,EAAE;IACrB,IAAI,aAAa,CAAA,GAAA,4JAAA,CAAA,UAAG,AAAD,EAAE;IAErB,IAAI,eAAe,YAAY;QAC7B,MAAM,IAAI,WAAW;IACvB;IAEA,IAAI,eAAe,QAAQ,GAAG,EAC1B,WAAW,iBAAiB,KAAK,IAAI,QAAQ,UAAU,GAAG,aAAa,IAAI,cAC3E,eAAe,QAAQ,GAAG,EAC1B,WAAW,iBAAiB,KAAK,IAAI,QAAQ,UAAU,GAAG,aAAa,IAAI;IAE/E,IAAI,YAAY,UAAU;QACxB,MAAM,IAAI,WAAW;IACvB;IAEA,IAAI,SAAS,CAAC,WAAW,QAAQ,IAAI,CAAC,aAAa,UAAU;IAE7D,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,MAAM,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,UAAU,IAAI,SAAS;IACjD;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-logistic-regression/src/logreg_2classes.js"],"sourcesContent":["import Matrix from 'ml-matrix';\n\nexport default class LogisticRegressionTwoClasses {\n  constructor(options = {}) {\n    const { numSteps = 50000, learningRate = 5e-4, weights = null } = options;\n    this.numSteps = numSteps;\n    this.learningRate = learningRate;\n    this.weights = weights ? Matrix.checkMatrix(weights) : null;\n  }\n\n  train(features, target) {\n    let weights = Matrix.zeros(1, features.columns);\n\n    for (let step = 0; step < this.numSteps; step++) {\n      const scores = features.mmul(weights.transpose());\n      const predictions = sigmoid(scores);\n\n      // Update weights with gradient\n      const outputErrorSignal = Matrix.columnVector(predictions)\n        .neg()\n        .add(target);\n      const gradient = features.transpose().mmul(outputErrorSignal);\n      weights = weights.add(gradient.mul(this.learningRate).transpose());\n    }\n\n    this.weights = weights;\n  }\n\n  testScores(features) {\n    const finalData = features.mmul(this.weights.transpose());\n    return sigmoid(finalData);\n  }\n\n  predict(features) {\n    const finalData = features.mmul(this.weights.transpose());\n    return sigmoid(finalData).map(Math.round);\n  }\n\n  static load(model) {\n    return new LogisticRegressionTwoClasses(model);\n  }\n\n  toJSON() {\n    return {\n      numSteps: this.numSteps,\n      learningRate: this.learningRate,\n      weights: this.weights,\n    };\n  }\n}\n\nfunction sigmoid(scores) {\n  scores = scores.to1DArray();\n  let result = [];\n  for (let i = 0; i < scores.length; i++) {\n    result.push(1 / (1 + Math.exp(-scores[i])));\n  }\n  return result;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEe,MAAM;IACnB,YAAY,UAAU,CAAC,CAAC,CAAE;QACxB,MAAM,EAAE,WAAW,KAAK,EAAE,eAAe,IAAI,EAAE,UAAU,IAAI,EAAE,GAAG;QAClE,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,OAAO,GAAG,UAAU,0IAAA,CAAA,UAAM,CAAC,WAAW,CAAC,WAAW;IACzD;IAEA,MAAM,QAAQ,EAAE,MAAM,EAAE;QACtB,IAAI,UAAU,0IAAA,CAAA,UAAM,CAAC,KAAK,CAAC,GAAG,SAAS,OAAO;QAE9C,IAAK,IAAI,OAAO,GAAG,OAAO,IAAI,CAAC,QAAQ,EAAE,OAAQ;YAC/C,MAAM,SAAS,SAAS,IAAI,CAAC,QAAQ,SAAS;YAC9C,MAAM,cAAc,QAAQ;YAE5B,+BAA+B;YAC/B,MAAM,oBAAoB,0IAAA,CAAA,UAAM,CAAC,YAAY,CAAC,aAC3C,GAAG,GACH,GAAG,CAAC;YACP,MAAM,WAAW,SAAS,SAAS,GAAG,IAAI,CAAC;YAC3C,UAAU,QAAQ,GAAG,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS;QACjE;QAEA,IAAI,CAAC,OAAO,GAAG;IACjB;IAEA,WAAW,QAAQ,EAAE;QACnB,MAAM,YAAY,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;QACtD,OAAO,QAAQ;IACjB;IAEA,QAAQ,QAAQ,EAAE;QAChB,MAAM,YAAY,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;QACtD,OAAO,QAAQ,WAAW,GAAG,CAAC,KAAK,KAAK;IAC1C;IAEA,OAAO,KAAK,KAAK,EAAE;QACjB,OAAO,IAAI,6BAA6B;IAC1C;IAEA,SAAS;QACP,OAAO;YACL,UAAU,IAAI,CAAC,QAAQ;YACvB,cAAc,IAAI,CAAC,YAAY;YAC/B,SAAS,IAAI,CAAC,OAAO;QACvB;IACF;AACF;AAEA,SAAS,QAAQ,MAAM;IACrB,SAAS,OAAO,SAAS;IACzB,IAAI,SAAS,EAAE;IACf,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC;IAC3C;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-logistic-regression/src/logreg.js"],"sourcesContent":["import Matrix from 'ml-matrix';\n\nimport LogisticRegressionTwoClasses from './logreg_2classes.js';\n\nfunction transformClassesForOneVsAll(Y, oneClass) {\n  let y = Y.to1DArray();\n  for (let i = 0; i < y.length; i++) {\n    if (y[i] === oneClass) {\n      y[i] = 0;\n    } else {\n      y[i] = 1;\n    }\n  }\n  return Matrix.columnVector(y);\n}\n\nexport default class LogisticRegression {\n  constructor(options = {}) {\n    const {\n      numSteps = 50000,\n      learningRate = 5e-4,\n      classifiers = [],\n      numberClasses = 0,\n    } = options;\n    this.numSteps = numSteps;\n    this.learningRate = learningRate;\n    this.classifiers = classifiers;\n    this.numberClasses = numberClasses;\n  }\n\n  train(X, Y) {\n    this.numberClasses = new Set(Y.to1DArray()).size;\n    this.classifiers = new Array(this.numberClasses);\n\n    // train the classifiers\n    for (let i = 0; i < this.numberClasses; i++) {\n      this.classifiers[i] = new LogisticRegressionTwoClasses({\n        numSteps: this.numSteps,\n        learningRate: this.learningRate,\n      });\n      let y = Y.clone();\n      y = transformClassesForOneVsAll(y, i);\n      this.classifiers[i].train(X, y);\n    }\n  }\n\n  predict(Xtest) {\n    let resultsOneClass = new Array(this.numberClasses).fill(0);\n    let i;\n    for (i = 0; i < this.numberClasses; i++) {\n      resultsOneClass[i] = this.classifiers[i].testScores(Xtest);\n    }\n    let finalResults = new Array(Xtest.rows).fill(0);\n    for (i = 0; i < Xtest.rows; i++) {\n      let minimum = 100000;\n      for (let j = 0; j < this.numberClasses; j++) {\n        if (resultsOneClass[j][i] < minimum) {\n          minimum = resultsOneClass[j][i];\n          finalResults[i] = j;\n        }\n      }\n    }\n    return finalResults;\n  }\n\n  static load(model) {\n    if (model.name !== 'LogisticRegression') {\n      throw new Error(`invalid model: ${model.name}`);\n    }\n    const newClassifier = new LogisticRegression(model);\n    for (let i = 0; i < newClassifier.numberClasses; i++) {\n      newClassifier.classifiers[i] = LogisticRegressionTwoClasses.load(\n        model.classifiers[i],\n      );\n    }\n    return newClassifier;\n  }\n\n  toJSON() {\n    return {\n      name: 'LogisticRegression',\n      numSteps: this.numSteps,\n      learningRate: this.learningRate,\n      numberClasses: this.numberClasses,\n      classifiers: this.classifiers,\n    };\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,SAAS,4BAA4B,CAAC,EAAE,QAAQ;IAC9C,IAAI,IAAI,EAAE,SAAS;IACnB,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QACjC,IAAI,CAAC,CAAC,EAAE,KAAK,UAAU;YACrB,CAAC,CAAC,EAAE,GAAG;QACT,OAAO;YACL,CAAC,CAAC,EAAE,GAAG;QACT;IACF;IACA,OAAO,0IAAA,CAAA,UAAM,CAAC,YAAY,CAAC;AAC7B;AAEe,MAAM;IACnB,YAAY,UAAU,CAAC,CAAC,CAAE;QACxB,MAAM,EACJ,WAAW,KAAK,EAChB,eAAe,IAAI,EACnB,cAAc,EAAE,EAChB,gBAAgB,CAAC,EAClB,GAAG;QACJ,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,aAAa,GAAG;IACvB;IAEA,MAAM,CAAC,EAAE,CAAC,EAAE;QACV,IAAI,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,SAAS,IAAI,IAAI;QAChD,IAAI,CAAC,WAAW,GAAG,IAAI,MAAM,IAAI,CAAC,aAAa;QAE/C,wBAAwB;QACxB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,IAAK;YAC3C,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,IAAI,yKAAA,CAAA,UAA4B,CAAC;gBACrD,UAAU,IAAI,CAAC,QAAQ;gBACvB,cAAc,IAAI,CAAC,YAAY;YACjC;YACA,IAAI,IAAI,EAAE,KAAK;YACf,IAAI,4BAA4B,GAAG;YACnC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG;QAC/B;IACF;IAEA,QAAQ,KAAK,EAAE;QACb,IAAI,kBAAkB,IAAI,MAAM,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC;QACzD,IAAI;QACJ,IAAK,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,IAAK;YACvC,eAAe,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,CAAC;QACtD;QACA,IAAI,eAAe,IAAI,MAAM,MAAM,IAAI,EAAE,IAAI,CAAC;QAC9C,IAAK,IAAI,GAAG,IAAI,MAAM,IAAI,EAAE,IAAK;YAC/B,IAAI,UAAU;YACd,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,IAAK;gBAC3C,IAAI,eAAe,CAAC,EAAE,CAAC,EAAE,GAAG,SAAS;oBACnC,UAAU,eAAe,CAAC,EAAE,CAAC,EAAE;oBAC/B,YAAY,CAAC,EAAE,GAAG;gBACpB;YACF;QACF;QACA,OAAO;IACT;IAEA,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,sBAAsB;YACvC,MAAM,IAAI,MAAM,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;QAChD;QACA,MAAM,gBAAgB,IAAI,mBAAmB;QAC7C,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,aAAa,EAAE,IAAK;YACpD,cAAc,WAAW,CAAC,EAAE,GAAG,yKAAA,CAAA,UAA4B,CAAC,IAAI,CAC9D,MAAM,WAAW,CAAC,EAAE;QAExB;QACA,OAAO;IACT;IAEA,SAAS;QACP,OAAO;YACL,MAAM;YACN,UAAU,IAAI,CAAC,QAAQ;YACvB,cAAc,IAAI,CAAC,YAAY;YAC/B,eAAe,IAAI,CAAC,aAAa;YACjC,aAAa,IAAI,CAAC,WAAW;QAC/B;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 663, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-sum/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction sum(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += input[i];\n  }\n\n  return sumValue;\n}\n\nexport { sum as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,IAAI,KAAK;IAChB,IAAI,CAAC,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,WAAW;IAEf,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,YAAY,KAAK,CAAC,EAAE;IACtB;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 688, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-mean/lib-es6/index.js"],"sourcesContent":["import sum from 'ml-array-sum';\n\nfunction mean(input) {\n  return sum(input) / input.length;\n}\n\nexport { mean as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,KAAK,KAAK;IACjB,OAAO,CAAA,GAAA,4JAAA,CAAA,UAAG,AAAD,EAAE,SAAS,MAAM,MAAM;AAClC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 703, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-cart/src/utils.js"],"sourcesContent":["import meanArray from 'ml-array-mean';\nimport { Matrix } from 'ml-matrix';\n\n/**\n * @private\n * return an array of probabilities of each class\n * @param {Array} array - contains the classes\n * @param {number} numberOfClasses\n * @return {Matrix} - rowVector of probabilities.\n */\nexport function toDiscreteDistribution(array, numberOfClasses) {\n  let counts = new Array(numberOfClasses).fill(0);\n  for (let i = 0; i < array.length; ++i) {\n    counts[array[i]] += 1 / array.length;\n  }\n\n  return Matrix.rowVector(counts);\n}\n\n/**\n * @private\n * Retrieves the impurity of array of predictions\n * @param {Array} array - predictions.\n * @return {number} Gini impurity\n */\nexport function giniImpurity(array) {\n  if (array.length === 0) {\n    return 0;\n  }\n\n  let probabilities = toDiscreteDistribution(\n    array,\n    getNumberOfClasses(array),\n  ).getRow(0);\n\n  let sum = 0.0;\n  for (let i = 0; i < probabilities.length; ++i) {\n    sum += probabilities[i] * probabilities[i];\n  }\n\n  return 1 - sum;\n}\n\n/**\n * @private\n * Return the number of classes given the array of predictions.\n * @param {Array} array - predictions.\n * @return {number} Number of classes.\n */\nexport function getNumberOfClasses(array) {\n  return array\n    .filter((val, i, arr) => {\n      return arr.indexOf(val) === i;\n    })\n    .map((val) => val + 1)\n    .reduce((a, b) => Math.max(a, b));\n}\n\n/**\n * @private\n * Calculates the Gini Gain of an array of predictions and those predictions splitted by a feature.\n * @param {Array} array - Predictions\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - Gini Gain.\n */\n\nexport function giniGain(array, splitted) {\n  let splitsImpurity = 0.0;\n  let splits = ['greater', 'lesser'];\n\n  for (let i = 0; i < splits.length; ++i) {\n    let currentSplit = splitted[splits[i]];\n    splitsImpurity +=\n      (giniImpurity(currentSplit) * currentSplit.length) / array.length;\n  }\n\n  return giniImpurity(array) - splitsImpurity;\n}\n\n/**\n * @private\n * Calculates the squared error of a predictions values.\n * @param {Array} array - predictions values\n * @return {number} squared error.\n */\nexport function squaredError(array) {\n  let l = array.length;\n  if (l === 0) {\n    return 0.0;\n  }\n\n  let m = meanArray(array);\n  let error = 0.0;\n\n  for (let i = 0; i < l; ++i) {\n    let currentElement = array[i];\n    error += (currentElement - m) * (currentElement - m);\n  }\n\n  return error;\n}\n\n/**\n * @private\n * Calculates the sum of squared error of the two arrays that contains the splitted values.\n * @param {Array} array - this argument is no necessary but is used to fit with the main interface.\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - sum of squared errors.\n */\nexport function regressionError(array, splitted) {\n  let error = 0.0;\n  let splits = ['greater', 'lesser'];\n\n  for (let i = 0; i < splits.length; ++i) {\n    let currentSplit = splitted[splits[i]];\n    error += squaredError(currentSplit);\n  }\n  return error;\n}\n\n/**\n * @private\n * Split the training set and values from a given column of the training set if is less than a value\n * @param {Matrix} X - Training set.\n * @param {Array} y - Training values.\n * @param {number} column - Column to split.\n * @param {number} value - value to split the Training set and values.\n * @return {object} - Object that contains the splitted values.\n */\nexport function matrixSplitter(X, y, column, value) {\n  let lesserX = [];\n  let greaterX = [];\n  let lesserY = [];\n  let greaterY = [];\n\n  for (let i = 0; i < X.rows; ++i) {\n    if (X.get(i, column) < value) {\n      lesserX.push(X.getRow(i));\n      lesserY.push(y[i]);\n    } else {\n      greaterX.push(X.getRow(i));\n      greaterY.push(y[i]);\n    }\n  }\n\n  return {\n    greaterX: greaterX,\n    greaterY: greaterY,\n    lesserX: lesserX,\n    lesserY: lesserY,\n  };\n}\n\n/**\n * @private\n * Calculates the mean between two values\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nexport function mean(a, b) {\n  return (a + b) / 2;\n}\n\n/**\n * @private\n * Returns a list of tuples that contains the i-th element of each array.\n * @param {Array} a\n * @param {Array} b\n * @return {Array} list of tuples.\n */\nexport function zip(a, b) {\n  if (a.length !== b.length) {\n    throw new TypeError(\n      `Error on zip: the size of a: ${a.length} is different from b: ${b.length}`,\n    );\n  }\n\n  let ret = new Array(a.length);\n  for (let i = 0; i < a.length; ++i) {\n    ret[i] = [a[i], b[i]];\n  }\n\n  return ret;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-cart/src/TreeNode.js"],"sourcesContent":["import mean from 'ml-array-mean';\nimport { Matrix } from 'ml-matrix';\n\nimport * as Utils from './utils';\n\nconst gainFunctions = {\n  gini: Utils.giniGain,\n  regression: Utils.regressionError,\n};\n\nconst splitFunctions = {\n  mean: Utils.mean,\n};\n\nexport default class TreeNode {\n  /**\n   * @private\n   * Constructor for a tree node given the options received on the main classes (DecisionTreeClassifier, DecisionTreeRegression)\n   * @param {object|TreeNode} options for loading\n   * @constructor\n   */\n  constructor(options) {\n    // options parameters\n    this.kind = options.kind;\n    this.gainFunction = options.gainFunction;\n    this.splitFunction = options.splitFunction;\n    this.minNumSamples = options.minNumSamples;\n    this.maxDepth = options.maxDepth;\n  this.gainThreshold = options.gainThreshold || 0;\n  }\n\n  /**\n   * @private\n   * Function that retrieve the best feature to make the split.\n   * @param {Matrix} XTranspose - Training set transposed\n   * @param {Array} y - labels or values (depending of the decision tree)\n   * @return {object} - return tree values, the best gain, column and the split value.\n   */\n  bestSplit(XTranspose, y) {\n    // Depending in the node tree class, we set the variables to check information gain (to classify)\n    // or error (for regression)\n\n    let bestGain = this.kind === 'classifier' ? -Infinity : Infinity;\n    let check = this.kind === 'classifier' ? (a, b) => a > b : (a, b) => a < b;\n\n    let maxColumn;\n    let maxValue;\n    let numberSamples;\n\n    for (let i = 0; i < XTranspose.rows; ++i) {\n      let currentFeature = XTranspose.getRow(i);\n      let splitValues = this.featureSplit(currentFeature, y);\n      for (let j = 0; j < splitValues.length; ++j) {\n        let currentSplitVal = splitValues[j];\n        let splitted = this.split(currentFeature, y, currentSplitVal);\n\n        let gain = gainFunctions[this.gainFunction](y, splitted);\n        if (check(gain, bestGain)) {\n          maxColumn = i;\n          maxValue = currentSplitVal;\n          bestGain = gain;\n          numberSamples = currentFeature.length;\n        }\n      }\n    }\n\n    return {\n      maxGain: bestGain,\n      maxColumn: maxColumn,\n      maxValue: maxValue,\n      numberSamples: numberSamples,\n    };\n  }\n\n  /**\n   * @private\n   * Makes the split of the training labels or values from the training set feature given a split value.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @param {number} splitValue\n   * @return {object}\n   */\n  split(x, y, splitValue) {\n    let lesser = [];\n    let greater = [];\n\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] < splitValue) {\n        lesser.push(y[i]);\n      } else {\n        greater.push(y[i]);\n      }\n    }\n\n    return {\n      greater: greater,\n      lesser: lesser,\n    };\n  }\n\n  /**\n   * @private\n   * Calculates the possible points to split over the tree given a training set feature and corresponding labels or values.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @return {Array} possible split values.\n   */\n  featureSplit(x, y) {\n    let splitValues = [];\n    let arr = Utils.zip(x, y);\n    arr.sort((a, b) => {\n      return a[0] - b[0];\n    });\n\n    for (let i = 1; i < arr.length; ++i) {\n      if (arr[i - 1][1] !== arr[i][1]) {\n        splitValues.push(\n          splitFunctions[this.splitFunction](arr[i - 1][0], arr[i][0]),\n        );\n      }\n    }\n\n    return splitValues;\n  }\n\n  /**\n   * @private\n   * Calculate the predictions of a leaf tree node given the training labels or values\n   * @param {Array} y\n   */\n  calculatePrediction(y) {\n    if (this.kind === 'classifier') {\n      this.distribution = Utils.toDiscreteDistribution(\n        y,\n        Utils.getNumberOfClasses(y),\n      );\n      if (this.distribution.columns === 0) {\n        throw new TypeError('Error on calculate the prediction');\n      }\n    } else {\n      this.distribution = mean(y);\n    }\n  }\n\n  /**\n   * @private\n   * Train a node given the training set and labels, because it trains recursively, it also receive\n   * the current depth of the node, parent gain to avoid infinite recursion and boolean value to check if\n   * the training set is transposed.\n   * @param {Matrix} X - Training set (could be transposed or not given transposed).\n   * @param {Array} y - Training labels or values.\n   * @param {number} currentDepth - Current depth of the node.\n   * @param {number} parentGain - parent node gain or error.\n   */\n  train(X, y, currentDepth, parentGain) {\n    if (X.rows <= this.minNumSamples) {\n      this.calculatePrediction(y);\n      return;\n    }\n    if (parentGain === undefined) parentGain = 0.0;\n\n    let XTranspose = X.transpose();\n    let split = this.bestSplit(XTranspose, y);\n\n    this.splitValue = split.maxValue;\n    this.splitColumn = split.maxColumn;\n    this.gain = split.maxGain;\n    this.numberSamples = split.numberSamples;\n\n    let splittedMatrix = Utils.matrixSplitter(\n      X,\n      y,\n      this.splitColumn,\n      this.splitValue,\n    );\n\n    if (\n      currentDepth < this.maxDepth &&\n      this.gain > this.gainThreshold &&\n      this.gain !== parentGain &&\n      splittedMatrix.lesserX.length > 0 &&\n      splittedMatrix.greaterX.length > 0\n    ) {\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      let lesserX = new Matrix(splittedMatrix.lesserX);\n      let greaterX = new Matrix(splittedMatrix.greaterX);\n\n      this.left.train(\n        lesserX,\n        splittedMatrix.lesserY,\n        currentDepth + 1,\n        this.gain,\n      );\n      this.right.train(\n        greaterX,\n        splittedMatrix.greaterY,\n        currentDepth + 1,\n        this.gain,\n      );\n    } else {\n      this.calculatePrediction(y);\n    }\n  }\n\n  /**\n   * @private\n   * Calculates the prediction of a given element.\n   * @param {Array} row\n   * @return {number|Array} prediction\n   *          * if a node is a classifier returns an array of probabilities of each class.\n   *          * if a node is for regression returns a number with the prediction.\n   */\n  classify(row) {\n    if (this.right && this.left) {\n      if (row[this.splitColumn] < this.splitValue) {\n        return this.left.classify(row);\n      } else {\n        return this.right.classify(row);\n      }\n    }\n\n    return this.distribution;\n  }\n\n  /**\n   * @private\n   * Set the parameter of the current node and their children.\n   * @param {object} node - parameters of the current node and the children.\n   */\n  setNodeParameters(node) {\n    if (node.distribution !== undefined) {\n      this.distribution =\n        node.distribution.constructor === Array\n          ? new Matrix(node.distribution)\n          : node.distribution;\n    } else {\n      this.distribution = undefined;\n      this.splitValue = node.splitValue;\n      this.splitColumn = node.splitColumn;\n      this.gain = node.gain;\n\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      if (node.left !== {}) {\n        this.left.setNodeParameters(node.left);\n      }\n      if (node.right !== {}) {\n        this.right.setNodeParameters(node.right);\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1022, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-cart/src/DecisionTreeClassifier.js"],"sourcesContent":["import { Matrix } from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'gini',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity,\n  gainThreshold: 0.01,\n};\n\nexport class DecisionTreeClassifier {\n  /**\n   * Create new Decision Tree Classifier with CART implementation with the given options\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"gini\"] - gain function to get the best split, \"gini\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   * @constructor\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'classifier';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    this.root = new Tree(this.options);\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    this.root.train(trainingSet, trainingLabels, 0, null);\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    toPredict = Matrix.checkMatrix(toPredict);\n    let predictions = new Array(toPredict.rows);\n\n    for (let i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root\n        .classify(toPredict.getRow(i))\n        .maxRowIndex(0)[1];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTClassifier',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {DecisionTreeClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'DTClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new DecisionTreeClassifier(true, model);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,iBAAiB;IACrB,cAAc;IACd,eAAe;IACf,eAAe;IACf,UAAU;IACV,eAAe;AACjB;AAEO,MAAM;IACX;;;;;;;;;GASC,GACD,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,IAAI,YAAY,MAAM;YACpB,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;YAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,gJAAA,CAAA,UAAI,CAAC,MAAM,OAAO;YAClC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI;QACxC,OAAO;YACL,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB;YACjD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG;QACtB;IACF;IAEA;;;;GAIC,GACD,MAAM,WAAW,EAAE,cAAc,EAAE;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,gJAAA,CAAA,UAAI,CAAC,IAAI,CAAC,OAAO;QACjC,cAAc,0IAAA,CAAA,SAAM,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,gBAAgB,GAAG;IAClD;IAEA;;;;GAIC,GACD,QAAQ,SAAS,EAAE;QACjB,YAAY,0IAAA,CAAA,SAAM,CAAC,WAAW,CAAC;QAC/B,IAAI,cAAc,IAAI,MAAM,UAAU,IAAI;QAE1C,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAI,EAAE,EAAE,EAAG;YACvC,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CACvB,QAAQ,CAAC,UAAU,MAAM,CAAC,IAC1B,WAAW,CAAC,EAAE,CAAC,EAAE;QACtB;QAEA,OAAO;IACT;IAEA;;;GAGC,GACD,SAAS;QACP,OAAO;YACL,SAAS,IAAI,CAAC,OAAO;YACrB,MAAM,IAAI,CAAC,IAAI;YACf,MAAM;QACR;IACF;IAEA;;;;GAIC,GACD,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,MAAM,IAAI,WAAW,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;QACrD;QAEA,OAAO,IAAI,uBAAuB,MAAM;IAC1C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1104, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-cart/src/DecisionTreeRegression.js"],"sourcesContent":["import { Matrix } from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'regression',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity,\n};\n\nexport class DecisionTreeRegression {\n  /**\n   * Create new Decision Tree Regression with CART implementation with the given options.\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"regression\"] - gain function to get the best split, \"regression\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'regression';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and values.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    this.root = new Tree(this.options);\n\n    if (\n      typeof trainingSet[0] !== 'undefined' &&\n      trainingSet[0].length === undefined\n    ) {\n      trainingSet = Matrix.columnVector(trainingSet);\n    } else {\n      trainingSet = Matrix.checkMatrix(trainingSet);\n    }\n    this.root.train(trainingSet, trainingValues, 0);\n  }\n\n  /**\n   * Predicts the values given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    if (\n      typeof toPredict[0] !== 'undefined' &&\n      toPredict[0].length === undefined\n    ) {\n      toPredict = Matrix.columnVector(toPredict);\n    }\n    toPredict = Matrix.checkMatrix(toPredict);\n\n    let predictions = new Array(toPredict.rows);\n    for (let i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root.classify(toPredict.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTRegression',\n    };\n  }\n\n  /**\n   * Load a Decision tree regression with the given model.\n   * @param {object} model\n   * @return {DecisionTreeRegression}\n   */\n  static load(model) {\n    if (model.name !== 'DTRegression') {\n      throw new RangeError(`Invalid model:${model.name}`);\n    }\n\n    return new DecisionTreeRegression(true, model);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,iBAAiB;IACrB,cAAc;IACd,eAAe;IACf,eAAe;IACf,UAAU;AACZ;AAEO,MAAM;IACX;;;;;;;;GAQC,GACD,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,IAAI,YAAY,MAAM;YACpB,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;YAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,gJAAA,CAAA,UAAI,CAAC,MAAM,OAAO;YAClC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI;QACxC,OAAO;YACL,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB;YACjD,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG;QACtB;IACF;IAEA;;;;GAIC,GACD,MAAM,WAAW,EAAE,cAAc,EAAE;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,gJAAA,CAAA,UAAI,CAAC,IAAI,CAAC,OAAO;QAEjC,IACE,OAAO,WAAW,CAAC,EAAE,KAAK,eAC1B,WAAW,CAAC,EAAE,CAAC,MAAM,KAAK,WAC1B;YACA,cAAc,0IAAA,CAAA,SAAM,CAAC,YAAY,CAAC;QACpC,OAAO;YACL,cAAc,0IAAA,CAAA,SAAM,CAAC,WAAW,CAAC;QACnC;QACA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,gBAAgB;IAC/C;IAEA;;;;GAIC,GACD,QAAQ,SAAS,EAAE;QACjB,IACE,OAAO,SAAS,CAAC,EAAE,KAAK,eACxB,SAAS,CAAC,EAAE,CAAC,MAAM,KAAK,WACxB;YACA,YAAY,0IAAA,CAAA,SAAM,CAAC,YAAY,CAAC;QAClC;QACA,YAAY,0IAAA,CAAA,SAAM,CAAC,WAAW,CAAC;QAE/B,IAAI,cAAc,IAAI,MAAM,UAAU,IAAI;QAC1C,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAI,EAAE,EAAE,EAAG;YACvC,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,MAAM,CAAC;QACvD;QAEA,OAAO;IACT;IAEA;;;GAGC,GACD,SAAS;QACP,OAAO;YACL,SAAS,IAAI,CAAC,OAAO;YACrB,MAAM,IAAI,CAAC,IAAI;YACf,MAAM;QACR;IACF;IAEA;;;;GAIC,GACD,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,MAAM,IAAI,WAAW,CAAC,cAAc,EAAE,MAAM,IAAI,EAAE;QACpD;QAEA,OAAO,IAAI,uBAAuB,MAAM;IAC1C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1210, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-mode/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction mode(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = 0;\n  var maxCount = 0;\n  var count = 0;\n  var counts = {};\n\n  for (var i = 0; i < input.length; ++i) {\n    var element = input[i];\n    count = counts[element];\n\n    if (count) {\n      counts[element]++;\n      count++;\n    } else {\n      counts[element] = count = 1;\n    }\n\n    if (count > maxCount) {\n      maxCount = count;\n      maxValue = input[i];\n    }\n  }\n\n  return maxValue;\n}\n\nexport { mode as default };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,KAAK,KAAK;IACjB,IAAI,CAAC,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,WAAW;IACf,IAAI,WAAW;IACf,IAAI,QAAQ;IACZ,IAAI,SAAS,CAAC;IAEd,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,EAAE,EAAG;QACrC,IAAI,UAAU,KAAK,CAAC,EAAE;QACtB,QAAQ,MAAM,CAAC,QAAQ;QAEvB,IAAI,OAAO;YACT,MAAM,CAAC,QAAQ;YACf;QACF,OAAO;YACL,MAAM,CAAC,QAAQ,GAAG,QAAQ;QAC5B;QAEA,IAAI,QAAQ,UAAU;YACpB,WAAW;YACX,WAAW,KAAK,CAAC,EAAE;QACrB;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1248, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/safe-buffer/index.js"],"sourcesContent":["/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n"],"names":[],"mappings":"AAAA,kFAAkF,GAClF,yCAAyC,GACzC,IAAI;AACJ,IAAI,SAAS,OAAO,MAAM;AAE1B,oDAAoD;AACpD,SAAS,UAAW,GAAG,EAAE,GAAG;IAC1B,IAAK,IAAI,OAAO,IAAK;QACnB,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI;IACrB;AACF;AACA,IAAI,OAAO,IAAI,IAAI,OAAO,KAAK,IAAI,OAAO,WAAW,IAAI,OAAO,eAAe,EAAE;IAC/E,OAAO,OAAO,GAAG;AACnB,OAAO;IACL,yCAAyC;IACzC,UAAU,QAAQ;IAClB,QAAQ,MAAM,GAAG;AACnB;AAEA,SAAS,WAAY,GAAG,EAAE,gBAAgB,EAAE,MAAM;IAChD,OAAO,OAAO,KAAK,kBAAkB;AACvC;AAEA,WAAW,SAAS,GAAG,OAAO,MAAM,CAAC,OAAO,SAAS;AAErD,kCAAkC;AAClC,UAAU,QAAQ;AAElB,WAAW,IAAI,GAAG,SAAU,GAAG,EAAE,gBAAgB,EAAE,MAAM;IACvD,IAAI,OAAO,QAAQ,UAAU;QAC3B,MAAM,IAAI,UAAU;IACtB;IACA,OAAO,OAAO,KAAK,kBAAkB;AACvC;AAEA,WAAW,KAAK,GAAG,SAAU,IAAI,EAAE,IAAI,EAAE,QAAQ;IAC/C,IAAI,OAAO,SAAS,UAAU;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,IAAI,MAAM,OAAO;IACjB,IAAI,SAAS,WAAW;QACtB,IAAI,OAAO,aAAa,UAAU;YAChC,IAAI,IAAI,CAAC,MAAM;QACjB,OAAO;YACL,IAAI,IAAI,CAAC;QACX;IACF,OAAO;QACL,IAAI,IAAI,CAAC;IACX;IACA,OAAO;AACT;AAEA,WAAW,WAAW,GAAG,SAAU,IAAI;IACrC,IAAI,OAAO,SAAS,UAAU;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,OAAO,OAAO;AAChB;AAEA,WAAW,eAAe,GAAG,SAAU,IAAI;IACzC,IAAI,OAAO,SAAS,UAAU;QAC5B,MAAM,IAAI,UAAU;IACtB;IACA,OAAO,OAAO,UAAU,CAAC;AAC3B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1308, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/string_decoder/lib/string_decoder.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1600, "column": 0}, "map": {"version":3,"file":"random-js.esm.js","sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/constants.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/int32.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/add.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/int53.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/int53Full.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/uint32.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/uint53.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/uint53Full.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/integer.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/bool.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/date.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/die.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/dice.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/string.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/hex.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/convertSliceArgument.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/toInteger.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/pick.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/multiply.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/realZeroToOneExclusive.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/realZeroToOneInclusive.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/real.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/sliceArray.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/shuffle.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/sample.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/stringRepeat.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/uuid4.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/engine/nativeMath.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/Random.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/Int32Array.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/engine/browserCrypto.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/createEntropy.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/utils/imul.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/engine/MersenneTwister19937.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/engine/nodeCrypto.ts","file:///Users/krishna/Documents/js-ml/frontend/node_modules/random-js/src/distribution/picker.ts"],"sourcesContent":["export const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\nexport const LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\nexport const UINT32_MAX = -1 >>> 0;\nexport const UINT32_SIZE = UINT32_MAX + 1;\nexport const INT32_SIZE = UINT32_SIZE / 2;\nexport const INT32_MAX = INT32_SIZE - 1;\nexport const UINT21_SIZE = 1 << 21;\nexport const UINT21_MAX = UINT21_SIZE - 1;\n","import { Engine } from \"../types\";\n\n/**\n * Returns a value within [-0x80000000, 0x7fffffff]\n */\nexport function int32(engine: Engine): number {\n  return engine.next() | 0;\n}\n","import { Distribution } from \"../types\";\n\nexport function add(distribution: Distribution, addend: number): Distribution {\n  if (addend === 0) {\n    return distribution;\n  } else {\n    return engine => distribution(engine) + addend;\n  }\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\n */\nexport function int53(engine: Engine): number {\n  const high = engine.next() | 0;\n  const low = engine.next() >>> 0;\n  return (\n    (high & UINT21_MAX) * UINT32_SIZE +\n    low +\n    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\n  );\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [-0x20000000000000, 0x20000000000000]\n */\nexport function int53Full(engine: Engine): number {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & 0x400000) {\n      if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (\n        (high & UINT21_MAX) * UINT32_SIZE +\n        low +\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\n      );\n    }\n  }\n}\n","import { Engine } from \"../types\";\n\n/**\n * Returns a value within [0, 0xffffffff]\n */\nexport function uint32(engine: Engine): number {\n  return engine.next() >>> 0;\n}\n","import { Engine } from \"../types\";\nimport { UINT21_MAX, UINT32_SIZE } from \"../utils/constants\";\n\n/**\n * Returns a value within [0, 0x1fffffffffffff]\n */\nexport function uint53(engine: Engine): number {\n  const high = engine.next() & UINT21_MAX;\n  const low = engine.next() >>> 0;\n  return high * UINT32_SIZE + low;\n}\n","import { Engine } from \"../types\";\nimport {\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_SIZE\n} from \"../utils/constants\";\n\n/**\n * Returns a value within [0, 0x20000000000000]\n */\nexport function uint53Full(engine: Engine): number {\n  while (true) {\n    const high = engine.next() | 0;\n    if (high & UINT21_SIZE) {\n      if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\n        return SMALLEST_UNSAFE_INTEGER;\n      }\n    } else {\n      const low = engine.next() >>> 0;\n      return (high & UINT21_MAX) * UINT32_SIZE + low;\n    }\n  }\n}\n","import { Distribution, Engine } from \"../types\";\nimport { add } from \"../utils/add\";\nimport {\n  INT32_SIZE,\n  LARGEST_SAFE_INTEGER,\n  SMALLEST_UNSAFE_INTEGER,\n  UINT21_MAX,\n  UINT21_SIZE,\n  UINT32_MAX,\n  UINT32_SIZE\n} from \"../utils/constants\";\nimport { int32 } from \"./int32\";\nimport { int53 } from \"./int53\";\nimport { int53Full } from \"./int53Full\";\nimport { uint32 } from \"./uint32\";\nimport { uint53 } from \"./uint53\";\nimport { uint53Full } from \"./uint53Full\";\n\nfunction isPowerOfTwoMinusOne(value: number): boolean {\n  return ((value + 1) & value) === 0;\n}\n\nfunction bitmask(masking: number): Distribution {\n  return (engine: Engine) => engine.next() & masking;\n}\n\nfunction downscaleToLoopCheckedRange(range: number): Distribution {\n  const extendedRange = range + 1;\n  const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\n  return engine => {\n    let value = 0;\n    do {\n      value = engine.next() >>> 0;\n    } while (value >= maximum);\n    return value % extendedRange;\n  };\n}\n\nfunction downscaleToRange(range: number): Distribution {\n  if (isPowerOfTwoMinusOne(range)) {\n    return bitmask(range);\n  } else {\n    return downscaleToLoopCheckedRange(range);\n  }\n}\n\nfunction isEvenlyDivisibleByMaxInt32(value: number): boolean {\n  return (value | 0) === 0;\n}\n\nfunction upscaleWithHighMasking(masking: number): Distribution {\n  return engine => {\n    const high = engine.next() & masking;\n    const low = engine.next() >>> 0;\n    return high * UINT32_SIZE + low;\n  };\n}\n\nfunction upscaleToLoopCheckedRange(extendedRange: number): Distribution {\n  const maximum =\n    extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() & UINT21_MAX;\n      const low = engine.next() >>> 0;\n      ret = high * UINT32_SIZE + low;\n    } while (ret >= maximum);\n    return ret % extendedRange;\n  };\n}\n\nfunction upscaleWithinU53(range: number): Distribution {\n  const extendedRange = range + 1;\n  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n    const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\n    if (isPowerOfTwoMinusOne(highRange)) {\n      return upscaleWithHighMasking(highRange);\n    }\n  }\n  return upscaleToLoopCheckedRange(extendedRange);\n}\n\nfunction upscaleWithinI53AndLoopCheck(min: number, max: number): Distribution {\n  return engine => {\n    let ret = 0;\n    do {\n      const high = engine.next() | 0;\n      const low = engine.next() >>> 0;\n      ret =\n        (high & UINT21_MAX) * UINT32_SIZE +\n        low +\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\n    } while (ret < min || ret > max);\n    return ret;\n  };\n}\n\n/**\n * Returns a Distribution to return a value within [min, max]\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\n */\nexport function integer(min: number, max: number): Distribution {\n  min = Math.floor(min);\n  max = Math.floor(max);\n  if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\n    throw new RangeError(\n      `Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`\n    );\n  } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\n    throw new RangeError(\n      `Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`\n    );\n  }\n\n  const range = max - min;\n  if (range <= 0 || !isFinite(range)) {\n    return () => min;\n  } else if (range === UINT32_MAX) {\n    if (min === 0) {\n      return uint32;\n    } else {\n      return add(int32, min + INT32_SIZE);\n    }\n  } else if (range < UINT32_MAX) {\n    return add(downscaleToRange(range), min);\n  } else if (range === LARGEST_SAFE_INTEGER) {\n    return add(uint53, min);\n  } else if (range < LARGEST_SAFE_INTEGER) {\n    return add(upscaleWithinU53(range), min);\n  } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\n    return add(uint53Full, min);\n  } else if (\n    min === -SMALLEST_UNSAFE_INTEGER &&\n    max === SMALLEST_UNSAFE_INTEGER\n  ) {\n    return int53Full;\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\n    return int53;\n  } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\n    return add(int53, 1);\n  } else if (max === SMALLEST_UNSAFE_INTEGER) {\n    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n  } else {\n    return upscaleWithinI53AndLoopCheck(min, max);\n  }\n}\n","import { Distribution, Engine } from \"../types\";\nimport { INT32_SIZE, SMALLEST_UNSAFE_INTEGER, UINT32_SIZE } from \"../utils/constants\";\nimport { int32 } from \"./int32\";\nimport { integer } from \"./integer\";\nimport { uint53 } from \"./uint53\";\n\nfunction isLeastBitTrue(engine: Engine) {\n  return (engine.next() & 1) === 1;\n}\n\nfunction lessThan(\n  distribution: Distribution,\n  value: number\n): Distribution<boolean> {\n  return engine => distribution(engine) < value;\n}\n\nfunction probability(percentage: number) {\n  if (percentage <= 0) {\n    return () => false;\n  } else if (percentage >= 1) {\n    return () => true;\n  } else {\n    const scaled = percentage * UINT32_SIZE;\n    if (scaled % 1 === 0) {\n      return lessThan(int32, (scaled - INT32_SIZE) | 0);\n    } else {\n      return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\n    }\n  }\n}\n\n// tslint:disable:unified-signatures\n\n/**\n * Returns a boolean Distribution with 50% probability of being true or false\n */\nexport function bool(): Distribution<boolean>;\n/**\n * Returns a boolean Distribution with the provided `percentage` of being true\n * @param percentage A number within [0, 1] of how often the result should be `true`\n */\nexport function bool(percentage: number): Distribution<boolean>;\n/**\n * Returns a boolean Distribution with a probability of\n * `numerator` divided by `denominator` of being true\n * @param numerator The numerator of the probability\n * @param denominator The denominator of the probability\n */\nexport function bool(\n  numerator: number,\n  denominator: number\n): Distribution<boolean>;\nexport function bool(\n  numerator?: number,\n  denominator?: number\n): Distribution<boolean> {\n  if (denominator == null) {\n    if (numerator == null) {\n      return isLeastBitTrue;\n    }\n    return probability(numerator);\n  } else {\n    if (numerator! <= 0) {\n      return () => false;\n    } else if (numerator! >= denominator) {\n      return () => true;\n    }\n    return lessThan(integer(0, denominator - 1), numerator!);\n  }\n}\n","import { Distribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution that returns a random `Date` within the inclusive\n * range of [`start`, `end`].\n * @param start The minimum `Date`\n * @param end The maximum `Date`\n */\nexport function date(start: Date, end: Date): Distribution<Date> {\n  const distribution = integer(+start, +end);\n  return engine => new Date(distribution(engine));\n}\n","import { Distribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution to return a value within [1, sideCount]\n * @param sideCount The number of sides of the die\n */\nexport function die(sideCount: number): Distribution<number> {\n  return integer(1, sideCount);\n}\n","import { Distribution } from \"../types\";\nimport { die } from \"./die\";\n\n/**\n * Returns a distribution that returns an array of length `dieCount` of values\n * within [1, `sideCount`]\n * @param sideCount The number of sides of each die\n * @param dieCount The number of dice\n */\nexport function dice(\n  sideCount: number,\n  dieCount: number\n): Distribution<number[]> {\n  const distribution = die(sideCount);\n  return engine => {\n    const result = [];\n    for (let i = 0; i < dieCount; ++i) {\n      result.push(distribution(engine));\n    }\n    return result;\n  };\n}\n","import { StringDistribution } from \"../types\";\nimport { integer } from \"./integer\";\n\n// tslint:disable:unified-signatures\n\n// has 2**x chars, for faster uniform distribution\nconst DEFAULT_STRING_POOL =\n  \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\n/**\n * Returns a distribution that returns a random string using numbers,\n * uppercase and lowercase letters, `_`, and `-` of length `length`.\n * @param length Length of the result string\n */\nexport function string(): StringDistribution;\n/**\n * Returns a distribution that returns a random string using the provided\n * string pool as the possible characters to choose from of length `length`.\n * @param length Length of the result string\n */\nexport function string(pool: string): StringDistribution;\nexport function string(pool: string = DEFAULT_STRING_POOL): StringDistribution {\n  const poolLength = pool.length;\n  if (!poolLength) {\n    throw new Error(\"Expected pool not to be an empty string\");\n  }\n\n  const distribution = integer(0, poolLength - 1);\n  return (engine, length) => {\n    let result = \"\";\n    for (let i = 0; i < length; ++i) {\n      const j = distribution(engine);\n      result += pool.charAt(j);\n    }\n    return result;\n  };\n}\n","import { StringDistribution } from \"../types\";\nimport { string } from \"./string\";\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\nconst lowerHex = string(LOWER_HEX_POOL);\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\n\n/**\n * Returns a Distribution that returns a random string comprised of numbers\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\n * @param length Length of the result string\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\n */\nexport function hex(uppercase?: boolean): StringDistribution {\n  if (uppercase) {\n    return upperHex;\n  } else {\n    return lowerHex;\n  }\n}\n","export function convertSliceArgument(value: number, length: number): number {\n  if (value < 0) {\n    return Math.max(value + length, 0);\n  } else {\n    return Math.min(value, length);\n  }\n}\n","export function toInteger(value: number) {\n  const num = +value;\n  if (num < 0) {\n    return Math.ceil(num);\n  } else {\n    return Math.floor(num);\n  }\n}\n","import { Engine } from \"../types\";\nimport { convertSliceArgument } from \"../utils/convertSliceArgument\";\nimport { toInteger } from \"../utils/toInteger\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a random value within the provided `source` within the sliced\n * bounds of `begin` and `end`.\n * @param source an array of items to pick from\n * @param begin the beginning slice index (defaults to `0`)\n * @param end the ending slice index (defaults to `source.length`)\n */\nexport function pick<T>(\n  engine: Engine,\n  source: ArrayLike<T>,\n  begin?: number,\n  end?: number\n): T {\n  const length = source.length;\n  if (length === 0) {\n    throw new RangeError(\"Cannot pick from an empty array\");\n  }\n  const start =\n    begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n  const finish =\n    end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n  if (start >= finish) {\n    throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\n  }\n  const distribution = integer(start, finish - 1);\n  return source[distribution(engine)];\n}\n","import { Distribution } from \"../types\";\n\nexport function multiply(\n  distribution: Distribution,\n  multiplier: number\n): Distribution {\n  if (multiplier === 1) {\n    return distribution;\n  } else if (multiplier === 0) {\n    return () => 0;\n  } else {\n    return engine => distribution(engine) * multiplier;\n  }\n}\n","import { Engine } from \"../types\";\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\nimport { uint53 } from \"./uint53\";\n\n/**\n * Returns a floating-point value within [0.0, 1.0)\n */\nexport function realZeroToOneExclusive(engine: Engine): number {\n  return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n","import { Engine } from \"../types\";\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\nimport { uint53Full } from \"./uint53Full\";\n\n/**\n * Returns a floating-point value within [0.0, 1.0]\n */\nexport function realZeroToOneInclusive(engine: Engine): number {\n  return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\n}\n","import { Distribution } from \"../types\";\nimport { add } from \"../utils/add\";\nimport { multiply } from \"../utils/multiply\";\nimport { realZeroToOneExclusive } from \"./realZeroToOneExclusive\";\nimport { realZeroToOneInclusive } from \"./realZeroToOneInclusive\";\n\n/**\n * Returns a floating-point value within [min, max) or [min, max]\n * @param min The minimum floating-point value, inclusive.\n * @param max The maximum floating-point value.\n * @param inclusive If true, `max` will be inclusive.\n */\nexport function real(\n  min: number,\n  max: number,\n  inclusive: boolean = false\n): Distribution {\n  if (!isFinite(min)) {\n    throw new RangeError(\"Expected min to be a finite number\");\n  } else if (!isFinite(max)) {\n    throw new RangeError(\"Expected max to be a finite number\");\n  }\n  return add(\n    multiply(\n      inclusive ? realZeroToOneInclusive : realZeroToOneExclusive,\n      max - min\n    ),\n    min\n  );\n}\n","export const sliceArray = Array.prototype.slice;\n","import { Engine } from \"../types\";\nimport { integer } from \"./integer\";\n\n/**\n * Shuffles an array in-place\n * @param engine The Engine to use when choosing random values\n * @param array The array to shuffle\n * @param downTo minimum index to shuffle. Only used internally.\n */\nexport function shuffle<T>(\n  engine: Engine,\n  array: T[],\n  downTo: number = 0\n): T[] {\n  const length = array.length;\n  if (length) {\n    for (let i = (length - 1) >>> 0; i > downTo; --i) {\n      const distribution = integer(0, i);\n      const j = distribution(engine);\n      if (i !== j) {\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n      }\n    }\n  }\n  return array;\n}\n","import { Engine } from \"../types\";\nimport { sliceArray } from \"../utils/sliceArray\";\nimport { shuffle } from \"./shuffle\";\n\n/**\n * From the population array, produce an array with sampleSize elements that\n * are randomly chosen without repeats.\n * @param engine The Engine to use when choosing random values\n * @param population An array that has items to choose a sample from\n * @param sampleSize The size of the result array\n */\nexport function sample<T>(\n  engine: Engine,\n  population: ArrayLike<T>,\n  sampleSize: number\n): T[] {\n  if (\n    sampleSize < 0 ||\n    sampleSize > population.length ||\n    !isFinite(sampleSize)\n  ) {\n    throw new RangeError(\n      \"Expected sampleSize to be within 0 and the length of the population\"\n    );\n  }\n\n  if (sampleSize === 0) {\n    return [];\n  }\n\n  const clone = sliceArray.call(population);\n  const length = clone.length;\n  if (length === sampleSize) {\n    return shuffle(engine, clone, 0);\n  }\n  const tailLength = length - sampleSize;\n  return shuffle(engine, clone, tailLength - 1).slice(tailLength);\n}\n","export const stringRepeat = (() => {\n  try {\n    if ((\"x\" as any).repeat(3) === \"xxx\") {\n      return (pattern: string, count: number): string =>\n        (pattern as any).repeat(count);\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (pattern: string, count: number): string => {\n    let result = \"\";\n    while (count > 0) {\n      if (count & 1) {\n        result += pattern;\n      }\n      count >>= 1;\n      pattern += pattern;\n    }\n    return result;\n  };\n})();\n","import { Engine } from \"../types\";\nimport { stringRepeat } from \"../utils/stringRepeat\";\n\nfunction zeroPad(text: string, zeroCount: number) {\n  return stringRepeat(\"0\", zeroCount - text.length) + text;\n}\n\n/**\n * Returns a Universally Unique Identifier Version 4.\n *\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\n */\nexport function uuid4(engine: Engine) {\n  const a = engine.next() >>> 0;\n  const b = engine.next() | 0;\n  const c = engine.next() | 0;\n  const d = engine.next() >>> 0;\n\n  return (\n    zeroPad(a.toString(16), 8) +\n    \"-\" +\n    zeroPad((b & 0xffff).toString(16), 4) +\n    \"-\" +\n    zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n    \"-\" +\n    zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n    \"-\" +\n    zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n    zeroPad(d.toString(16), 8)\n  );\n}\n","import { Engine } from \"../types\";\nimport { UINT32_SIZE } from \"../utils/constants\";\n\n/**\n * An int32-producing Engine that uses `Math.random()`\n */\nexport const nativeMath: Engine = {\n  next() {\n    return (Math.random() * UINT32_SIZE) | 0;\n  }\n};\n","import { bool } from \"./distribution/bool\";\nimport { date } from \"./distribution/date\";\nimport { dice } from \"./distribution/dice\";\nimport { die } from \"./distribution/die\";\nimport { hex } from \"./distribution/hex\";\nimport { int32 } from \"./distribution/int32\";\nimport { int53 } from \"./distribution/int53\";\nimport { int53Full } from \"./distribution/int53Full\";\nimport { integer } from \"./distribution/integer\";\nimport { pick } from \"./distribution/pick\";\nimport { real } from \"./distribution/real\";\nimport { realZeroToOneExclusive } from \"./distribution/realZeroToOneExclusive\";\nimport { realZeroToOneInclusive } from \"./distribution/realZeroToOneInclusive\";\nimport { sample } from \"./distribution/sample\";\nimport { shuffle } from \"./distribution/shuffle\";\nimport { string } from \"./distribution/string\";\nimport { uint32 } from \"./distribution/uint32\";\nimport { uint53 } from \"./distribution/uint53\";\nimport { uint53Full } from \"./distribution/uint53Full\";\nimport { uuid4 } from \"./distribution/uuid4\";\nimport { nativeMath } from \"./engine/nativeMath\";\nimport { Engine } from \"./types\";\n\n// tslint:disable:unified-signatures\n\n/**\n * A wrapper around an Engine that provides easy-to-use methods for\n * producing values based on known distributions\n */\nexport class Random {\n  private readonly engine: Engine;\n\n  /**\n   * Creates a new Random wrapper\n   * @param engine The engine to use (defaults to a `Math.random`-based implementation)\n   */\n  constructor(engine: Engine = nativeMath) {\n    this.engine = engine;\n  }\n\n  /**\n   * Returns a value within [-0x80000000, 0x7fffffff]\n   */\n  public int32(): number {\n    return int32(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0xffffffff]\n   */\n  public uint32(): number {\n    return uint32(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0x1fffffffffffff]\n   */\n  public uint53(): number {\n    return uint53(this.engine);\n  }\n\n  /**\n   * Returns a value within [0, 0x20000000000000]\n   */\n  public uint53Full(): number {\n    return uint53Full(this.engine);\n  }\n\n  /**\n   * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\n   */\n  public int53(): number {\n    return int53(this.engine);\n  }\n\n  /**\n   * Returns a value within [-0x20000000000000, 0x20000000000000]\n   */\n  public int53Full(): number {\n    return int53Full(this.engine);\n  }\n\n  /**\n   * Returns a value within [min, max]\n   * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\n   * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\n   */\n  public integer(min: number, max: number): number {\n    return integer(min, max)(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [0.0, 1.0]\n   */\n  public realZeroToOneInclusive(): number {\n    return realZeroToOneInclusive(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [0.0, 1.0)\n   */\n  public realZeroToOneExclusive(): number {\n    return realZeroToOneExclusive(this.engine);\n  }\n\n  /**\n   * Returns a floating-point value within [min, max) or [min, max]\n   * @param min The minimum floating-point value, inclusive.\n   * @param max The maximum floating-point value.\n   * @param inclusive If true, `max` will be inclusive.\n   */\n  public real(min: number, max: number, inclusive: boolean = false): number {\n    return real(min, max, inclusive)(this.engine);\n  }\n\n  /**\n   * Returns a boolean with 50% probability of being true or false\n   */\n  public bool(): boolean;\n  /**\n   * Returns a boolean with the provided `percentage` of being true\n   * @param percentage A number within [0, 1] of how often the result should be `true`\n   */\n  public bool(percentage: number): boolean;\n  /**\n   * Returns a boolean with a probability of `numerator`/`denominator` of being true\n   * @param numerator The numerator of the probability\n   * @param denominator The denominator of the probability\n   */\n  public bool(numerator: number, denominator: number): boolean;\n  public bool(numerator?: number, denominator?: number): boolean {\n    return bool(numerator!, denominator!)(this.engine);\n  }\n\n  /**\n   * Return a random value within the provided `source` within the sliced\n   * bounds of `begin` and `end`.\n   * @param source an array of items to pick from\n   * @param begin the beginning slice index (defaults to `0`)\n   * @param end the ending slice index (defaults to `source.length`)\n   */\n  public pick<T>(source: ArrayLike<T>, begin?: number, end?: number): T {\n    return pick(this.engine, source, begin, end);\n  }\n\n  /**\n   * Shuffles an array in-place\n   * @param array The array to shuffle\n   */\n  public shuffle<T>(array: T[]): T[] {\n    return shuffle(this.engine, array);\n  }\n\n  /**\n   * From the population array, returns an array with sampleSize elements that\n   * are randomly chosen without repeats.\n   * @param population An array that has items to choose a sample from\n   * @param sampleSize The size of the result array\n   */\n  public sample<T>(population: ArrayLike<T>, sampleSize: number): T[] {\n    return sample(this.engine, population, sampleSize);\n  }\n\n  /**\n   * Returns a value within [1, sideCount]\n   * @param sideCount The number of sides of the die\n   */\n  public die(sideCount: number): number {\n    return die(sideCount)(this.engine);\n  }\n\n  /**\n   * Returns an array of length `dieCount` of values within [1, sideCount]\n   * @param sideCount The number of sides of each die\n   * @param dieCount The number of dice\n   */\n  public dice(sideCount: number, dieCount: number): number[] {\n    return dice(sideCount, dieCount)(this.engine);\n  }\n\n  /**\n   * Returns a Universally Unique Identifier Version 4.\n   *\n   * See http://en.wikipedia.org/wiki/Universally_unique_identifier\n   */\n  public uuid4(): string {\n    return uuid4(this.engine);\n  }\n\n  /**\n   * Returns a random string using numbers, uppercase and lowercase letters,\n   * `_`, and `-` of length `length`.\n   * @param length Length of the result string\n   */\n  public string(length: number): string;\n  /**\n   * Returns a random string using the provided string pool as the possible\n   * characters to choose from of length `length`.\n   * @param length Length of the result string\n   */\n  public string(length: number, pool: string): string;\n  public string(length: number, pool?: string): string {\n    return string(pool!)(this.engine, length);\n  }\n\n  /**\n   * Returns a random string comprised of numbers or the characters `abcdef`\n   * (or `ABCDEF`) of length `length`.\n   * @param length Length of the result string\n   * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\n   */\n  public hex(length: number, uppercase?: boolean): string {\n    return hex(uppercase)(this.engine, length);\n  }\n\n  /**\n   * Returns a random `Date` within the inclusive range of [`start`, `end`].\n   * @param start The minimum `Date`\n   * @param end The maximum `Date`\n   */\n  public date(start: Date, end: Date): Date {\n    return date(start, end)(this.engine);\n  }\n}\n","import { INT32_SIZE } from \"./constants\";\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n */\nconst I32Array: typeof Int32Array = (() => {\n  try {\n    const buffer = new ArrayBuffer(4);\n    const view = new Int32Array(buffer);\n    view[0] = INT32_SIZE;\n    if (view[0] === -INT32_SIZE) {\n      return Int32Array;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  return (Array as unknown) as typeof Int32Array;\n})();\nexport { I32Array as Int32Array };\n","import { Engine } from \"../types\";\nimport { Int32Array } from \"../utils/Int32Array\";\n\nlet data: Int32Array | null = null;\nconst COUNT = 128;\nlet index = COUNT;\n\n/**\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\n * which is typically available in modern browsers.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n *\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\n * likely `throw` on the first call to `next()`.\n */\nexport const browserCrypto: Engine = {\n  next() {\n    if (index >= COUNT) {\n      if (data === null) {\n        data = new Int32Array(COUNT);\n      }\n      crypto.getRandomValues(data);\n      index = 0;\n    }\n    return data![index++] | 0;\n  }\n};\n","import { nativeMath } from \"../engine/nativeMath\";\nimport { Engine } from \"../types\";\n\n/**\n * Returns an array of random int32 values, based on current time\n * and a random number engine\n *\n * @param engine an Engine to pull random values from, default `nativeMath`\n * @param length the length of the Array, minimum 1, default 16\n */\nexport function createEntropy(\n  engine: Engine = nativeMath,\n  length: number = 16\n): number[] {\n  const array: number[] = [];\n  array.push(new Date().getTime() | 0);\n  for (let i = 1; i < length; ++i) {\n    array[i] = engine.next() | 0;\n  }\n  return array;\n}\n","import { UINT32_MAX } from \"./constants\";\n\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n */\nexport const imul: (a: number, b: number) => number = (() => {\n  try {\n    if ((Math as any).imul(UINT32_MAX, 5) === -5) {\n      return (Math as any).imul;\n    }\n  } catch (_) {\n    // nothing to do here\n  }\n  const UINT16_MAX = 0xffff;\n  return (a: number, b: number) => {\n    const ah = (a >>> 16) & UINT16_MAX;\n    const al = a & UINT16_MAX;\n    const bh = (b >>> 16) & UINT16_MAX;\n    const bl = b & UINT16_MAX;\n    // the shift by 0 fixes the sign on the high part\n    // the final |0 converts the unsigned value into a signed value\n    return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\n  };\n})();\n","import { Engine } from \"../types\";\nimport { INT32_MAX, INT32_SIZE } from \"../utils/constants\";\nimport { createEntropy } from \"../utils/createEntropy\";\nimport { imul } from \"../utils/imul\";\nimport { Int32Array } from \"../utils/Int32Array\";\n\nconst ARRAY_SIZE = 624;\nconst ARRAY_MAX = ARRAY_SIZE - 1;\nconst M = 397;\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\nconst A = 0x9908b0df;\n\n/**\n * An Engine that is a pseudorandom number generator using the Mersenne\n * Twister algorithm based on the prime 2**19937 − 1\n *\n * See http://en.wikipedia.org/wiki/Mersenne_twister\n */\nexport class MersenneTwister19937 implements Engine {\n  /**\n   * Returns a MersenneTwister19937 seeded with an initial int32 value\n   * @param initial the initial seed value\n   */\n  public static seed(initial: number): MersenneTwister19937 {\n    return new MersenneTwister19937().seed(initial);\n  }\n\n  /**\n   * Returns a MersenneTwister19937 seeded with zero or more int32 values\n   * @param source A series of int32 values\n   */\n  public static seedWithArray(source: ArrayLike<number>): MersenneTwister19937 {\n    return new MersenneTwister19937().seedWithArray(source);\n  }\n\n  /**\n   * Returns a MersenneTwister19937 seeded with the current time and\n   * a series of natively-generated random values\n   */\n  public static autoSeed(): MersenneTwister19937 {\n    return MersenneTwister19937.seedWithArray(createEntropy());\n  }\n\n  private readonly data = new Int32Array(ARRAY_SIZE);\n  private index = 0; // integer within [0, 624]\n  private uses = 0;\n\n  /**\n   * MersenneTwister19937 should not be instantiated directly.\n   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\n   */\n  private constructor() {}\n\n  /**\n   * Returns the next int32 value of the sequence\n   */\n  public next(): number {\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n\n    const value = this.data[this.index];\n    this.index = (this.index + 1) | 0;\n    this.uses += 1;\n    return temper(value) | 0;\n  }\n\n  /**\n   * Returns the number of times that the Engine has been used.\n   *\n   * This can be provided to an unused MersenneTwister19937 with the same\n   * seed, bringing it to the exact point that was left off.\n   */\n  public getUseCount(): number {\n    return this.uses;\n  }\n\n  /**\n   * Discards one or more items from the engine\n   * @param count The count of items to discard\n   */\n  public discard(count: number): this {\n    if (count <= 0) {\n      return this;\n    }\n    this.uses += count;\n    if ((this.index | 0) >= ARRAY_SIZE) {\n      refreshData(this.data);\n      this.index = 0;\n    }\n    while (count + this.index > ARRAY_SIZE) {\n      count -= ARRAY_SIZE - this.index;\n      refreshData(this.data);\n      this.index = 0;\n    }\n    this.index = (this.index + count) | 0;\n    return this;\n  }\n\n  private seed(initial: number): this {\n    let previous = 0;\n    this.data[0] = previous = initial | 0;\n\n    for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\n      this.data[i] = previous =\n        (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\n    }\n    this.index = ARRAY_SIZE;\n    this.uses = 0;\n    return this;\n  }\n\n  private seedWithArray(source: ArrayLike<number>): this {\n    this.seed(0x012bd6aa);\n    seedWithArray(this.data, source);\n    return this;\n  }\n}\n\nfunction refreshData(data: Int32Array) {\n  let k = 0;\n  let tmp = 0;\n  for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\n    data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n  }\n\n  for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\n    data[k] =\n      data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n  }\n\n  tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\n  data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\n}\n\nfunction temper(value: number) {\n  value ^= value >>> 11;\n  value ^= (value << 7) & 0x9d2c5680;\n  value ^= (value << 15) & 0xefc60000;\n  return value ^ (value >>> 18);\n}\n\nfunction seedWithArray(data: Int32Array, source: ArrayLike<number>) {\n  let i = 1;\n  let j = 0;\n  const sourceLength = source.length;\n  let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\n  let previous = data[0] | 0;\n  for (; (k | 0) > 0; --k) {\n    data[i] = previous =\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\n        (source[j] | 0) +\n        (j | 0)) |\n      0;\n    i = (i + 1) | 0;\n    ++j;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n    if (j >= sourceLength) {\n      j = 0;\n    }\n  }\n  for (k = ARRAY_MAX; (k | 0) > 0; --k) {\n    data[i] = previous =\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\n    i = (i + 1) | 0;\n    if ((i | 0) > ARRAY_MAX) {\n      data[0] = data[ARRAY_MAX];\n      i = 1;\n    }\n  }\n  data[0] = INT32_SIZE;\n}\n","import { Engine } from \"../types\";\n\nlet data: Int32Array | null = null;\nconst COUNT = 128;\nlet index = COUNT;\n\n/**\n * An Engine that relies on the node-available\n * `require('crypto').randomBytes`, which has been available since 0.58.\n *\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\n *\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\n * likely `throw` on the first call to `next()`.\n */\nexport const nodeCrypto: Engine = {\n  next() {\n    if (index >= COUNT) {\n      data = new Int32Array(\n        new Int8Array(require(\"crypto\").randomBytes(4 * COUNT)).buffer\n      );\n      index = 0;\n    }\n    return data![index++] | 0;\n  }\n};\n","import { Distribution } from \"../types\";\nimport { sliceArray } from \"../utils/sliceArray\";\nimport { integer } from \"./integer\";\n\n/**\n * Returns a Distribution to random value within the provided `source`\n * within the sliced bounds of `begin` and `end`.\n * @param source an array of items to pick from\n * @param begin the beginning slice index (defaults to `0`)\n * @param end the ending slice index (defaults to `source.length`)\n */\nexport function picker<T>(\n  source: ArrayLike<T>,\n  begin?: number,\n  end?: number\n): Distribution<T> {\n  const clone = sliceArray.call(source, begin, end);\n  if (clone.length === 0) {\n    throw new RangeError(`Cannot pick from a source with no items`);\n  }\n  const distribution = integer(0, clone.length - 1);\n  return engine => clone[distribution(engine)];\n}\n"],"names":["Int32Array","data","COUNT","index"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"debugId":null}},
    {"offset": {"line": 2440, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-random-forest/src/utils.js"],"sourcesContent":["import { Matrix } from 'ml-matrix';\nimport * as Random from 'random-js';\n\nexport function checkFloat(n) {\n  return n > 0.0 && n <= 1.0;\n}\n\nexport function isFloat(n) {\n  return Number(n) === n && n % 1 !== 0;\n}\n\n/**\n * Select n with replacement elements on the training set and values, where n is the size of the training set.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {Array} trainingValue\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object} with new X and y.\n */\nexport function examplesBaggingWithReplacement(\n  trainingSet,\n  trainingValue,\n  seed,\n) {\n  let engine;\n  let distribution = Random.integer(0, trainingSet.rows - 1);\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`,\n    );\n  }\n\n  let Xr = new Array(trainingSet.rows);\n  let yr = new Array(trainingSet.rows);\n\n  let oob = new Array(trainingSet.rows).fill(0);\n  let oobN = trainingSet.rows;\n\n  for (let i = 0; i < trainingSet.rows; ++i) {\n    let index = distribution(engine);\n    Xr[i] = trainingSet.getRow(index);\n    yr[i] = trainingValue[index];\n\n    if (oob[index]++ === 0) {\n      oobN--;\n    }\n  }\n\n  let Xoob = new Array(oobN);\n  let ioob = new Array(oobN);\n\n  // run backwards to have ioob filled in increasing order\n  for (let i = trainingSet.rows - 1; i >= 0 && oobN > 0; --i) {\n    if (oob[i] === 0) {\n      Xoob[--oobN] = trainingSet.getRow(i);\n      ioob[oobN] = i;\n    }\n  }\n\n  return {\n    X: new Matrix(Xr),\n    y: yr,\n    Xoob: new Matrix(Xoob),\n    ioob,\n    seed: engine.next(),\n  };\n}\n\n/**\n * selects n features from the training set with or without replacement, returns the new training set and the indexes used.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {number} n - features.\n * @param {boolean} replacement\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object}\n */\nexport function featureBagging(trainingSet, n, replacement, seed) {\n  if (trainingSet.columns < n) {\n    throw new RangeError(\n      'N should be less or equal to the number of columns of X',\n    );\n  }\n\n  let distribution = Random.integer(0, trainingSet.columns - 1);\n  let engine;\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`,\n    );\n  }\n\n  let toRet = new Matrix(trainingSet.rows, n);\n\n  let usedIndex;\n  let index;\n  if (replacement) {\n    usedIndex = new Array(n);\n    for (let i = 0; i < n; ++i) {\n      index = distribution(engine);\n      usedIndex[i] = index;\n      toRet.setColumn(i, trainingSet.getColumn(index));\n    }\n  } else {\n    usedIndex = new Set();\n    index = distribution(engine);\n    for (let i = 0; i < n; ++i) {\n      while (usedIndex.has(index)) {\n        index = distribution(engine);\n      }\n      toRet.setColumn(i, trainingSet.getColumn(index));\n      usedIndex.add(index);\n    }\n    usedIndex = Array.from(usedIndex);\n  }\n\n  return {\n    X: toRet,\n    usedIndex: usedIndex,\n    seed: engine.next(),\n  };\n}\n\n/**\n * collects and combines the individual results from the tree predictions on Out-Of-Bag data\n * @ignore\n * @param {{index: {Array},predicted: {Array}}[]} oob: array of individual tree predictions\n * @param {array} y: true labels\n * @param {(predictions:{Array})=>{number}} aggregate: aggregation function\n * @return {Array}\n */\nexport const collectOOB = (oob, y, aggregate) => {\n  const res = Array(y.length);\n  for (let i = 0; i < y.length; i++) {\n    const all = [];\n    for (let j = 0; j < oob.length; j++) {\n      const o = oob[j];\n      if (o.index[0] === i) {\n        all.push(o.predicted[0]);\n        o.index = o.index.slice(1);\n        o.predicted = o.predicted.slice(1);\n      }\n    }\n    res[i] = { true: y[i], all: all, predicted: aggregate(all) };\n  }\n  return res;\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2563, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-random-forest/src/RandomForestBase.js"],"sourcesContent":["import {\n  DecisionTreeClassifier as DTClassifier,\n  DecisionTreeRegression as DTRegression,\n} from 'ml-cart';\nimport {\n  Matrix,\n  WrapperMatrix2D,\n  MatrixTransposeView,\n  MatrixColumnSelectionView,\n} from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class RandomForestBase\n */\nexport class RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number|String} [options.maxFeatures] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement] - use replacement over the sample features.\n   * @param {number} [options.seed] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators] - number of estimator to use.\n   * @param {object} [options.treeOptions] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.isClassifier] - boolean to check if is a classifier or regression model (used by subclasses).\n   * @param {boolean} [options.useSampleBagging] - use bagging over training samples.\n   * @param {boolean} [options.noOOB] - don't calculate Out-Of-Bag predictions.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.replacement = model.replacement;\n      this.maxFeatures = model.maxFeatures;\n      this.nEstimators = model.nEstimators;\n      this.treeOptions = model.treeOptions;\n      this.isClassifier = model.isClassifier;\n      this.seed = model.seed;\n      this.n = model.n;\n      this.indexes = model.indexes;\n      this.useSampleBagging = model.useSampleBagging;\n      this.noOOB = true;\n      this.maxSamples = model.maxSamples;\n\n      let Estimator = this.isClassifier ? DTClassifier : DTRegression;\n      this.estimators = model.estimators.map((est) => Estimator.load(est));\n    } else {\n      this.replacement = options.replacement;\n      this.maxFeatures = options.maxFeatures;\n      this.nEstimators = options.nEstimators;\n      this.treeOptions = options.treeOptions;\n      this.isClassifier = options.isClassifier;\n      this.seed = options.seed;\n      this.useSampleBagging = options.useSampleBagging;\n      this.noOOB = options.noOOB;\n      this.maxSamples = options.maxSamples;\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    let currentSeed = this.seed;\n\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    this.maxFeatures = this.maxFeatures || trainingSet.columns;\n    this.numberFeatures = trainingSet.columns;\n    this.numberSamples = trainingSet.rows;\n\n    if (Utils.checkFloat(this.maxFeatures)) {\n      this.n = Math.floor(trainingSet.columns * this.maxFeatures);\n    } else if (Number.isInteger(this.maxFeatures)) {\n      if (this.maxFeatures > trainingSet.columns) {\n        throw new RangeError(\n          `The maxFeatures parameter should be less than ${trainingSet.columns}`,\n        );\n      } else {\n        this.n = this.maxFeatures;\n      }\n    } else {\n      throw new RangeError(\n        `Cannot process the maxFeatures parameter ${this.maxFeatures}`,\n      );\n    }\n\n    if (this.maxSamples) {\n      if (this.maxSamples < 0) {\n        throw new RangeError(`Please choose a positive value for maxSamples`);\n      } else {\n        if (Utils.isFloat(this.maxSamples)) {\n          if (this.maxSamples > 1.0) {\n            throw new RangeError(\n              'Please choose either a float value between 0 and 1 or a positive integer for maxSamples',\n            );\n          } else {\n            this.numberSamples = Math.floor(trainingSet.rows * this.maxSamples);\n          }\n        } else if (Number.isInteger(this.maxSamples)) {\n          if (this.maxSamples > trainingSet.rows) {\n            throw new RangeError(\n              `The maxSamples parameter should be less than ${trainingSet.rows}`,\n            );\n          } else {\n            this.numberSamples = this.maxSamples;\n          }\n        }\n      }\n    }\n\n    if (this.maxSamples) {\n      if (trainingSet.rows !== this.numberSamples) {\n        let tmp = new Matrix(this.numberSamples, trainingSet.columns);\n        for (let j = 0; j < this.numberSamples; j++) {\n          tmp.removeRow(0);\n        }\n        for (let i = 0; i < this.numberSamples; i++) {\n          tmp.addRow(trainingSet.getRow(i));\n        }\n        trainingSet = tmp;\n\n        trainingValues = trainingValues.slice(0, this.numberSamples);\n      }\n    }\n\n    let Estimator;\n    if (this.isClassifier) {\n      Estimator = DTClassifier;\n    } else {\n      Estimator = DTRegression;\n    }\n\n    this.estimators = new Array(this.nEstimators);\n    this.indexes = new Array(this.nEstimators);\n\n    let oobResults = new Array(this.nEstimators);\n\n    for (let i = 0; i < this.nEstimators; ++i) {\n      let res = this.useSampleBagging\n        ? Utils.examplesBaggingWithReplacement(\n            trainingSet,\n            trainingValues,\n            currentSeed,\n          )\n        : {\n            X: trainingSet,\n            y: trainingValues,\n            seed: currentSeed,\n            Xoob: undefined,\n            yoob: [],\n            ioob: [],\n          };\n      let X = res.X;\n      let y = res.y;\n      currentSeed = res.seed;\n      let { Xoob, ioob } = res;\n\n      // Other implementations of random forests apply feature bagging at every split during tree generation.\n      // So I think it would be better to implement it at the CART level, not here.\n\n      res = Utils.featureBagging(X, this.n, this.replacement, currentSeed);\n      X = res.X;\n      currentSeed = res.seed;\n\n      this.indexes[i] = res.usedIndex;\n      this.estimators[i] = new Estimator(this.treeOptions);\n      this.estimators[i].train(X, y);\n\n      if (!this.noOOB && this.useSampleBagging) {\n        let xoob = new MatrixColumnSelectionView(Xoob, this.indexes[i]);\n        oobResults[i] = {\n          index: ioob,\n          predicted: this.estimators[i].predict(xoob),\n        };\n      }\n    }\n    if (!this.noOOB && this.useSampleBagging && oobResults.length > 0) {\n      this.oobResults = Utils.collectOOB(\n        oobResults,\n        trainingValues,\n        this.selection.bind(this),\n      );\n    }\n  }\n\n  /**\n   * Evaluate the feature importances for each tree in the ensemble\n   * @return {Array} feature importances\n   */\n  featureImportance() {\n    const trees = JSON.parse(JSON.stringify(this.estimators));\n    const indexes = JSON.parse(JSON.stringify(this.indexes));\n    let importance = [];\n\n    function computeFeatureImportances(i, node) {\n      // node.gain can be null or undefined\n      if (!node || !('splitColumn' in node) || !(node.gain > 0)) return;\n      let f = node.gain * node.numberSamples;\n      if ('left' in node) {\n        f -= (node.left.gain || 0) * (node.left.numberSamples || 0);\n      }\n      if ('right' in node) {\n        f -= (node.right.gain || 0) * (node.right.numberSamples || 0);\n      }\n      importance[i][node.splitColumn] += f;\n      if (node.left) {\n        computeFeatureImportances(i, node.left);\n      }\n      if (node.right) {\n        computeFeatureImportances(i, node.right);\n      }\n    }\n\n    function normalizeImportances(i) {\n      const s = importance[i].reduce((cum, v) => {\n        return (cum += v);\n      }, 0);\n      importance[i] = importance[i].map((v) => {\n        return v / s;\n      });\n    }\n\n    for (let i = 0; i < trees.length; i++) {\n      importance.push(new Array(this.numberFeatures).fill(0.0));\n      computeFeatureImportances(i, trees[i].root);\n      normalizeImportances(i);\n    }\n\n    let avgImportance = new Array(this.numberFeatures).fill(0.0);\n    for (let i = 0; i < importance.length; i++) {\n      for (let x = 0; x < this.numberFeatures; x++) {\n        avgImportance[indexes[i][x]] += importance[i][x];\n      }\n    }\n\n    const s = avgImportance.reduce((cum, v) => {\n      return (cum += v);\n    }, 0);\n    return avgImportance.map((v) => {\n      return v / s;\n    });\n  }\n\n  /**\n   * Method that returns the way the algorithm generates the predictions, for example, in classification\n   * you can return the mode of all predictions retrieved by the trees, or in case of regression you can\n   * use the mean or the median.\n   * @abstract\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction.\n   */\n  // eslint-disable-next-line no-unused-vars\n  selection(values) {\n    throw new Error(\"Abstract method 'selection' not implemented!\");\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    const predictionValues = this.predictionValues(toPredict);\n    let predictions = new Array(predictionValues.rows);\n    for (let i = 0; i < predictionValues.rows; ++i) {\n      predictions[i] = this.selection(predictionValues.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {MatrixTransposeView} predictions of estimators\n   */\n  predictionValues(toPredict) {\n    let predictionValues = new Array(this.nEstimators);\n    toPredict = Matrix.checkMatrix(toPredict);\n    for (let i = 0; i < this.nEstimators; ++i) {\n      let X = new MatrixColumnSelectionView(toPredict, this.indexes[i]);\n      predictionValues[i] = this.estimators[i].predict(X);\n    }\n    return (predictionValues = new MatrixTransposeView(\n      new WrapperMatrix2D(predictionValues),\n    ));\n  }\n\n  /**\n   * Returns the Out-Of-Bag predictions.\n   * @return {Array} predictions\n   */\n  predictOOB() {\n    if (!this.oobResults || this.oobResults.length === 0) {\n      throw new Error(\n        'No Out-Of-Bag results found. Did you forgot to train first?',\n      );\n    }\n    return this.oobResults.map((v) => v.predicted);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      indexes: this.indexes,\n      n: this.n,\n      replacement: this.replacement,\n      maxFeatures: this.maxFeatures,\n      nEstimators: this.nEstimators,\n      treeOptions: this.treeOptions,\n      isClassifier: this.isClassifier,\n      seed: this.seed,\n      estimators: this.estimators.map((est) => est.toJSON()),\n      useSampleBagging: this.useSampleBagging,\n    };\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2832, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-random-forest/src/RandomForestClassifier.js"],"sourcesContent":["import arrayMode from 'ml-array-mode';\n\nimport { RandomForestBase } from './RandomForestBase';\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: true,\n  nEstimators: 50,\n  seed: 42,\n  useSampleBagging: true,\n  noOOB: false,\n};\n\n/**\n * @class RandomForestClassifier\n * @augments RandomForestBase\n */\nexport class RandomForestClassifier extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=50] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.useSampleBagging=true] - use bagging over training samples.\n   * @param {number} [options.maxSamples=null] - if null, then draw X.shape[0] samples. If int, then draw maxSamples samples. If float, then draw maxSamples * X.shape[0] samples. Thus, maxSamples should be in the interval (0.0, 1.0].\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      options.isClassifier = true;\n      super(options);\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return arrayMode(values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    let baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      name: 'RFClassifier',\n    };\n  }\n\n  /**\n   * Returns the confusion matrix\n   * Make sure to run train first.\n   * @return {object} - Current model.\n   */\n  getConfusionMatrix() {\n    if (!this.oobResults) {\n      throw new Error('No Out-Of-Bag results available.');\n    }\n\n    const labels = new Set();\n    const matrix = this.oobResults.reduce((p, v) => {\n      labels.add(v.true);\n      labels.add(v.predicted);\n      const x = p[v.predicted] || {};\n      x[v.true] = (x[v.true] || 0) + 1;\n      p[v.predicted] = x;\n      return p;\n    }, {});\n    const sortedLabels = [...labels].sort();\n\n    return sortedLabels.map((v) =>\n      sortedLabels.map((w) => (matrix[v] || {})[w] || 0),\n    );\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'RFClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestClassifier(true, model);\n  }\n\n  /**\n   * Predicts the probability of a label given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @param {number} label\n   * @return {Array} predictions\n   */\n  predictProbability(toPredict, label) {\n    const predictionValues = this.predictionValues(toPredict);\n    let predictions = new Array(predictionValues.rows);\n    for (let i = 0; i < predictionValues.rows; ++i) {\n      const pvs = predictionValues.getRow(i);\n      const l = pvs.length;\n      const roundFactor = Math.pow(10, 6);\n      predictions[i] =\n        Math.round(\n          pvs.reduce((p, v) => {\n            if (v === label) {\n              p += roundFactor / l;\n            }\n            return p;\n          }),\n        ) / roundFactor;\n    }\n\n    return predictions;\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,iBAAiB;IACrB,aAAa;IACb,aAAa;IACb,aAAa;IACb,MAAM;IACN,kBAAkB;IAClB,OAAO;AACT;AAMO,MAAM,+BAA+B,oKAAA,CAAA,mBAAgB;IAC1D;;;;;;;;;;;;;;GAcC,GACD,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,IAAI,YAAY,MAAM;YACpB,KAAK,CAAC,MAAM,MAAM,SAAS;QAC7B,OAAO;YACL,UAAU,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB;YAC5C,QAAQ,YAAY,GAAG;YACvB,KAAK,CAAC;QACR;IACF;IAEA;;;;GAIC,GACD,UAAU,MAAM,EAAE;QAChB,OAAO,CAAA,GAAA,6JAAA,CAAA,UAAS,AAAD,EAAE;IACnB;IAEA;;;GAGC,GACD,SAAS;QACP,IAAI,YAAY,KAAK,CAAC;QACtB,OAAO;YACL,WAAW;YACX,MAAM;QACR;IACF;IAEA;;;;GAIC,GACD,qBAAqB;QACnB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,IAAI;QACnB,MAAM,SAAS,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG;YACxC,OAAO,GAAG,CAAC,EAAE,IAAI;YACjB,OAAO,GAAG,CAAC,EAAE,SAAS;YACtB,MAAM,IAAI,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC;YAC7B,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;YAC/B,CAAC,CAAC,EAAE,SAAS,CAAC,GAAG;YACjB,OAAO;QACT,GAAG,CAAC;QACJ,MAAM,eAAe;eAAI;SAAO,CAAC,IAAI;QAErC,OAAO,aAAa,GAAG,CAAC,CAAC,IACvB,aAAa,GAAG,CAAC,CAAC,IAAM,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI;IAEpD;IAEA;;;;GAIC,GACD,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,MAAM,IAAI,WAAW,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;QACrD;QAEA,OAAO,IAAI,uBAAuB,MAAM;IAC1C;IAEA;;;;;GAKC,GACD,mBAAmB,SAAS,EAAE,KAAK,EAAE;QACnC,MAAM,mBAAmB,IAAI,CAAC,gBAAgB,CAAC;QAC/C,IAAI,cAAc,IAAI,MAAM,iBAAiB,IAAI;QACjD,IAAK,IAAI,IAAI,GAAG,IAAI,iBAAiB,IAAI,EAAE,EAAE,EAAG;YAC9C,MAAM,MAAM,iBAAiB,MAAM,CAAC;YACpC,MAAM,IAAI,IAAI,MAAM;YACpB,MAAM,cAAc,KAAK,GAAG,CAAC,IAAI;YACjC,WAAW,CAAC,EAAE,GACZ,KAAK,KAAK,CACR,IAAI,MAAM,CAAC,CAAC,GAAG;gBACb,IAAI,MAAM,OAAO;oBACf,KAAK,cAAc;gBACrB;gBACA,OAAO;YACT,MACE;QACR;QAEA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2948, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-random-forest/src/RandomForestRegression.js"],"sourcesContent":["import arrayMean from 'ml-array-mean';\nimport arrayMedian from 'ml-array-median';\n\nimport { RandomForestBase } from './RandomForestBase';\n\nconst selectionMethods = {\n  mean: arrayMean,\n  median: arrayMedian,\n};\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: false,\n  nEstimators: 50,\n  treeOptions: {},\n  selectionMethod: 'mean',\n  seed: 42,\n  useSampleBagging: true,\n  noOOB: false,\n};\n\n/**\n * @class RandomForestRegression\n * @augments RandomForestBase\n */\nexport class RandomForestRegression extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=50] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {string} [options.selectionMethod=\"mean\"] - the way to calculate the prediction from estimators, \"mean\" and \"median\" are supported.\n   * @param {boolean} [options.useSampleBagging=true] - use bagging over training samples.\n   * @param {number} [options.maxSamples=null] - if null, then draw X.shape[0] samples. If int, then draw maxSamples samples. If float, then draw maxSamples * X.shape[0] samples. Thus, maxSamples should be in the interval (0.0, 1.0].\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n      this.selectionMethod = model.selectionMethod;\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      if (\n        !(\n          options.selectionMethod === 'mean' ||\n          options.selectionMethod === 'median'\n        )\n      ) {\n        throw new RangeError(\n          `Unsupported selection method ${options.selectionMethod}`,\n        );\n      }\n\n      options.isClassifier = false;\n\n      super(options);\n      this.selectionMethod = options.selectionMethod;\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return selectionMethods[this.selectionMethod](values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    let baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      selectionMethod: this.selectionMethod,\n      name: 'RFRegression',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestRegression}\n   */\n  static load(model) {\n    if (model.name !== 'RFRegression') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestRegression(true, model);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;;;;AAEA,MAAM,mBAAmB;IACvB,MAAM,6JAAA,CAAA,UAAS;IACf,QAAQ,+JAAA,CAAA,UAAW;AACrB;AAEA,MAAM,iBAAiB;IACrB,aAAa;IACb,aAAa;IACb,aAAa;IACb,aAAa,CAAC;IACd,iBAAiB;IACjB,MAAM;IACN,kBAAkB;IAClB,OAAO;AACT;AAMO,MAAM,+BAA+B,oKAAA,CAAA,mBAAgB;IAC1D;;;;;;;;;;;;;;;GAeC,GACD,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,IAAI,YAAY,MAAM;YACpB,KAAK,CAAC,MAAM,MAAM,SAAS;YAC3B,IAAI,CAAC,eAAe,GAAG,MAAM,eAAe;QAC9C,OAAO;YACL,UAAU,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB;YAC5C,IACE,CAAC,CACC,QAAQ,eAAe,KAAK,UAC5B,QAAQ,eAAe,KAAK,QAC9B,GACA;gBACA,MAAM,IAAI,WACR,CAAC,6BAA6B,EAAE,QAAQ,eAAe,EAAE;YAE7D;YAEA,QAAQ,YAAY,GAAG;YAEvB,KAAK,CAAC;YACN,IAAI,CAAC,eAAe,GAAG,QAAQ,eAAe;QAChD;IACF;IAEA;;;;GAIC,GACD,UAAU,MAAM,EAAE;QAChB,OAAO,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAChD;IAEA;;;GAGC,GACD,SAAS;QACP,IAAI,YAAY,KAAK,CAAC;QACtB,OAAO;YACL,WAAW;YACX,iBAAiB,IAAI,CAAC,eAAe;YACrC,MAAM;QACR;IACF;IAEA;;;;GAIC,GACD,OAAO,KAAK,KAAK,EAAE;QACjB,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,MAAM,IAAI,WAAW,CAAC,eAAe,EAAE,MAAM,IAAI,EAAE;QACrD;QAEA,OAAO,IAAI,uBAAuB,MAAM;IAC1C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3036, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 3054, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/median-quickselect/lib/median-quickselect.min.js"],"sourcesContent":["(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n"],"names":[],"mappings":"AAAA,CAAC;IAAW,SAAS,EAAE,CAAC;QAAE,IAAI,IAAI,IAAE,GAAE,IAAE,EAAE,MAAM,GAAC,GAAE,IAAE,KAAK,GAAE,IAAE,KAAK,GAAE,IAAE,KAAK,GAAE,IAAE,EAAE,GAAE,IAAG,CAAC,GAAG;YAAC,IAAG,KAAG,GAAE,OAAO,CAAC,CAAC,EAAE;YAAC,IAAG,KAAG,IAAE,GAAE,OAAO,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,IAAE,EAAE,GAAE,GAAE,IAAG,CAAC,CAAC,EAAE;YAAC,IAAI,IAAE,EAAE,GAAE,IAAG,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,IAAE,EAAE,GAAE,GAAE,IAAG,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,IAAE,EAAE,GAAE,GAAE,IAAG,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,IAAE,EAAE,GAAE,GAAE,IAAG,EAAE,GAAE,GAAE,IAAE,IAAG,IAAE,IAAE,GAAE,IAAE,GAAE,CAAC,GAAG;gBAAC,GAAG;uBAAU,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,CAAE;gBAAA,GAAG;uBAAU,CAAC,CAAC,EAAE,GAAC,CAAC,CAAC,EAAE,CAAE;gBAAA,IAAG,IAAE,GAAE;gBAAM,EAAE,GAAE,GAAE;YAAE;YAAC,EAAE,GAAE,GAAE,IAAG,KAAG,KAAG,CAAC,IAAE,CAAC,GAAE,KAAG,KAAG,CAAC,IAAE,IAAE,CAAC;QAAC;IAAC;IAAC,IAAI,IAAE,SAAS,EAAE,CAAC,EAAC,CAAC,EAAC,CAAC;QAAE,IAAI;QAAK,OAAO,OAAK;YAAC,CAAC,CAAC,EAAE;YAAC,CAAC,CAAC,EAAE;SAAC,EAAC,CAAC,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,EAAE,GAAC,IAAI,CAAC,EAAE,EAAC;IAAI,GAAE,IAAE,SAAS,EAAE,CAAC,EAAC,CAAC;QAAE,OAAM,CAAC,CAAC,CAAC,CAAC,IAAE,CAAC,IAAE,CAAC;IAAC;IAAE,6DAA4B,OAAO,OAAO,GAAC,OAAO,OAAO,GAAC,IAAE,OAAO,MAAM,GAAC;AAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3087, "column": 0}, "map": {"version":3,"sources":["file:///Users/krishna/Documents/js-ml/frontend/node_modules/ml-array-median/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\nimport quickSelectMedian from 'median-quickselect';\n\nfunction median(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport { median as default };\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,SAAS,OAAO,KAAK;IACnB,IAAI,CAAC,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,MAAM,IAAI,UAAU;IACtB;IAEA,OAAO,CAAA,GAAA,+KAAA,CAAA,UAAiB,AAAD,EAAE,MAAM,KAAK;AACtC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3110, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","debugId":null}}]
}